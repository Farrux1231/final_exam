// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id               Int       @default(autoincrement()) @id
  name             String
  phone            String
  password         String
  status           String     @default("pending")
  role             String
  regionId         Int
  stir             Int?
  mfo              Int?
  hr               Int?
  bank             String?
  oked             Int?
  manzil           String?
  region           Region     @relation(fields: [regionId], references: [id])
  sessions         Session[]
  orders           Order[]
}

model Region {
  id               Int        @default(autoincrement()) @id
  name             String     @unique
  user             User[]
}

model Session {
  id               Int         @default(autoincrement()) @id
  ip               String
  userId           Int
  date             DateTime    @default(now())
  user             User        @relation(fields: [userId], references: [id])
}

model Level {
  id               Int         @default(autoincrement()) @id
  name             String      @unique
  product          orderProduct []
  professionLevel  professionLevel []
  masterProfession masterProfessions[]
}

model Comment {
  id               Int         @default(autoincrement()) @id
  message          String
  star             Float 
}

model Brand {
  id               Int         @default(autoincrement()) @id
  name             String      @unique
  tools            Tools[]
}

model Power {
  id               Int         @default(autoincrement()) @id
  name             String      @unique
  tools            Tools[]
}

model Size {
  id               Int         @default(autoincrement()) @id
  name             String      @unique
  tools            Tools[]
}

model Master {
  id               Int         @default(autoincrement()) @id
  fullname         String
  phone            String      @unique
  isActive         Boolean     @default(false)
  masterProfessions      masterProfessions[]
  image            String?
  passportImage    String?
  star             Float?
  about            String
}

model masterProfessions {
  id               Int         @default(autoincrement()) @id
  minWorking_h     Int?
  professionId     Int
  levelId          Int
  price_h          Float?
  price_d          Float?
  experience       Int
  masterId         Int
  level            Level        @relation(fields: [levelId],references: [id])
  profession       Profession   @relation(fields: [professionId], references: [id])
  master           Master       @relation(fields: [masterId], references: [id])
}

model professionLevel {
  id               Int         @default(autoincrement()) @id
  profession       Profession[]
  level            Level[]
  minWorking_h     Int
  price_h          Int
  price_d          Int
}

model Profession {
  id               Int         @default(autoincrement()) @id
  name             String
  image            String
  isActive         String
  professionToolId Int
  professionLevelId Int
  orderProductId   Int
  orderProduct    orderProduct @relation(fields: [orderProductId], references: [id])
  professionTool   professionTool @relation(fields: [professionToolId], references: [id])
  masterProfession masterProfessions[]
  professionLevel  professionLevel @relation(fields: [professionLevelId], references: [id])
}

model professionTool {
  id               Int         @default(autoincrement()) @id
  professsion      Profession[]
  tool             Tools[]
}

model Tools {
  id               Int         @default(autoincrement()) @id
  name             String
  desc             String
  price_h          Float
  price_d          Float
  quantity         Int
  code             Int        @unique
  brandId          Int
  isActive         String 
  capacityId       Int
  sizeId           Int
  image            String
  productId        Int  
  professionToolId Int
  professionTool   professionTool @relation(fields: [professionToolId], references: [id])
  product          orderProduct   @relation(fields: [productId], references: [id])
  brand            Brand          @relation(fields: [brandId], references: [id])
  capacity         Power          @relation(fields: [capacityId], references: [id])
  size             Size           @relation(fields: [sizeId], references: [id])
}

model Order {
  id               Int            @default(autoincrement()) @id
  total            Float
  location         String
  address          String
  date             DateTime       @default(now())
  pay_type         String
  withDelivery     Boolean 
  status           String
  instruction      String
  userId           Int
  orderProduct     orderProduct[]
  user             User            @relation(fields: [userId], references: [id])         
}

model orderProduct {
  id               Int             @default(autoincrement()) @id
  isActive         String 
  timeUnit         String                             
  workingTime      Int
  price            Float
  count            Int
  orderId          Int
  order            Order @relation(fields: [orderId], references: [id])
  tools            Tools[]
  level            Level[] 
  professions      Profession[]
}

model FAQ {
  id               Int             @default(autoincrement()) @id
  answer           String
  quiteions        String
}

model Contact {
  id               Int             @default(autoincrement()) @id
  name             String
  surname          String
  phone            String
  address          String
  message          String
}

model generalInfo {
  id               Int             @default(autoincrement()) @id
  link             String
  email            String
  phone            String
}
