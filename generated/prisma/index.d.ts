
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Region
 * 
 */
export type Region = $Result.DefaultSelection<Prisma.$RegionPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model Level
 * 
 */
export type Level = $Result.DefaultSelection<Prisma.$LevelPayload>
/**
 * Model Comment
 * 
 */
export type Comment = $Result.DefaultSelection<Prisma.$CommentPayload>
/**
 * Model Brand
 * 
 */
export type Brand = $Result.DefaultSelection<Prisma.$BrandPayload>
/**
 * Model Power
 * 
 */
export type Power = $Result.DefaultSelection<Prisma.$PowerPayload>
/**
 * Model Size
 * 
 */
export type Size = $Result.DefaultSelection<Prisma.$SizePayload>
/**
 * Model Master
 * 
 */
export type Master = $Result.DefaultSelection<Prisma.$MasterPayload>
/**
 * Model masterProfessions
 * 
 */
export type masterProfessions = $Result.DefaultSelection<Prisma.$masterProfessionsPayload>
/**
 * Model professionLevel
 * 
 */
export type professionLevel = $Result.DefaultSelection<Prisma.$professionLevelPayload>
/**
 * Model Profession
 * 
 */
export type Profession = $Result.DefaultSelection<Prisma.$ProfessionPayload>
/**
 * Model Tools
 * 
 */
export type Tools = $Result.DefaultSelection<Prisma.$ToolsPayload>
/**
 * Model Order
 * 
 */
export type Order = $Result.DefaultSelection<Prisma.$OrderPayload>
/**
 * Model orderProduct
 * 
 */
export type orderProduct = $Result.DefaultSelection<Prisma.$orderProductPayload>
/**
 * Model FAQ
 * 
 */
export type FAQ = $Result.DefaultSelection<Prisma.$FAQPayload>
/**
 * Model Contact
 * 
 */
export type Contact = $Result.DefaultSelection<Prisma.$ContactPayload>
/**
 * Model generalInfo
 * 
 */
export type generalInfo = $Result.DefaultSelection<Prisma.$generalInfoPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.region`: Exposes CRUD operations for the **Region** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Regions
    * const regions = await prisma.region.findMany()
    * ```
    */
  get region(): Prisma.RegionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.level`: Exposes CRUD operations for the **Level** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Levels
    * const levels = await prisma.level.findMany()
    * ```
    */
  get level(): Prisma.LevelDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.brand`: Exposes CRUD operations for the **Brand** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Brands
    * const brands = await prisma.brand.findMany()
    * ```
    */
  get brand(): Prisma.BrandDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.power`: Exposes CRUD operations for the **Power** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Powers
    * const powers = await prisma.power.findMany()
    * ```
    */
  get power(): Prisma.PowerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.size`: Exposes CRUD operations for the **Size** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sizes
    * const sizes = await prisma.size.findMany()
    * ```
    */
  get size(): Prisma.SizeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.master`: Exposes CRUD operations for the **Master** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Masters
    * const masters = await prisma.master.findMany()
    * ```
    */
  get master(): Prisma.MasterDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.masterProfessions`: Exposes CRUD operations for the **masterProfessions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MasterProfessions
    * const masterProfessions = await prisma.masterProfessions.findMany()
    * ```
    */
  get masterProfessions(): Prisma.masterProfessionsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.professionLevel`: Exposes CRUD operations for the **professionLevel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProfessionLevels
    * const professionLevels = await prisma.professionLevel.findMany()
    * ```
    */
  get professionLevel(): Prisma.professionLevelDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.profession`: Exposes CRUD operations for the **Profession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Professions
    * const professions = await prisma.profession.findMany()
    * ```
    */
  get profession(): Prisma.ProfessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tools`: Exposes CRUD operations for the **Tools** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tools
    * const tools = await prisma.tools.findMany()
    * ```
    */
  get tools(): Prisma.ToolsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.order`: Exposes CRUD operations for the **Order** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.order.findMany()
    * ```
    */
  get order(): Prisma.OrderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.orderProduct`: Exposes CRUD operations for the **orderProduct** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrderProducts
    * const orderProducts = await prisma.orderProduct.findMany()
    * ```
    */
  get orderProduct(): Prisma.orderProductDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.fAQ`: Exposes CRUD operations for the **FAQ** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FAQS
    * const fAQS = await prisma.fAQ.findMany()
    * ```
    */
  get fAQ(): Prisma.FAQDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.contact`: Exposes CRUD operations for the **Contact** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contacts
    * const contacts = await prisma.contact.findMany()
    * ```
    */
  get contact(): Prisma.ContactDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.generalInfo`: Exposes CRUD operations for the **generalInfo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GeneralInfos
    * const generalInfos = await prisma.generalInfo.findMany()
    * ```
    */
  get generalInfo(): Prisma.generalInfoDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Region: 'Region',
    Session: 'Session',
    Level: 'Level',
    Comment: 'Comment',
    Brand: 'Brand',
    Power: 'Power',
    Size: 'Size',
    Master: 'Master',
    masterProfessions: 'masterProfessions',
    professionLevel: 'professionLevel',
    Profession: 'Profession',
    Tools: 'Tools',
    Order: 'Order',
    orderProduct: 'orderProduct',
    FAQ: 'FAQ',
    Contact: 'Contact',
    generalInfo: 'generalInfo'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "region" | "session" | "level" | "comment" | "brand" | "power" | "size" | "master" | "masterProfessions" | "professionLevel" | "profession" | "tools" | "order" | "orderProduct" | "fAQ" | "contact" | "generalInfo"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Region: {
        payload: Prisma.$RegionPayload<ExtArgs>
        fields: Prisma.RegionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RegionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RegionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          findFirst: {
            args: Prisma.RegionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RegionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          findMany: {
            args: Prisma.RegionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>[]
          }
          create: {
            args: Prisma.RegionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          createMany: {
            args: Prisma.RegionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RegionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>[]
          }
          delete: {
            args: Prisma.RegionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          update: {
            args: Prisma.RegionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          deleteMany: {
            args: Prisma.RegionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RegionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RegionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>[]
          }
          upsert: {
            args: Prisma.RegionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          aggregate: {
            args: Prisma.RegionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRegion>
          }
          groupBy: {
            args: Prisma.RegionGroupByArgs<ExtArgs>
            result: $Utils.Optional<RegionGroupByOutputType>[]
          }
          count: {
            args: Prisma.RegionCountArgs<ExtArgs>
            result: $Utils.Optional<RegionCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      Level: {
        payload: Prisma.$LevelPayload<ExtArgs>
        fields: Prisma.LevelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LevelFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LevelFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload>
          }
          findFirst: {
            args: Prisma.LevelFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LevelFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload>
          }
          findMany: {
            args: Prisma.LevelFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload>[]
          }
          create: {
            args: Prisma.LevelCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload>
          }
          createMany: {
            args: Prisma.LevelCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LevelCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload>[]
          }
          delete: {
            args: Prisma.LevelDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload>
          }
          update: {
            args: Prisma.LevelUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload>
          }
          deleteMany: {
            args: Prisma.LevelDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LevelUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LevelUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload>[]
          }
          upsert: {
            args: Prisma.LevelUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LevelPayload>
          }
          aggregate: {
            args: Prisma.LevelAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLevel>
          }
          groupBy: {
            args: Prisma.LevelGroupByArgs<ExtArgs>
            result: $Utils.Optional<LevelGroupByOutputType>[]
          }
          count: {
            args: Prisma.LevelCountArgs<ExtArgs>
            result: $Utils.Optional<LevelCountAggregateOutputType> | number
          }
        }
      }
      Comment: {
        payload: Prisma.$CommentPayload<ExtArgs>
        fields: Prisma.CommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findFirst: {
            args: Prisma.CommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findMany: {
            args: Prisma.CommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          create: {
            args: Prisma.CommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          createMany: {
            args: Prisma.CommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CommentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          delete: {
            args: Prisma.CommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          update: {
            args: Prisma.CommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          deleteMany: {
            args: Prisma.CommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CommentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          upsert: {
            args: Prisma.CommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          aggregate: {
            args: Prisma.CommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComment>
          }
          groupBy: {
            args: Prisma.CommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentCountArgs<ExtArgs>
            result: $Utils.Optional<CommentCountAggregateOutputType> | number
          }
        }
      }
      Brand: {
        payload: Prisma.$BrandPayload<ExtArgs>
        fields: Prisma.BrandFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BrandFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BrandFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          findFirst: {
            args: Prisma.BrandFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BrandFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          findMany: {
            args: Prisma.BrandFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>[]
          }
          create: {
            args: Prisma.BrandCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          createMany: {
            args: Prisma.BrandCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BrandCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>[]
          }
          delete: {
            args: Prisma.BrandDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          update: {
            args: Prisma.BrandUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          deleteMany: {
            args: Prisma.BrandDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BrandUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BrandUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>[]
          }
          upsert: {
            args: Prisma.BrandUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          aggregate: {
            args: Prisma.BrandAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBrand>
          }
          groupBy: {
            args: Prisma.BrandGroupByArgs<ExtArgs>
            result: $Utils.Optional<BrandGroupByOutputType>[]
          }
          count: {
            args: Prisma.BrandCountArgs<ExtArgs>
            result: $Utils.Optional<BrandCountAggregateOutputType> | number
          }
        }
      }
      Power: {
        payload: Prisma.$PowerPayload<ExtArgs>
        fields: Prisma.PowerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PowerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PowerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PowerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PowerPayload>
          }
          findFirst: {
            args: Prisma.PowerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PowerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PowerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PowerPayload>
          }
          findMany: {
            args: Prisma.PowerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PowerPayload>[]
          }
          create: {
            args: Prisma.PowerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PowerPayload>
          }
          createMany: {
            args: Prisma.PowerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PowerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PowerPayload>[]
          }
          delete: {
            args: Prisma.PowerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PowerPayload>
          }
          update: {
            args: Prisma.PowerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PowerPayload>
          }
          deleteMany: {
            args: Prisma.PowerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PowerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PowerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PowerPayload>[]
          }
          upsert: {
            args: Prisma.PowerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PowerPayload>
          }
          aggregate: {
            args: Prisma.PowerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePower>
          }
          groupBy: {
            args: Prisma.PowerGroupByArgs<ExtArgs>
            result: $Utils.Optional<PowerGroupByOutputType>[]
          }
          count: {
            args: Prisma.PowerCountArgs<ExtArgs>
            result: $Utils.Optional<PowerCountAggregateOutputType> | number
          }
        }
      }
      Size: {
        payload: Prisma.$SizePayload<ExtArgs>
        fields: Prisma.SizeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SizeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SizeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload>
          }
          findFirst: {
            args: Prisma.SizeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SizeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload>
          }
          findMany: {
            args: Prisma.SizeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload>[]
          }
          create: {
            args: Prisma.SizeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload>
          }
          createMany: {
            args: Prisma.SizeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SizeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload>[]
          }
          delete: {
            args: Prisma.SizeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload>
          }
          update: {
            args: Prisma.SizeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload>
          }
          deleteMany: {
            args: Prisma.SizeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SizeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SizeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload>[]
          }
          upsert: {
            args: Prisma.SizeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizePayload>
          }
          aggregate: {
            args: Prisma.SizeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSize>
          }
          groupBy: {
            args: Prisma.SizeGroupByArgs<ExtArgs>
            result: $Utils.Optional<SizeGroupByOutputType>[]
          }
          count: {
            args: Prisma.SizeCountArgs<ExtArgs>
            result: $Utils.Optional<SizeCountAggregateOutputType> | number
          }
        }
      }
      Master: {
        payload: Prisma.$MasterPayload<ExtArgs>
        fields: Prisma.MasterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MasterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MasterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload>
          }
          findFirst: {
            args: Prisma.MasterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MasterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload>
          }
          findMany: {
            args: Prisma.MasterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload>[]
          }
          create: {
            args: Prisma.MasterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload>
          }
          createMany: {
            args: Prisma.MasterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MasterCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload>[]
          }
          delete: {
            args: Prisma.MasterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload>
          }
          update: {
            args: Prisma.MasterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload>
          }
          deleteMany: {
            args: Prisma.MasterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MasterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MasterUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload>[]
          }
          upsert: {
            args: Prisma.MasterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MasterPayload>
          }
          aggregate: {
            args: Prisma.MasterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMaster>
          }
          groupBy: {
            args: Prisma.MasterGroupByArgs<ExtArgs>
            result: $Utils.Optional<MasterGroupByOutputType>[]
          }
          count: {
            args: Prisma.MasterCountArgs<ExtArgs>
            result: $Utils.Optional<MasterCountAggregateOutputType> | number
          }
        }
      }
      masterProfessions: {
        payload: Prisma.$masterProfessionsPayload<ExtArgs>
        fields: Prisma.masterProfessionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.masterProfessionsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$masterProfessionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.masterProfessionsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$masterProfessionsPayload>
          }
          findFirst: {
            args: Prisma.masterProfessionsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$masterProfessionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.masterProfessionsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$masterProfessionsPayload>
          }
          findMany: {
            args: Prisma.masterProfessionsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$masterProfessionsPayload>[]
          }
          create: {
            args: Prisma.masterProfessionsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$masterProfessionsPayload>
          }
          createMany: {
            args: Prisma.masterProfessionsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.masterProfessionsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$masterProfessionsPayload>[]
          }
          delete: {
            args: Prisma.masterProfessionsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$masterProfessionsPayload>
          }
          update: {
            args: Prisma.masterProfessionsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$masterProfessionsPayload>
          }
          deleteMany: {
            args: Prisma.masterProfessionsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.masterProfessionsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.masterProfessionsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$masterProfessionsPayload>[]
          }
          upsert: {
            args: Prisma.masterProfessionsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$masterProfessionsPayload>
          }
          aggregate: {
            args: Prisma.MasterProfessionsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMasterProfessions>
          }
          groupBy: {
            args: Prisma.masterProfessionsGroupByArgs<ExtArgs>
            result: $Utils.Optional<MasterProfessionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.masterProfessionsCountArgs<ExtArgs>
            result: $Utils.Optional<MasterProfessionsCountAggregateOutputType> | number
          }
        }
      }
      professionLevel: {
        payload: Prisma.$professionLevelPayload<ExtArgs>
        fields: Prisma.professionLevelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.professionLevelFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$professionLevelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.professionLevelFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$professionLevelPayload>
          }
          findFirst: {
            args: Prisma.professionLevelFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$professionLevelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.professionLevelFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$professionLevelPayload>
          }
          findMany: {
            args: Prisma.professionLevelFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$professionLevelPayload>[]
          }
          create: {
            args: Prisma.professionLevelCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$professionLevelPayload>
          }
          createMany: {
            args: Prisma.professionLevelCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.professionLevelCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$professionLevelPayload>[]
          }
          delete: {
            args: Prisma.professionLevelDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$professionLevelPayload>
          }
          update: {
            args: Prisma.professionLevelUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$professionLevelPayload>
          }
          deleteMany: {
            args: Prisma.professionLevelDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.professionLevelUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.professionLevelUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$professionLevelPayload>[]
          }
          upsert: {
            args: Prisma.professionLevelUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$professionLevelPayload>
          }
          aggregate: {
            args: Prisma.ProfessionLevelAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfessionLevel>
          }
          groupBy: {
            args: Prisma.professionLevelGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfessionLevelGroupByOutputType>[]
          }
          count: {
            args: Prisma.professionLevelCountArgs<ExtArgs>
            result: $Utils.Optional<ProfessionLevelCountAggregateOutputType> | number
          }
        }
      }
      Profession: {
        payload: Prisma.$ProfessionPayload<ExtArgs>
        fields: Prisma.ProfessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionPayload>
          }
          findFirst: {
            args: Prisma.ProfessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionPayload>
          }
          findMany: {
            args: Prisma.ProfessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionPayload>[]
          }
          create: {
            args: Prisma.ProfessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionPayload>
          }
          createMany: {
            args: Prisma.ProfessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProfessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionPayload>[]
          }
          delete: {
            args: Prisma.ProfessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionPayload>
          }
          update: {
            args: Prisma.ProfessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionPayload>
          }
          deleteMany: {
            args: Prisma.ProfessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProfessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProfessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionPayload>[]
          }
          upsert: {
            args: Prisma.ProfessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionPayload>
          }
          aggregate: {
            args: Prisma.ProfessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfession>
          }
          groupBy: {
            args: Prisma.ProfessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfessionCountArgs<ExtArgs>
            result: $Utils.Optional<ProfessionCountAggregateOutputType> | number
          }
        }
      }
      Tools: {
        payload: Prisma.$ToolsPayload<ExtArgs>
        fields: Prisma.ToolsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ToolsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ToolsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolsPayload>
          }
          findFirst: {
            args: Prisma.ToolsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ToolsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolsPayload>
          }
          findMany: {
            args: Prisma.ToolsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolsPayload>[]
          }
          create: {
            args: Prisma.ToolsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolsPayload>
          }
          createMany: {
            args: Prisma.ToolsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ToolsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolsPayload>[]
          }
          delete: {
            args: Prisma.ToolsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolsPayload>
          }
          update: {
            args: Prisma.ToolsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolsPayload>
          }
          deleteMany: {
            args: Prisma.ToolsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ToolsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ToolsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolsPayload>[]
          }
          upsert: {
            args: Prisma.ToolsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToolsPayload>
          }
          aggregate: {
            args: Prisma.ToolsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTools>
          }
          groupBy: {
            args: Prisma.ToolsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ToolsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ToolsCountArgs<ExtArgs>
            result: $Utils.Optional<ToolsCountAggregateOutputType> | number
          }
        }
      }
      Order: {
        payload: Prisma.$OrderPayload<ExtArgs>
        fields: Prisma.OrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findFirst: {
            args: Prisma.OrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findMany: {
            args: Prisma.OrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          create: {
            args: Prisma.OrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          createMany: {
            args: Prisma.OrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          delete: {
            args: Prisma.OrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          update: {
            args: Prisma.OrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          deleteMany: {
            args: Prisma.OrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          upsert: {
            args: Prisma.OrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          aggregate: {
            args: Prisma.OrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrder>
          }
          groupBy: {
            args: Prisma.OrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderCountArgs<ExtArgs>
            result: $Utils.Optional<OrderCountAggregateOutputType> | number
          }
        }
      }
      orderProduct: {
        payload: Prisma.$orderProductPayload<ExtArgs>
        fields: Prisma.orderProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.orderProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.orderProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderProductPayload>
          }
          findFirst: {
            args: Prisma.orderProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.orderProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderProductPayload>
          }
          findMany: {
            args: Prisma.orderProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderProductPayload>[]
          }
          create: {
            args: Prisma.orderProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderProductPayload>
          }
          createMany: {
            args: Prisma.orderProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.orderProductCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderProductPayload>[]
          }
          delete: {
            args: Prisma.orderProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderProductPayload>
          }
          update: {
            args: Prisma.orderProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderProductPayload>
          }
          deleteMany: {
            args: Prisma.orderProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.orderProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.orderProductUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderProductPayload>[]
          }
          upsert: {
            args: Prisma.orderProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderProductPayload>
          }
          aggregate: {
            args: Prisma.OrderProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrderProduct>
          }
          groupBy: {
            args: Prisma.orderProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.orderProductCountArgs<ExtArgs>
            result: $Utils.Optional<OrderProductCountAggregateOutputType> | number
          }
        }
      }
      FAQ: {
        payload: Prisma.$FAQPayload<ExtArgs>
        fields: Prisma.FAQFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FAQFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FAQFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>
          }
          findFirst: {
            args: Prisma.FAQFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FAQFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>
          }
          findMany: {
            args: Prisma.FAQFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>[]
          }
          create: {
            args: Prisma.FAQCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>
          }
          createMany: {
            args: Prisma.FAQCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FAQCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>[]
          }
          delete: {
            args: Prisma.FAQDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>
          }
          update: {
            args: Prisma.FAQUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>
          }
          deleteMany: {
            args: Prisma.FAQDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FAQUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FAQUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>[]
          }
          upsert: {
            args: Prisma.FAQUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>
          }
          aggregate: {
            args: Prisma.FAQAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFAQ>
          }
          groupBy: {
            args: Prisma.FAQGroupByArgs<ExtArgs>
            result: $Utils.Optional<FAQGroupByOutputType>[]
          }
          count: {
            args: Prisma.FAQCountArgs<ExtArgs>
            result: $Utils.Optional<FAQCountAggregateOutputType> | number
          }
        }
      }
      Contact: {
        payload: Prisma.$ContactPayload<ExtArgs>
        fields: Prisma.ContactFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContactFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContactFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          findFirst: {
            args: Prisma.ContactFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContactFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          findMany: {
            args: Prisma.ContactFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>[]
          }
          create: {
            args: Prisma.ContactCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          createMany: {
            args: Prisma.ContactCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContactCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>[]
          }
          delete: {
            args: Prisma.ContactDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          update: {
            args: Prisma.ContactUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          deleteMany: {
            args: Prisma.ContactDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContactUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ContactUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>[]
          }
          upsert: {
            args: Prisma.ContactUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          aggregate: {
            args: Prisma.ContactAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContact>
          }
          groupBy: {
            args: Prisma.ContactGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContactGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContactCountArgs<ExtArgs>
            result: $Utils.Optional<ContactCountAggregateOutputType> | number
          }
        }
      }
      generalInfo: {
        payload: Prisma.$generalInfoPayload<ExtArgs>
        fields: Prisma.generalInfoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.generalInfoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$generalInfoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.generalInfoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$generalInfoPayload>
          }
          findFirst: {
            args: Prisma.generalInfoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$generalInfoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.generalInfoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$generalInfoPayload>
          }
          findMany: {
            args: Prisma.generalInfoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$generalInfoPayload>[]
          }
          create: {
            args: Prisma.generalInfoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$generalInfoPayload>
          }
          createMany: {
            args: Prisma.generalInfoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.generalInfoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$generalInfoPayload>[]
          }
          delete: {
            args: Prisma.generalInfoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$generalInfoPayload>
          }
          update: {
            args: Prisma.generalInfoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$generalInfoPayload>
          }
          deleteMany: {
            args: Prisma.generalInfoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.generalInfoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.generalInfoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$generalInfoPayload>[]
          }
          upsert: {
            args: Prisma.generalInfoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$generalInfoPayload>
          }
          aggregate: {
            args: Prisma.GeneralInfoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGeneralInfo>
          }
          groupBy: {
            args: Prisma.generalInfoGroupByArgs<ExtArgs>
            result: $Utils.Optional<GeneralInfoGroupByOutputType>[]
          }
          count: {
            args: Prisma.generalInfoCountArgs<ExtArgs>
            result: $Utils.Optional<GeneralInfoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    region?: RegionOmit
    session?: SessionOmit
    level?: LevelOmit
    comment?: CommentOmit
    brand?: BrandOmit
    power?: PowerOmit
    size?: SizeOmit
    master?: MasterOmit
    masterProfessions?: masterProfessionsOmit
    professionLevel?: professionLevelOmit
    profession?: ProfessionOmit
    tools?: ToolsOmit
    order?: OrderOmit
    orderProduct?: orderProductOmit
    fAQ?: FAQOmit
    contact?: ContactOmit
    generalInfo?: generalInfoOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    sessions: number
    orders: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    orders?: boolean | UserCountOutputTypeCountOrdersArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }


  /**
   * Count Type RegionCountOutputType
   */

  export type RegionCountOutputType = {
    user: number
  }

  export type RegionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | RegionCountOutputTypeCountUserArgs
  }

  // Custom InputTypes
  /**
   * RegionCountOutputType without action
   */
  export type RegionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionCountOutputType
     */
    select?: RegionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RegionCountOutputType without action
   */
  export type RegionCountOutputTypeCountUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type LevelCountOutputType
   */

  export type LevelCountOutputType = {
    product: number
    professionLevel: number
    masterProfession: number
  }

  export type LevelCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | LevelCountOutputTypeCountProductArgs
    professionLevel?: boolean | LevelCountOutputTypeCountProfessionLevelArgs
    masterProfession?: boolean | LevelCountOutputTypeCountMasterProfessionArgs
  }

  // Custom InputTypes
  /**
   * LevelCountOutputType without action
   */
  export type LevelCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelCountOutputType
     */
    select?: LevelCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LevelCountOutputType without action
   */
  export type LevelCountOutputTypeCountProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: orderProductWhereInput
  }

  /**
   * LevelCountOutputType without action
   */
  export type LevelCountOutputTypeCountProfessionLevelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: professionLevelWhereInput
  }

  /**
   * LevelCountOutputType without action
   */
  export type LevelCountOutputTypeCountMasterProfessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: masterProfessionsWhereInput
  }


  /**
   * Count Type BrandCountOutputType
   */

  export type BrandCountOutputType = {
    tools: number
  }

  export type BrandCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tools?: boolean | BrandCountOutputTypeCountToolsArgs
  }

  // Custom InputTypes
  /**
   * BrandCountOutputType without action
   */
  export type BrandCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BrandCountOutputType
     */
    select?: BrandCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BrandCountOutputType without action
   */
  export type BrandCountOutputTypeCountToolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ToolsWhereInput
  }


  /**
   * Count Type PowerCountOutputType
   */

  export type PowerCountOutputType = {
    tools: number
  }

  export type PowerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tools?: boolean | PowerCountOutputTypeCountToolsArgs
  }

  // Custom InputTypes
  /**
   * PowerCountOutputType without action
   */
  export type PowerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PowerCountOutputType
     */
    select?: PowerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PowerCountOutputType without action
   */
  export type PowerCountOutputTypeCountToolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ToolsWhereInput
  }


  /**
   * Count Type SizeCountOutputType
   */

  export type SizeCountOutputType = {
    tools: number
  }

  export type SizeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tools?: boolean | SizeCountOutputTypeCountToolsArgs
  }

  // Custom InputTypes
  /**
   * SizeCountOutputType without action
   */
  export type SizeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeCountOutputType
     */
    select?: SizeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SizeCountOutputType without action
   */
  export type SizeCountOutputTypeCountToolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ToolsWhereInput
  }


  /**
   * Count Type MasterCountOutputType
   */

  export type MasterCountOutputType = {
    masterProfessions: number
  }

  export type MasterCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    masterProfessions?: boolean | MasterCountOutputTypeCountMasterProfessionsArgs
  }

  // Custom InputTypes
  /**
   * MasterCountOutputType without action
   */
  export type MasterCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MasterCountOutputType
     */
    select?: MasterCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MasterCountOutputType without action
   */
  export type MasterCountOutputTypeCountMasterProfessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: masterProfessionsWhereInput
  }


  /**
   * Count Type ProfessionCountOutputType
   */

  export type ProfessionCountOutputType = {
    orderProduct: number
    masterProfession: number
    professionLevel: number
    tools: number
  }

  export type ProfessionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orderProduct?: boolean | ProfessionCountOutputTypeCountOrderProductArgs
    masterProfession?: boolean | ProfessionCountOutputTypeCountMasterProfessionArgs
    professionLevel?: boolean | ProfessionCountOutputTypeCountProfessionLevelArgs
    tools?: boolean | ProfessionCountOutputTypeCountToolsArgs
  }

  // Custom InputTypes
  /**
   * ProfessionCountOutputType without action
   */
  export type ProfessionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionCountOutputType
     */
    select?: ProfessionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProfessionCountOutputType without action
   */
  export type ProfessionCountOutputTypeCountOrderProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: orderProductWhereInput
  }

  /**
   * ProfessionCountOutputType without action
   */
  export type ProfessionCountOutputTypeCountMasterProfessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: masterProfessionsWhereInput
  }

  /**
   * ProfessionCountOutputType without action
   */
  export type ProfessionCountOutputTypeCountProfessionLevelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: professionLevelWhereInput
  }

  /**
   * ProfessionCountOutputType without action
   */
  export type ProfessionCountOutputTypeCountToolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ToolsWhereInput
  }


  /**
   * Count Type ToolsCountOutputType
   */

  export type ToolsCountOutputType = {
    orderProduct: number
    professions: number
  }

  export type ToolsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orderProduct?: boolean | ToolsCountOutputTypeCountOrderProductArgs
    professions?: boolean | ToolsCountOutputTypeCountProfessionsArgs
  }

  // Custom InputTypes
  /**
   * ToolsCountOutputType without action
   */
  export type ToolsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ToolsCountOutputType
     */
    select?: ToolsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ToolsCountOutputType without action
   */
  export type ToolsCountOutputTypeCountOrderProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: orderProductWhereInput
  }

  /**
   * ToolsCountOutputType without action
   */
  export type ToolsCountOutputTypeCountProfessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfessionWhereInput
  }


  /**
   * Count Type OrderCountOutputType
   */

  export type OrderCountOutputType = {
    orderProduct: number
  }

  export type OrderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orderProduct?: boolean | OrderCountOutputTypeCountOrderProductArgs
  }

  // Custom InputTypes
  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderCountOutputType
     */
    select?: OrderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountOrderProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: orderProductWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    regionId: number | null
    stir: number | null
    mfo: number | null
    hr: number | null
    oked: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    regionId: number | null
    stir: number | null
    mfo: number | null
    hr: number | null
    oked: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    phone: string | null
    password: string | null
    status: string | null
    role: string | null
    regionId: number | null
    stir: number | null
    mfo: number | null
    hr: number | null
    bank: string | null
    oked: number | null
    manzil: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    phone: string | null
    password: string | null
    status: string | null
    role: string | null
    regionId: number | null
    stir: number | null
    mfo: number | null
    hr: number | null
    bank: string | null
    oked: number | null
    manzil: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    phone: number
    password: number
    status: number
    role: number
    regionId: number
    stir: number
    mfo: number
    hr: number
    bank: number
    oked: number
    manzil: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    regionId?: true
    stir?: true
    mfo?: true
    hr?: true
    oked?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    regionId?: true
    stir?: true
    mfo?: true
    hr?: true
    oked?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    phone?: true
    password?: true
    status?: true
    role?: true
    regionId?: true
    stir?: true
    mfo?: true
    hr?: true
    bank?: true
    oked?: true
    manzil?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    phone?: true
    password?: true
    status?: true
    role?: true
    regionId?: true
    stir?: true
    mfo?: true
    hr?: true
    bank?: true
    oked?: true
    manzil?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    phone?: true
    password?: true
    status?: true
    role?: true
    regionId?: true
    stir?: true
    mfo?: true
    hr?: true
    bank?: true
    oked?: true
    manzil?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    name: string
    phone: string
    password: string
    status: string
    role: string
    regionId: number
    stir: number | null
    mfo: number | null
    hr: number | null
    bank: string | null
    oked: number | null
    manzil: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    phone?: boolean
    password?: boolean
    status?: boolean
    role?: boolean
    regionId?: boolean
    stir?: boolean
    mfo?: boolean
    hr?: boolean
    bank?: boolean
    oked?: boolean
    manzil?: boolean
    region?: boolean | RegionDefaultArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    orders?: boolean | User$ordersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    phone?: boolean
    password?: boolean
    status?: boolean
    role?: boolean
    regionId?: boolean
    stir?: boolean
    mfo?: boolean
    hr?: boolean
    bank?: boolean
    oked?: boolean
    manzil?: boolean
    region?: boolean | RegionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    phone?: boolean
    password?: boolean
    status?: boolean
    role?: boolean
    regionId?: boolean
    stir?: boolean
    mfo?: boolean
    hr?: boolean
    bank?: boolean
    oked?: boolean
    manzil?: boolean
    region?: boolean | RegionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    phone?: boolean
    password?: boolean
    status?: boolean
    role?: boolean
    regionId?: boolean
    stir?: boolean
    mfo?: boolean
    hr?: boolean
    bank?: boolean
    oked?: boolean
    manzil?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "phone" | "password" | "status" | "role" | "regionId" | "stir" | "mfo" | "hr" | "bank" | "oked" | "manzil", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    region?: boolean | RegionDefaultArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    orders?: boolean | User$ordersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    region?: boolean | RegionDefaultArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    region?: boolean | RegionDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      region: Prisma.$RegionPayload<ExtArgs>
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      orders: Prisma.$OrderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      phone: string
      password: string
      status: string
      role: string
      regionId: number
      stir: number | null
      mfo: number | null
      hr: number | null
      bank: string | null
      oked: number | null
      manzil: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    region<T extends RegionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RegionDefaultArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    orders<T extends User$ordersArgs<ExtArgs> = {}>(args?: Subset<T, User$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly name: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly status: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly regionId: FieldRef<"User", 'Int'>
    readonly stir: FieldRef<"User", 'Int'>
    readonly mfo: FieldRef<"User", 'Int'>
    readonly hr: FieldRef<"User", 'Int'>
    readonly bank: FieldRef<"User", 'String'>
    readonly oked: FieldRef<"User", 'Int'>
    readonly manzil: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.orders
   */
  export type User$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Region
   */

  export type AggregateRegion = {
    _count: RegionCountAggregateOutputType | null
    _avg: RegionAvgAggregateOutputType | null
    _sum: RegionSumAggregateOutputType | null
    _min: RegionMinAggregateOutputType | null
    _max: RegionMaxAggregateOutputType | null
  }

  export type RegionAvgAggregateOutputType = {
    id: number | null
  }

  export type RegionSumAggregateOutputType = {
    id: number | null
  }

  export type RegionMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type RegionMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type RegionCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type RegionAvgAggregateInputType = {
    id?: true
  }

  export type RegionSumAggregateInputType = {
    id?: true
  }

  export type RegionMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type RegionMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type RegionCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type RegionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Region to aggregate.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Regions
    **/
    _count?: true | RegionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RegionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RegionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RegionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RegionMaxAggregateInputType
  }

  export type GetRegionAggregateType<T extends RegionAggregateArgs> = {
        [P in keyof T & keyof AggregateRegion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRegion[P]>
      : GetScalarType<T[P], AggregateRegion[P]>
  }




  export type RegionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegionWhereInput
    orderBy?: RegionOrderByWithAggregationInput | RegionOrderByWithAggregationInput[]
    by: RegionScalarFieldEnum[] | RegionScalarFieldEnum
    having?: RegionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RegionCountAggregateInputType | true
    _avg?: RegionAvgAggregateInputType
    _sum?: RegionSumAggregateInputType
    _min?: RegionMinAggregateInputType
    _max?: RegionMaxAggregateInputType
  }

  export type RegionGroupByOutputType = {
    id: number
    name: string
    _count: RegionCountAggregateOutputType | null
    _avg: RegionAvgAggregateOutputType | null
    _sum: RegionSumAggregateOutputType | null
    _min: RegionMinAggregateOutputType | null
    _max: RegionMaxAggregateOutputType | null
  }

  type GetRegionGroupByPayload<T extends RegionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RegionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RegionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RegionGroupByOutputType[P]>
            : GetScalarType<T[P], RegionGroupByOutputType[P]>
        }
      >
    >


  export type RegionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    user?: boolean | Region$userArgs<ExtArgs>
    _count?: boolean | RegionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["region"]>

  export type RegionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["region"]>

  export type RegionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["region"]>

  export type RegionSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type RegionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["region"]>
  export type RegionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Region$userArgs<ExtArgs>
    _count?: boolean | RegionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RegionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type RegionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RegionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Region"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["region"]>
    composites: {}
  }

  type RegionGetPayload<S extends boolean | null | undefined | RegionDefaultArgs> = $Result.GetResult<Prisma.$RegionPayload, S>

  type RegionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RegionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RegionCountAggregateInputType | true
    }

  export interface RegionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Region'], meta: { name: 'Region' } }
    /**
     * Find zero or one Region that matches the filter.
     * @param {RegionFindUniqueArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RegionFindUniqueArgs>(args: SelectSubset<T, RegionFindUniqueArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Region that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RegionFindUniqueOrThrowArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RegionFindUniqueOrThrowArgs>(args: SelectSubset<T, RegionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Region that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionFindFirstArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RegionFindFirstArgs>(args?: SelectSubset<T, RegionFindFirstArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Region that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionFindFirstOrThrowArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RegionFindFirstOrThrowArgs>(args?: SelectSubset<T, RegionFindFirstOrThrowArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Regions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Regions
     * const regions = await prisma.region.findMany()
     * 
     * // Get first 10 Regions
     * const regions = await prisma.region.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const regionWithIdOnly = await prisma.region.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RegionFindManyArgs>(args?: SelectSubset<T, RegionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Region.
     * @param {RegionCreateArgs} args - Arguments to create a Region.
     * @example
     * // Create one Region
     * const Region = await prisma.region.create({
     *   data: {
     *     // ... data to create a Region
     *   }
     * })
     * 
     */
    create<T extends RegionCreateArgs>(args: SelectSubset<T, RegionCreateArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Regions.
     * @param {RegionCreateManyArgs} args - Arguments to create many Regions.
     * @example
     * // Create many Regions
     * const region = await prisma.region.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RegionCreateManyArgs>(args?: SelectSubset<T, RegionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Regions and returns the data saved in the database.
     * @param {RegionCreateManyAndReturnArgs} args - Arguments to create many Regions.
     * @example
     * // Create many Regions
     * const region = await prisma.region.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Regions and only return the `id`
     * const regionWithIdOnly = await prisma.region.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RegionCreateManyAndReturnArgs>(args?: SelectSubset<T, RegionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Region.
     * @param {RegionDeleteArgs} args - Arguments to delete one Region.
     * @example
     * // Delete one Region
     * const Region = await prisma.region.delete({
     *   where: {
     *     // ... filter to delete one Region
     *   }
     * })
     * 
     */
    delete<T extends RegionDeleteArgs>(args: SelectSubset<T, RegionDeleteArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Region.
     * @param {RegionUpdateArgs} args - Arguments to update one Region.
     * @example
     * // Update one Region
     * const region = await prisma.region.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RegionUpdateArgs>(args: SelectSubset<T, RegionUpdateArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Regions.
     * @param {RegionDeleteManyArgs} args - Arguments to filter Regions to delete.
     * @example
     * // Delete a few Regions
     * const { count } = await prisma.region.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RegionDeleteManyArgs>(args?: SelectSubset<T, RegionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Regions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Regions
     * const region = await prisma.region.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RegionUpdateManyArgs>(args: SelectSubset<T, RegionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Regions and returns the data updated in the database.
     * @param {RegionUpdateManyAndReturnArgs} args - Arguments to update many Regions.
     * @example
     * // Update many Regions
     * const region = await prisma.region.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Regions and only return the `id`
     * const regionWithIdOnly = await prisma.region.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RegionUpdateManyAndReturnArgs>(args: SelectSubset<T, RegionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Region.
     * @param {RegionUpsertArgs} args - Arguments to update or create a Region.
     * @example
     * // Update or create a Region
     * const region = await prisma.region.upsert({
     *   create: {
     *     // ... data to create a Region
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Region we want to update
     *   }
     * })
     */
    upsert<T extends RegionUpsertArgs>(args: SelectSubset<T, RegionUpsertArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Regions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionCountArgs} args - Arguments to filter Regions to count.
     * @example
     * // Count the number of Regions
     * const count = await prisma.region.count({
     *   where: {
     *     // ... the filter for the Regions we want to count
     *   }
     * })
    **/
    count<T extends RegionCountArgs>(
      args?: Subset<T, RegionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RegionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Region.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RegionAggregateArgs>(args: Subset<T, RegionAggregateArgs>): Prisma.PrismaPromise<GetRegionAggregateType<T>>

    /**
     * Group by Region.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RegionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RegionGroupByArgs['orderBy'] }
        : { orderBy?: RegionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RegionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRegionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Region model
   */
  readonly fields: RegionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Region.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RegionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Region$userArgs<ExtArgs> = {}>(args?: Subset<T, Region$userArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Region model
   */
  interface RegionFieldRefs {
    readonly id: FieldRef<"Region", 'Int'>
    readonly name: FieldRef<"Region", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Region findUnique
   */
  export type RegionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where: RegionWhereUniqueInput
  }

  /**
   * Region findUniqueOrThrow
   */
  export type RegionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where: RegionWhereUniqueInput
  }

  /**
   * Region findFirst
   */
  export type RegionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Regions.
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Regions.
     */
    distinct?: RegionScalarFieldEnum | RegionScalarFieldEnum[]
  }

  /**
   * Region findFirstOrThrow
   */
  export type RegionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Regions.
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Regions.
     */
    distinct?: RegionScalarFieldEnum | RegionScalarFieldEnum[]
  }

  /**
   * Region findMany
   */
  export type RegionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Regions to fetch.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Regions.
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    distinct?: RegionScalarFieldEnum | RegionScalarFieldEnum[]
  }

  /**
   * Region create
   */
  export type RegionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * The data needed to create a Region.
     */
    data: XOR<RegionCreateInput, RegionUncheckedCreateInput>
  }

  /**
   * Region createMany
   */
  export type RegionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Regions.
     */
    data: RegionCreateManyInput | RegionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Region createManyAndReturn
   */
  export type RegionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * The data used to create many Regions.
     */
    data: RegionCreateManyInput | RegionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Region update
   */
  export type RegionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * The data needed to update a Region.
     */
    data: XOR<RegionUpdateInput, RegionUncheckedUpdateInput>
    /**
     * Choose, which Region to update.
     */
    where: RegionWhereUniqueInput
  }

  /**
   * Region updateMany
   */
  export type RegionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Regions.
     */
    data: XOR<RegionUpdateManyMutationInput, RegionUncheckedUpdateManyInput>
    /**
     * Filter which Regions to update
     */
    where?: RegionWhereInput
    /**
     * Limit how many Regions to update.
     */
    limit?: number
  }

  /**
   * Region updateManyAndReturn
   */
  export type RegionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * The data used to update Regions.
     */
    data: XOR<RegionUpdateManyMutationInput, RegionUncheckedUpdateManyInput>
    /**
     * Filter which Regions to update
     */
    where?: RegionWhereInput
    /**
     * Limit how many Regions to update.
     */
    limit?: number
  }

  /**
   * Region upsert
   */
  export type RegionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * The filter to search for the Region to update in case it exists.
     */
    where: RegionWhereUniqueInput
    /**
     * In case the Region found by the `where` argument doesn't exist, create a new Region with this data.
     */
    create: XOR<RegionCreateInput, RegionUncheckedCreateInput>
    /**
     * In case the Region was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RegionUpdateInput, RegionUncheckedUpdateInput>
  }

  /**
   * Region delete
   */
  export type RegionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter which Region to delete.
     */
    where: RegionWhereUniqueInput
  }

  /**
   * Region deleteMany
   */
  export type RegionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Regions to delete
     */
    where?: RegionWhereInput
    /**
     * Limit how many Regions to delete.
     */
    limit?: number
  }

  /**
   * Region.user
   */
  export type Region$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Region without action
   */
  export type RegionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Region
     */
    omit?: RegionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type SessionSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type SessionMinAggregateOutputType = {
    id: number | null
    ip: string | null
    userId: number | null
    date: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: number | null
    ip: string | null
    userId: number | null
    date: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    ip: number
    userId: number
    date: number
    _all: number
  }


  export type SessionAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type SessionSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type SessionMinAggregateInputType = {
    id?: true
    ip?: true
    userId?: true
    date?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    ip?: true
    userId?: true
    date?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    ip?: true
    userId?: true
    date?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _avg?: SessionAvgAggregateInputType
    _sum?: SessionSumAggregateInputType
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: number
    ip: string
    userId: number
    date: Date
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ip?: boolean
    userId?: boolean
    date?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ip?: boolean
    userId?: boolean
    date?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ip?: boolean
    userId?: boolean
    date?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    ip?: boolean
    userId?: boolean
    date?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "ip" | "userId" | "date", ExtArgs["result"]["session"]>
  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      ip: string
      userId: number
      date: Date
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions and returns the data updated in the database.
     * @param {SessionUpdateManyAndReturnArgs} args - Arguments to update many Sessions.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'Int'>
    readonly ip: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'Int'>
    readonly date: FieldRef<"Session", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session updateManyAndReturn
   */
  export type SessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model Level
   */

  export type AggregateLevel = {
    _count: LevelCountAggregateOutputType | null
    _avg: LevelAvgAggregateOutputType | null
    _sum: LevelSumAggregateOutputType | null
    _min: LevelMinAggregateOutputType | null
    _max: LevelMaxAggregateOutputType | null
  }

  export type LevelAvgAggregateOutputType = {
    id: number | null
  }

  export type LevelSumAggregateOutputType = {
    id: number | null
  }

  export type LevelMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type LevelMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type LevelCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type LevelAvgAggregateInputType = {
    id?: true
  }

  export type LevelSumAggregateInputType = {
    id?: true
  }

  export type LevelMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type LevelMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type LevelCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type LevelAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Level to aggregate.
     */
    where?: LevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Levels to fetch.
     */
    orderBy?: LevelOrderByWithRelationInput | LevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Levels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Levels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Levels
    **/
    _count?: true | LevelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LevelAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LevelSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LevelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LevelMaxAggregateInputType
  }

  export type GetLevelAggregateType<T extends LevelAggregateArgs> = {
        [P in keyof T & keyof AggregateLevel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLevel[P]>
      : GetScalarType<T[P], AggregateLevel[P]>
  }




  export type LevelGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LevelWhereInput
    orderBy?: LevelOrderByWithAggregationInput | LevelOrderByWithAggregationInput[]
    by: LevelScalarFieldEnum[] | LevelScalarFieldEnum
    having?: LevelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LevelCountAggregateInputType | true
    _avg?: LevelAvgAggregateInputType
    _sum?: LevelSumAggregateInputType
    _min?: LevelMinAggregateInputType
    _max?: LevelMaxAggregateInputType
  }

  export type LevelGroupByOutputType = {
    id: number
    name: string
    _count: LevelCountAggregateOutputType | null
    _avg: LevelAvgAggregateOutputType | null
    _sum: LevelSumAggregateOutputType | null
    _min: LevelMinAggregateOutputType | null
    _max: LevelMaxAggregateOutputType | null
  }

  type GetLevelGroupByPayload<T extends LevelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LevelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LevelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LevelGroupByOutputType[P]>
            : GetScalarType<T[P], LevelGroupByOutputType[P]>
        }
      >
    >


  export type LevelSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    product?: boolean | Level$productArgs<ExtArgs>
    professionLevel?: boolean | Level$professionLevelArgs<ExtArgs>
    masterProfession?: boolean | Level$masterProfessionArgs<ExtArgs>
    _count?: boolean | LevelCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["level"]>

  export type LevelSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["level"]>

  export type LevelSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["level"]>

  export type LevelSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type LevelOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["level"]>
  export type LevelInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | Level$productArgs<ExtArgs>
    professionLevel?: boolean | Level$professionLevelArgs<ExtArgs>
    masterProfession?: boolean | Level$masterProfessionArgs<ExtArgs>
    _count?: boolean | LevelCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LevelIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type LevelIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $LevelPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Level"
    objects: {
      product: Prisma.$orderProductPayload<ExtArgs>[]
      professionLevel: Prisma.$professionLevelPayload<ExtArgs>[]
      masterProfession: Prisma.$masterProfessionsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["level"]>
    composites: {}
  }

  type LevelGetPayload<S extends boolean | null | undefined | LevelDefaultArgs> = $Result.GetResult<Prisma.$LevelPayload, S>

  type LevelCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LevelFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LevelCountAggregateInputType | true
    }

  export interface LevelDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Level'], meta: { name: 'Level' } }
    /**
     * Find zero or one Level that matches the filter.
     * @param {LevelFindUniqueArgs} args - Arguments to find a Level
     * @example
     * // Get one Level
     * const level = await prisma.level.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LevelFindUniqueArgs>(args: SelectSubset<T, LevelFindUniqueArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Level that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LevelFindUniqueOrThrowArgs} args - Arguments to find a Level
     * @example
     * // Get one Level
     * const level = await prisma.level.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LevelFindUniqueOrThrowArgs>(args: SelectSubset<T, LevelFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Level that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelFindFirstArgs} args - Arguments to find a Level
     * @example
     * // Get one Level
     * const level = await prisma.level.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LevelFindFirstArgs>(args?: SelectSubset<T, LevelFindFirstArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Level that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelFindFirstOrThrowArgs} args - Arguments to find a Level
     * @example
     * // Get one Level
     * const level = await prisma.level.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LevelFindFirstOrThrowArgs>(args?: SelectSubset<T, LevelFindFirstOrThrowArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Levels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Levels
     * const levels = await prisma.level.findMany()
     * 
     * // Get first 10 Levels
     * const levels = await prisma.level.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const levelWithIdOnly = await prisma.level.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LevelFindManyArgs>(args?: SelectSubset<T, LevelFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Level.
     * @param {LevelCreateArgs} args - Arguments to create a Level.
     * @example
     * // Create one Level
     * const Level = await prisma.level.create({
     *   data: {
     *     // ... data to create a Level
     *   }
     * })
     * 
     */
    create<T extends LevelCreateArgs>(args: SelectSubset<T, LevelCreateArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Levels.
     * @param {LevelCreateManyArgs} args - Arguments to create many Levels.
     * @example
     * // Create many Levels
     * const level = await prisma.level.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LevelCreateManyArgs>(args?: SelectSubset<T, LevelCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Levels and returns the data saved in the database.
     * @param {LevelCreateManyAndReturnArgs} args - Arguments to create many Levels.
     * @example
     * // Create many Levels
     * const level = await prisma.level.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Levels and only return the `id`
     * const levelWithIdOnly = await prisma.level.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LevelCreateManyAndReturnArgs>(args?: SelectSubset<T, LevelCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Level.
     * @param {LevelDeleteArgs} args - Arguments to delete one Level.
     * @example
     * // Delete one Level
     * const Level = await prisma.level.delete({
     *   where: {
     *     // ... filter to delete one Level
     *   }
     * })
     * 
     */
    delete<T extends LevelDeleteArgs>(args: SelectSubset<T, LevelDeleteArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Level.
     * @param {LevelUpdateArgs} args - Arguments to update one Level.
     * @example
     * // Update one Level
     * const level = await prisma.level.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LevelUpdateArgs>(args: SelectSubset<T, LevelUpdateArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Levels.
     * @param {LevelDeleteManyArgs} args - Arguments to filter Levels to delete.
     * @example
     * // Delete a few Levels
     * const { count } = await prisma.level.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LevelDeleteManyArgs>(args?: SelectSubset<T, LevelDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Levels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Levels
     * const level = await prisma.level.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LevelUpdateManyArgs>(args: SelectSubset<T, LevelUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Levels and returns the data updated in the database.
     * @param {LevelUpdateManyAndReturnArgs} args - Arguments to update many Levels.
     * @example
     * // Update many Levels
     * const level = await prisma.level.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Levels and only return the `id`
     * const levelWithIdOnly = await prisma.level.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LevelUpdateManyAndReturnArgs>(args: SelectSubset<T, LevelUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Level.
     * @param {LevelUpsertArgs} args - Arguments to update or create a Level.
     * @example
     * // Update or create a Level
     * const level = await prisma.level.upsert({
     *   create: {
     *     // ... data to create a Level
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Level we want to update
     *   }
     * })
     */
    upsert<T extends LevelUpsertArgs>(args: SelectSubset<T, LevelUpsertArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Levels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelCountArgs} args - Arguments to filter Levels to count.
     * @example
     * // Count the number of Levels
     * const count = await prisma.level.count({
     *   where: {
     *     // ... the filter for the Levels we want to count
     *   }
     * })
    **/
    count<T extends LevelCountArgs>(
      args?: Subset<T, LevelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LevelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Level.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LevelAggregateArgs>(args: Subset<T, LevelAggregateArgs>): Prisma.PrismaPromise<GetLevelAggregateType<T>>

    /**
     * Group by Level.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LevelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LevelGroupByArgs['orderBy'] }
        : { orderBy?: LevelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LevelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLevelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Level model
   */
  readonly fields: LevelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Level.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LevelClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends Level$productArgs<ExtArgs> = {}>(args?: Subset<T, Level$productArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$orderProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    professionLevel<T extends Level$professionLevelArgs<ExtArgs> = {}>(args?: Subset<T, Level$professionLevelArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$professionLevelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    masterProfession<T extends Level$masterProfessionArgs<ExtArgs> = {}>(args?: Subset<T, Level$masterProfessionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$masterProfessionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Level model
   */
  interface LevelFieldRefs {
    readonly id: FieldRef<"Level", 'Int'>
    readonly name: FieldRef<"Level", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Level findUnique
   */
  export type LevelFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    /**
     * Filter, which Level to fetch.
     */
    where: LevelWhereUniqueInput
  }

  /**
   * Level findUniqueOrThrow
   */
  export type LevelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    /**
     * Filter, which Level to fetch.
     */
    where: LevelWhereUniqueInput
  }

  /**
   * Level findFirst
   */
  export type LevelFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    /**
     * Filter, which Level to fetch.
     */
    where?: LevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Levels to fetch.
     */
    orderBy?: LevelOrderByWithRelationInput | LevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Levels.
     */
    cursor?: LevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Levels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Levels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Levels.
     */
    distinct?: LevelScalarFieldEnum | LevelScalarFieldEnum[]
  }

  /**
   * Level findFirstOrThrow
   */
  export type LevelFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    /**
     * Filter, which Level to fetch.
     */
    where?: LevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Levels to fetch.
     */
    orderBy?: LevelOrderByWithRelationInput | LevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Levels.
     */
    cursor?: LevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Levels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Levels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Levels.
     */
    distinct?: LevelScalarFieldEnum | LevelScalarFieldEnum[]
  }

  /**
   * Level findMany
   */
  export type LevelFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    /**
     * Filter, which Levels to fetch.
     */
    where?: LevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Levels to fetch.
     */
    orderBy?: LevelOrderByWithRelationInput | LevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Levels.
     */
    cursor?: LevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Levels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Levels.
     */
    skip?: number
    distinct?: LevelScalarFieldEnum | LevelScalarFieldEnum[]
  }

  /**
   * Level create
   */
  export type LevelCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    /**
     * The data needed to create a Level.
     */
    data: XOR<LevelCreateInput, LevelUncheckedCreateInput>
  }

  /**
   * Level createMany
   */
  export type LevelCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Levels.
     */
    data: LevelCreateManyInput | LevelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Level createManyAndReturn
   */
  export type LevelCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * The data used to create many Levels.
     */
    data: LevelCreateManyInput | LevelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Level update
   */
  export type LevelUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    /**
     * The data needed to update a Level.
     */
    data: XOR<LevelUpdateInput, LevelUncheckedUpdateInput>
    /**
     * Choose, which Level to update.
     */
    where: LevelWhereUniqueInput
  }

  /**
   * Level updateMany
   */
  export type LevelUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Levels.
     */
    data: XOR<LevelUpdateManyMutationInput, LevelUncheckedUpdateManyInput>
    /**
     * Filter which Levels to update
     */
    where?: LevelWhereInput
    /**
     * Limit how many Levels to update.
     */
    limit?: number
  }

  /**
   * Level updateManyAndReturn
   */
  export type LevelUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * The data used to update Levels.
     */
    data: XOR<LevelUpdateManyMutationInput, LevelUncheckedUpdateManyInput>
    /**
     * Filter which Levels to update
     */
    where?: LevelWhereInput
    /**
     * Limit how many Levels to update.
     */
    limit?: number
  }

  /**
   * Level upsert
   */
  export type LevelUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    /**
     * The filter to search for the Level to update in case it exists.
     */
    where: LevelWhereUniqueInput
    /**
     * In case the Level found by the `where` argument doesn't exist, create a new Level with this data.
     */
    create: XOR<LevelCreateInput, LevelUncheckedCreateInput>
    /**
     * In case the Level was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LevelUpdateInput, LevelUncheckedUpdateInput>
  }

  /**
   * Level delete
   */
  export type LevelDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    /**
     * Filter which Level to delete.
     */
    where: LevelWhereUniqueInput
  }

  /**
   * Level deleteMany
   */
  export type LevelDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Levels to delete
     */
    where?: LevelWhereInput
    /**
     * Limit how many Levels to delete.
     */
    limit?: number
  }

  /**
   * Level.product
   */
  export type Level$productArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderProduct
     */
    select?: orderProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orderProduct
     */
    omit?: orderProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderProductInclude<ExtArgs> | null
    where?: orderProductWhereInput
    orderBy?: orderProductOrderByWithRelationInput | orderProductOrderByWithRelationInput[]
    cursor?: orderProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderProductScalarFieldEnum | OrderProductScalarFieldEnum[]
  }

  /**
   * Level.professionLevel
   */
  export type Level$professionLevelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the professionLevel
     */
    select?: professionLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the professionLevel
     */
    omit?: professionLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: professionLevelInclude<ExtArgs> | null
    where?: professionLevelWhereInput
    orderBy?: professionLevelOrderByWithRelationInput | professionLevelOrderByWithRelationInput[]
    cursor?: professionLevelWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfessionLevelScalarFieldEnum | ProfessionLevelScalarFieldEnum[]
  }

  /**
   * Level.masterProfession
   */
  export type Level$masterProfessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the masterProfessions
     */
    select?: masterProfessionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the masterProfessions
     */
    omit?: masterProfessionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: masterProfessionsInclude<ExtArgs> | null
    where?: masterProfessionsWhereInput
    orderBy?: masterProfessionsOrderByWithRelationInput | masterProfessionsOrderByWithRelationInput[]
    cursor?: masterProfessionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MasterProfessionsScalarFieldEnum | MasterProfessionsScalarFieldEnum[]
  }

  /**
   * Level without action
   */
  export type LevelDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
  }


  /**
   * Model Comment
   */

  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentAvgAggregateOutputType = {
    id: number | null
    star: number | null
  }

  export type CommentSumAggregateOutputType = {
    id: number | null
    star: number | null
  }

  export type CommentMinAggregateOutputType = {
    id: number | null
    message: string | null
    star: number | null
  }

  export type CommentMaxAggregateOutputType = {
    id: number | null
    message: string | null
    star: number | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    message: number
    star: number
    _all: number
  }


  export type CommentAvgAggregateInputType = {
    id?: true
    star?: true
  }

  export type CommentSumAggregateInputType = {
    id?: true
    star?: true
  }

  export type CommentMinAggregateInputType = {
    id?: true
    message?: true
    star?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    message?: true
    star?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    message?: true
    star?: true
    _all?: true
  }

  export type CommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comment to aggregate.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithAggregationInput | CommentOrderByWithAggregationInput[]
    by: CommentScalarFieldEnum[] | CommentScalarFieldEnum
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _avg?: CommentAvgAggregateInputType
    _sum?: CommentSumAggregateInputType
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }

  export type CommentGroupByOutputType = {
    id: number
    message: string
    star: number
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    message?: boolean
    star?: boolean
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    message?: boolean
    star?: boolean
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    message?: boolean
    star?: boolean
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectScalar = {
    id?: boolean
    message?: boolean
    star?: boolean
  }

  export type CommentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "message" | "star", ExtArgs["result"]["comment"]>

  export type $CommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comment"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      message: string
      star: number
    }, ExtArgs["result"]["comment"]>
    composites: {}
  }

  type CommentGetPayload<S extends boolean | null | undefined | CommentDefaultArgs> = $Result.GetResult<Prisma.$CommentPayload, S>

  type CommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CommentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CommentCountAggregateInputType | true
    }

  export interface CommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comment'], meta: { name: 'Comment' } }
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommentFindUniqueArgs>(args: SelectSubset<T, CommentFindUniqueArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Comment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs>(args: SelectSubset<T, CommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommentFindFirstArgs>(args?: SelectSubset<T, CommentFindFirstArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs>(args?: SelectSubset<T, CommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommentFindManyArgs>(args?: SelectSubset<T, CommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
     */
    create<T extends CommentCreateArgs>(args: SelectSubset<T, CommentCreateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Comments.
     * @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommentCreateManyArgs>(args?: SelectSubset<T, CommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Comments and returns the data saved in the database.
     * @param {CommentCreateManyAndReturnArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Comments and only return the `id`
     * const commentWithIdOnly = await prisma.comment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CommentCreateManyAndReturnArgs>(args?: SelectSubset<T, CommentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
     */
    delete<T extends CommentDeleteArgs>(args: SelectSubset<T, CommentDeleteArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommentUpdateArgs>(args: SelectSubset<T, CommentUpdateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommentDeleteManyArgs>(args?: SelectSubset<T, CommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommentUpdateManyArgs>(args: SelectSubset<T, CommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments and returns the data updated in the database.
     * @param {CommentUpdateManyAndReturnArgs} args - Arguments to update many Comments.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Comments and only return the `id`
     * const commentWithIdOnly = await prisma.comment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CommentUpdateManyAndReturnArgs>(args: SelectSubset<T, CommentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
     */
    upsert<T extends CommentUpsertArgs>(args: SelectSubset<T, CommentUpsertArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comment model
   */
  readonly fields: CommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Comment model
   */
  interface CommentFieldRefs {
    readonly id: FieldRef<"Comment", 'Int'>
    readonly message: FieldRef<"Comment", 'String'>
    readonly star: FieldRef<"Comment", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * Comment findUnique
   */
  export type CommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findFirst
   */
  export type CommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findMany
   */
  export type CommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment create
   */
  export type CommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * The data needed to create a Comment.
     */
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }

  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Comment createManyAndReturn
   */
  export type CommentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Comment update
   */
  export type CommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * The data needed to update a Comment.
     */
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to update.
     */
    limit?: number
  }

  /**
   * Comment updateManyAndReturn
   */
  export type CommentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to update.
     */
    limit?: number
  }

  /**
   * Comment upsert
   */
  export type CommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * The filter to search for the Comment to update in case it exists.
     */
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     */
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }

  /**
   * Comment delete
   */
  export type CommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Filter which Comment to delete.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to delete.
     */
    limit?: number
  }

  /**
   * Comment without action
   */
  export type CommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
  }


  /**
   * Model Brand
   */

  export type AggregateBrand = {
    _count: BrandCountAggregateOutputType | null
    _avg: BrandAvgAggregateOutputType | null
    _sum: BrandSumAggregateOutputType | null
    _min: BrandMinAggregateOutputType | null
    _max: BrandMaxAggregateOutputType | null
  }

  export type BrandAvgAggregateOutputType = {
    id: number | null
  }

  export type BrandSumAggregateOutputType = {
    id: number | null
  }

  export type BrandMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type BrandMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type BrandCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type BrandAvgAggregateInputType = {
    id?: true
  }

  export type BrandSumAggregateInputType = {
    id?: true
  }

  export type BrandMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type BrandMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type BrandCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type BrandAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Brand to aggregate.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Brands
    **/
    _count?: true | BrandCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BrandAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BrandSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BrandMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BrandMaxAggregateInputType
  }

  export type GetBrandAggregateType<T extends BrandAggregateArgs> = {
        [P in keyof T & keyof AggregateBrand]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBrand[P]>
      : GetScalarType<T[P], AggregateBrand[P]>
  }




  export type BrandGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BrandWhereInput
    orderBy?: BrandOrderByWithAggregationInput | BrandOrderByWithAggregationInput[]
    by: BrandScalarFieldEnum[] | BrandScalarFieldEnum
    having?: BrandScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BrandCountAggregateInputType | true
    _avg?: BrandAvgAggregateInputType
    _sum?: BrandSumAggregateInputType
    _min?: BrandMinAggregateInputType
    _max?: BrandMaxAggregateInputType
  }

  export type BrandGroupByOutputType = {
    id: number
    name: string
    _count: BrandCountAggregateOutputType | null
    _avg: BrandAvgAggregateOutputType | null
    _sum: BrandSumAggregateOutputType | null
    _min: BrandMinAggregateOutputType | null
    _max: BrandMaxAggregateOutputType | null
  }

  type GetBrandGroupByPayload<T extends BrandGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BrandGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BrandGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BrandGroupByOutputType[P]>
            : GetScalarType<T[P], BrandGroupByOutputType[P]>
        }
      >
    >


  export type BrandSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    tools?: boolean | Brand$toolsArgs<ExtArgs>
    _count?: boolean | BrandCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["brand"]>

  export type BrandSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["brand"]>

  export type BrandSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["brand"]>

  export type BrandSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type BrandOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["brand"]>
  export type BrandInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tools?: boolean | Brand$toolsArgs<ExtArgs>
    _count?: boolean | BrandCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BrandIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type BrandIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $BrandPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Brand"
    objects: {
      tools: Prisma.$ToolsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["brand"]>
    composites: {}
  }

  type BrandGetPayload<S extends boolean | null | undefined | BrandDefaultArgs> = $Result.GetResult<Prisma.$BrandPayload, S>

  type BrandCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BrandFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BrandCountAggregateInputType | true
    }

  export interface BrandDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Brand'], meta: { name: 'Brand' } }
    /**
     * Find zero or one Brand that matches the filter.
     * @param {BrandFindUniqueArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BrandFindUniqueArgs>(args: SelectSubset<T, BrandFindUniqueArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Brand that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BrandFindUniqueOrThrowArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BrandFindUniqueOrThrowArgs>(args: SelectSubset<T, BrandFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Brand that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandFindFirstArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BrandFindFirstArgs>(args?: SelectSubset<T, BrandFindFirstArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Brand that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandFindFirstOrThrowArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BrandFindFirstOrThrowArgs>(args?: SelectSubset<T, BrandFindFirstOrThrowArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Brands that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Brands
     * const brands = await prisma.brand.findMany()
     * 
     * // Get first 10 Brands
     * const brands = await prisma.brand.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const brandWithIdOnly = await prisma.brand.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BrandFindManyArgs>(args?: SelectSubset<T, BrandFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Brand.
     * @param {BrandCreateArgs} args - Arguments to create a Brand.
     * @example
     * // Create one Brand
     * const Brand = await prisma.brand.create({
     *   data: {
     *     // ... data to create a Brand
     *   }
     * })
     * 
     */
    create<T extends BrandCreateArgs>(args: SelectSubset<T, BrandCreateArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Brands.
     * @param {BrandCreateManyArgs} args - Arguments to create many Brands.
     * @example
     * // Create many Brands
     * const brand = await prisma.brand.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BrandCreateManyArgs>(args?: SelectSubset<T, BrandCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Brands and returns the data saved in the database.
     * @param {BrandCreateManyAndReturnArgs} args - Arguments to create many Brands.
     * @example
     * // Create many Brands
     * const brand = await prisma.brand.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Brands and only return the `id`
     * const brandWithIdOnly = await prisma.brand.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BrandCreateManyAndReturnArgs>(args?: SelectSubset<T, BrandCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Brand.
     * @param {BrandDeleteArgs} args - Arguments to delete one Brand.
     * @example
     * // Delete one Brand
     * const Brand = await prisma.brand.delete({
     *   where: {
     *     // ... filter to delete one Brand
     *   }
     * })
     * 
     */
    delete<T extends BrandDeleteArgs>(args: SelectSubset<T, BrandDeleteArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Brand.
     * @param {BrandUpdateArgs} args - Arguments to update one Brand.
     * @example
     * // Update one Brand
     * const brand = await prisma.brand.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BrandUpdateArgs>(args: SelectSubset<T, BrandUpdateArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Brands.
     * @param {BrandDeleteManyArgs} args - Arguments to filter Brands to delete.
     * @example
     * // Delete a few Brands
     * const { count } = await prisma.brand.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BrandDeleteManyArgs>(args?: SelectSubset<T, BrandDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Brands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Brands
     * const brand = await prisma.brand.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BrandUpdateManyArgs>(args: SelectSubset<T, BrandUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Brands and returns the data updated in the database.
     * @param {BrandUpdateManyAndReturnArgs} args - Arguments to update many Brands.
     * @example
     * // Update many Brands
     * const brand = await prisma.brand.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Brands and only return the `id`
     * const brandWithIdOnly = await prisma.brand.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BrandUpdateManyAndReturnArgs>(args: SelectSubset<T, BrandUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Brand.
     * @param {BrandUpsertArgs} args - Arguments to update or create a Brand.
     * @example
     * // Update or create a Brand
     * const brand = await prisma.brand.upsert({
     *   create: {
     *     // ... data to create a Brand
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Brand we want to update
     *   }
     * })
     */
    upsert<T extends BrandUpsertArgs>(args: SelectSubset<T, BrandUpsertArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Brands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandCountArgs} args - Arguments to filter Brands to count.
     * @example
     * // Count the number of Brands
     * const count = await prisma.brand.count({
     *   where: {
     *     // ... the filter for the Brands we want to count
     *   }
     * })
    **/
    count<T extends BrandCountArgs>(
      args?: Subset<T, BrandCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BrandCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Brand.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BrandAggregateArgs>(args: Subset<T, BrandAggregateArgs>): Prisma.PrismaPromise<GetBrandAggregateType<T>>

    /**
     * Group by Brand.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BrandGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BrandGroupByArgs['orderBy'] }
        : { orderBy?: BrandGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BrandGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBrandGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Brand model
   */
  readonly fields: BrandFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Brand.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BrandClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tools<T extends Brand$toolsArgs<ExtArgs> = {}>(args?: Subset<T, Brand$toolsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ToolsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Brand model
   */
  interface BrandFieldRefs {
    readonly id: FieldRef<"Brand", 'Int'>
    readonly name: FieldRef<"Brand", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Brand findUnique
   */
  export type BrandFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand findUniqueOrThrow
   */
  export type BrandFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand findFirst
   */
  export type BrandFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Brands.
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Brands.
     */
    distinct?: BrandScalarFieldEnum | BrandScalarFieldEnum[]
  }

  /**
   * Brand findFirstOrThrow
   */
  export type BrandFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Brands.
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Brands.
     */
    distinct?: BrandScalarFieldEnum | BrandScalarFieldEnum[]
  }

  /**
   * Brand findMany
   */
  export type BrandFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brands to fetch.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Brands.
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    distinct?: BrandScalarFieldEnum | BrandScalarFieldEnum[]
  }

  /**
   * Brand create
   */
  export type BrandCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * The data needed to create a Brand.
     */
    data: XOR<BrandCreateInput, BrandUncheckedCreateInput>
  }

  /**
   * Brand createMany
   */
  export type BrandCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Brands.
     */
    data: BrandCreateManyInput | BrandCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Brand createManyAndReturn
   */
  export type BrandCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * The data used to create many Brands.
     */
    data: BrandCreateManyInput | BrandCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Brand update
   */
  export type BrandUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * The data needed to update a Brand.
     */
    data: XOR<BrandUpdateInput, BrandUncheckedUpdateInput>
    /**
     * Choose, which Brand to update.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand updateMany
   */
  export type BrandUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Brands.
     */
    data: XOR<BrandUpdateManyMutationInput, BrandUncheckedUpdateManyInput>
    /**
     * Filter which Brands to update
     */
    where?: BrandWhereInput
    /**
     * Limit how many Brands to update.
     */
    limit?: number
  }

  /**
   * Brand updateManyAndReturn
   */
  export type BrandUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * The data used to update Brands.
     */
    data: XOR<BrandUpdateManyMutationInput, BrandUncheckedUpdateManyInput>
    /**
     * Filter which Brands to update
     */
    where?: BrandWhereInput
    /**
     * Limit how many Brands to update.
     */
    limit?: number
  }

  /**
   * Brand upsert
   */
  export type BrandUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * The filter to search for the Brand to update in case it exists.
     */
    where: BrandWhereUniqueInput
    /**
     * In case the Brand found by the `where` argument doesn't exist, create a new Brand with this data.
     */
    create: XOR<BrandCreateInput, BrandUncheckedCreateInput>
    /**
     * In case the Brand was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BrandUpdateInput, BrandUncheckedUpdateInput>
  }

  /**
   * Brand delete
   */
  export type BrandDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter which Brand to delete.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand deleteMany
   */
  export type BrandDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Brands to delete
     */
    where?: BrandWhereInput
    /**
     * Limit how many Brands to delete.
     */
    limit?: number
  }

  /**
   * Brand.tools
   */
  export type Brand$toolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tools
     */
    select?: ToolsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tools
     */
    omit?: ToolsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolsInclude<ExtArgs> | null
    where?: ToolsWhereInput
    orderBy?: ToolsOrderByWithRelationInput | ToolsOrderByWithRelationInput[]
    cursor?: ToolsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ToolsScalarFieldEnum | ToolsScalarFieldEnum[]
  }

  /**
   * Brand without action
   */
  export type BrandDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
  }


  /**
   * Model Power
   */

  export type AggregatePower = {
    _count: PowerCountAggregateOutputType | null
    _avg: PowerAvgAggregateOutputType | null
    _sum: PowerSumAggregateOutputType | null
    _min: PowerMinAggregateOutputType | null
    _max: PowerMaxAggregateOutputType | null
  }

  export type PowerAvgAggregateOutputType = {
    id: number | null
  }

  export type PowerSumAggregateOutputType = {
    id: number | null
  }

  export type PowerMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type PowerMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type PowerCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type PowerAvgAggregateInputType = {
    id?: true
  }

  export type PowerSumAggregateInputType = {
    id?: true
  }

  export type PowerMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type PowerMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type PowerCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type PowerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Power to aggregate.
     */
    where?: PowerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Powers to fetch.
     */
    orderBy?: PowerOrderByWithRelationInput | PowerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PowerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Powers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Powers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Powers
    **/
    _count?: true | PowerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PowerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PowerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PowerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PowerMaxAggregateInputType
  }

  export type GetPowerAggregateType<T extends PowerAggregateArgs> = {
        [P in keyof T & keyof AggregatePower]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePower[P]>
      : GetScalarType<T[P], AggregatePower[P]>
  }




  export type PowerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PowerWhereInput
    orderBy?: PowerOrderByWithAggregationInput | PowerOrderByWithAggregationInput[]
    by: PowerScalarFieldEnum[] | PowerScalarFieldEnum
    having?: PowerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PowerCountAggregateInputType | true
    _avg?: PowerAvgAggregateInputType
    _sum?: PowerSumAggregateInputType
    _min?: PowerMinAggregateInputType
    _max?: PowerMaxAggregateInputType
  }

  export type PowerGroupByOutputType = {
    id: number
    name: string
    _count: PowerCountAggregateOutputType | null
    _avg: PowerAvgAggregateOutputType | null
    _sum: PowerSumAggregateOutputType | null
    _min: PowerMinAggregateOutputType | null
    _max: PowerMaxAggregateOutputType | null
  }

  type GetPowerGroupByPayload<T extends PowerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PowerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PowerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PowerGroupByOutputType[P]>
            : GetScalarType<T[P], PowerGroupByOutputType[P]>
        }
      >
    >


  export type PowerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    tools?: boolean | Power$toolsArgs<ExtArgs>
    _count?: boolean | PowerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["power"]>

  export type PowerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["power"]>

  export type PowerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["power"]>

  export type PowerSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type PowerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["power"]>
  export type PowerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tools?: boolean | Power$toolsArgs<ExtArgs>
    _count?: boolean | PowerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PowerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PowerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PowerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Power"
    objects: {
      tools: Prisma.$ToolsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["power"]>
    composites: {}
  }

  type PowerGetPayload<S extends boolean | null | undefined | PowerDefaultArgs> = $Result.GetResult<Prisma.$PowerPayload, S>

  type PowerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PowerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PowerCountAggregateInputType | true
    }

  export interface PowerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Power'], meta: { name: 'Power' } }
    /**
     * Find zero or one Power that matches the filter.
     * @param {PowerFindUniqueArgs} args - Arguments to find a Power
     * @example
     * // Get one Power
     * const power = await prisma.power.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PowerFindUniqueArgs>(args: SelectSubset<T, PowerFindUniqueArgs<ExtArgs>>): Prisma__PowerClient<$Result.GetResult<Prisma.$PowerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Power that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PowerFindUniqueOrThrowArgs} args - Arguments to find a Power
     * @example
     * // Get one Power
     * const power = await prisma.power.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PowerFindUniqueOrThrowArgs>(args: SelectSubset<T, PowerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PowerClient<$Result.GetResult<Prisma.$PowerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Power that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PowerFindFirstArgs} args - Arguments to find a Power
     * @example
     * // Get one Power
     * const power = await prisma.power.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PowerFindFirstArgs>(args?: SelectSubset<T, PowerFindFirstArgs<ExtArgs>>): Prisma__PowerClient<$Result.GetResult<Prisma.$PowerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Power that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PowerFindFirstOrThrowArgs} args - Arguments to find a Power
     * @example
     * // Get one Power
     * const power = await prisma.power.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PowerFindFirstOrThrowArgs>(args?: SelectSubset<T, PowerFindFirstOrThrowArgs<ExtArgs>>): Prisma__PowerClient<$Result.GetResult<Prisma.$PowerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Powers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PowerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Powers
     * const powers = await prisma.power.findMany()
     * 
     * // Get first 10 Powers
     * const powers = await prisma.power.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const powerWithIdOnly = await prisma.power.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PowerFindManyArgs>(args?: SelectSubset<T, PowerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PowerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Power.
     * @param {PowerCreateArgs} args - Arguments to create a Power.
     * @example
     * // Create one Power
     * const Power = await prisma.power.create({
     *   data: {
     *     // ... data to create a Power
     *   }
     * })
     * 
     */
    create<T extends PowerCreateArgs>(args: SelectSubset<T, PowerCreateArgs<ExtArgs>>): Prisma__PowerClient<$Result.GetResult<Prisma.$PowerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Powers.
     * @param {PowerCreateManyArgs} args - Arguments to create many Powers.
     * @example
     * // Create many Powers
     * const power = await prisma.power.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PowerCreateManyArgs>(args?: SelectSubset<T, PowerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Powers and returns the data saved in the database.
     * @param {PowerCreateManyAndReturnArgs} args - Arguments to create many Powers.
     * @example
     * // Create many Powers
     * const power = await prisma.power.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Powers and only return the `id`
     * const powerWithIdOnly = await prisma.power.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PowerCreateManyAndReturnArgs>(args?: SelectSubset<T, PowerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PowerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Power.
     * @param {PowerDeleteArgs} args - Arguments to delete one Power.
     * @example
     * // Delete one Power
     * const Power = await prisma.power.delete({
     *   where: {
     *     // ... filter to delete one Power
     *   }
     * })
     * 
     */
    delete<T extends PowerDeleteArgs>(args: SelectSubset<T, PowerDeleteArgs<ExtArgs>>): Prisma__PowerClient<$Result.GetResult<Prisma.$PowerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Power.
     * @param {PowerUpdateArgs} args - Arguments to update one Power.
     * @example
     * // Update one Power
     * const power = await prisma.power.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PowerUpdateArgs>(args: SelectSubset<T, PowerUpdateArgs<ExtArgs>>): Prisma__PowerClient<$Result.GetResult<Prisma.$PowerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Powers.
     * @param {PowerDeleteManyArgs} args - Arguments to filter Powers to delete.
     * @example
     * // Delete a few Powers
     * const { count } = await prisma.power.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PowerDeleteManyArgs>(args?: SelectSubset<T, PowerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Powers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PowerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Powers
     * const power = await prisma.power.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PowerUpdateManyArgs>(args: SelectSubset<T, PowerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Powers and returns the data updated in the database.
     * @param {PowerUpdateManyAndReturnArgs} args - Arguments to update many Powers.
     * @example
     * // Update many Powers
     * const power = await prisma.power.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Powers and only return the `id`
     * const powerWithIdOnly = await prisma.power.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PowerUpdateManyAndReturnArgs>(args: SelectSubset<T, PowerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PowerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Power.
     * @param {PowerUpsertArgs} args - Arguments to update or create a Power.
     * @example
     * // Update or create a Power
     * const power = await prisma.power.upsert({
     *   create: {
     *     // ... data to create a Power
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Power we want to update
     *   }
     * })
     */
    upsert<T extends PowerUpsertArgs>(args: SelectSubset<T, PowerUpsertArgs<ExtArgs>>): Prisma__PowerClient<$Result.GetResult<Prisma.$PowerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Powers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PowerCountArgs} args - Arguments to filter Powers to count.
     * @example
     * // Count the number of Powers
     * const count = await prisma.power.count({
     *   where: {
     *     // ... the filter for the Powers we want to count
     *   }
     * })
    **/
    count<T extends PowerCountArgs>(
      args?: Subset<T, PowerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PowerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Power.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PowerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PowerAggregateArgs>(args: Subset<T, PowerAggregateArgs>): Prisma.PrismaPromise<GetPowerAggregateType<T>>

    /**
     * Group by Power.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PowerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PowerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PowerGroupByArgs['orderBy'] }
        : { orderBy?: PowerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PowerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPowerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Power model
   */
  readonly fields: PowerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Power.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PowerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tools<T extends Power$toolsArgs<ExtArgs> = {}>(args?: Subset<T, Power$toolsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ToolsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Power model
   */
  interface PowerFieldRefs {
    readonly id: FieldRef<"Power", 'Int'>
    readonly name: FieldRef<"Power", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Power findUnique
   */
  export type PowerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Power
     */
    select?: PowerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Power
     */
    omit?: PowerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PowerInclude<ExtArgs> | null
    /**
     * Filter, which Power to fetch.
     */
    where: PowerWhereUniqueInput
  }

  /**
   * Power findUniqueOrThrow
   */
  export type PowerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Power
     */
    select?: PowerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Power
     */
    omit?: PowerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PowerInclude<ExtArgs> | null
    /**
     * Filter, which Power to fetch.
     */
    where: PowerWhereUniqueInput
  }

  /**
   * Power findFirst
   */
  export type PowerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Power
     */
    select?: PowerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Power
     */
    omit?: PowerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PowerInclude<ExtArgs> | null
    /**
     * Filter, which Power to fetch.
     */
    where?: PowerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Powers to fetch.
     */
    orderBy?: PowerOrderByWithRelationInput | PowerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Powers.
     */
    cursor?: PowerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Powers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Powers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Powers.
     */
    distinct?: PowerScalarFieldEnum | PowerScalarFieldEnum[]
  }

  /**
   * Power findFirstOrThrow
   */
  export type PowerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Power
     */
    select?: PowerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Power
     */
    omit?: PowerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PowerInclude<ExtArgs> | null
    /**
     * Filter, which Power to fetch.
     */
    where?: PowerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Powers to fetch.
     */
    orderBy?: PowerOrderByWithRelationInput | PowerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Powers.
     */
    cursor?: PowerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Powers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Powers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Powers.
     */
    distinct?: PowerScalarFieldEnum | PowerScalarFieldEnum[]
  }

  /**
   * Power findMany
   */
  export type PowerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Power
     */
    select?: PowerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Power
     */
    omit?: PowerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PowerInclude<ExtArgs> | null
    /**
     * Filter, which Powers to fetch.
     */
    where?: PowerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Powers to fetch.
     */
    orderBy?: PowerOrderByWithRelationInput | PowerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Powers.
     */
    cursor?: PowerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Powers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Powers.
     */
    skip?: number
    distinct?: PowerScalarFieldEnum | PowerScalarFieldEnum[]
  }

  /**
   * Power create
   */
  export type PowerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Power
     */
    select?: PowerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Power
     */
    omit?: PowerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PowerInclude<ExtArgs> | null
    /**
     * The data needed to create a Power.
     */
    data: XOR<PowerCreateInput, PowerUncheckedCreateInput>
  }

  /**
   * Power createMany
   */
  export type PowerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Powers.
     */
    data: PowerCreateManyInput | PowerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Power createManyAndReturn
   */
  export type PowerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Power
     */
    select?: PowerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Power
     */
    omit?: PowerOmit<ExtArgs> | null
    /**
     * The data used to create many Powers.
     */
    data: PowerCreateManyInput | PowerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Power update
   */
  export type PowerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Power
     */
    select?: PowerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Power
     */
    omit?: PowerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PowerInclude<ExtArgs> | null
    /**
     * The data needed to update a Power.
     */
    data: XOR<PowerUpdateInput, PowerUncheckedUpdateInput>
    /**
     * Choose, which Power to update.
     */
    where: PowerWhereUniqueInput
  }

  /**
   * Power updateMany
   */
  export type PowerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Powers.
     */
    data: XOR<PowerUpdateManyMutationInput, PowerUncheckedUpdateManyInput>
    /**
     * Filter which Powers to update
     */
    where?: PowerWhereInput
    /**
     * Limit how many Powers to update.
     */
    limit?: number
  }

  /**
   * Power updateManyAndReturn
   */
  export type PowerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Power
     */
    select?: PowerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Power
     */
    omit?: PowerOmit<ExtArgs> | null
    /**
     * The data used to update Powers.
     */
    data: XOR<PowerUpdateManyMutationInput, PowerUncheckedUpdateManyInput>
    /**
     * Filter which Powers to update
     */
    where?: PowerWhereInput
    /**
     * Limit how many Powers to update.
     */
    limit?: number
  }

  /**
   * Power upsert
   */
  export type PowerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Power
     */
    select?: PowerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Power
     */
    omit?: PowerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PowerInclude<ExtArgs> | null
    /**
     * The filter to search for the Power to update in case it exists.
     */
    where: PowerWhereUniqueInput
    /**
     * In case the Power found by the `where` argument doesn't exist, create a new Power with this data.
     */
    create: XOR<PowerCreateInput, PowerUncheckedCreateInput>
    /**
     * In case the Power was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PowerUpdateInput, PowerUncheckedUpdateInput>
  }

  /**
   * Power delete
   */
  export type PowerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Power
     */
    select?: PowerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Power
     */
    omit?: PowerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PowerInclude<ExtArgs> | null
    /**
     * Filter which Power to delete.
     */
    where: PowerWhereUniqueInput
  }

  /**
   * Power deleteMany
   */
  export type PowerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Powers to delete
     */
    where?: PowerWhereInput
    /**
     * Limit how many Powers to delete.
     */
    limit?: number
  }

  /**
   * Power.tools
   */
  export type Power$toolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tools
     */
    select?: ToolsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tools
     */
    omit?: ToolsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolsInclude<ExtArgs> | null
    where?: ToolsWhereInput
    orderBy?: ToolsOrderByWithRelationInput | ToolsOrderByWithRelationInput[]
    cursor?: ToolsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ToolsScalarFieldEnum | ToolsScalarFieldEnum[]
  }

  /**
   * Power without action
   */
  export type PowerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Power
     */
    select?: PowerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Power
     */
    omit?: PowerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PowerInclude<ExtArgs> | null
  }


  /**
   * Model Size
   */

  export type AggregateSize = {
    _count: SizeCountAggregateOutputType | null
    _avg: SizeAvgAggregateOutputType | null
    _sum: SizeSumAggregateOutputType | null
    _min: SizeMinAggregateOutputType | null
    _max: SizeMaxAggregateOutputType | null
  }

  export type SizeAvgAggregateOutputType = {
    id: number | null
  }

  export type SizeSumAggregateOutputType = {
    id: number | null
  }

  export type SizeMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type SizeMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type SizeCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type SizeAvgAggregateInputType = {
    id?: true
  }

  export type SizeSumAggregateInputType = {
    id?: true
  }

  export type SizeMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type SizeMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type SizeCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type SizeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Size to aggregate.
     */
    where?: SizeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sizes to fetch.
     */
    orderBy?: SizeOrderByWithRelationInput | SizeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SizeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sizes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sizes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sizes
    **/
    _count?: true | SizeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SizeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SizeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SizeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SizeMaxAggregateInputType
  }

  export type GetSizeAggregateType<T extends SizeAggregateArgs> = {
        [P in keyof T & keyof AggregateSize]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSize[P]>
      : GetScalarType<T[P], AggregateSize[P]>
  }




  export type SizeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SizeWhereInput
    orderBy?: SizeOrderByWithAggregationInput | SizeOrderByWithAggregationInput[]
    by: SizeScalarFieldEnum[] | SizeScalarFieldEnum
    having?: SizeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SizeCountAggregateInputType | true
    _avg?: SizeAvgAggregateInputType
    _sum?: SizeSumAggregateInputType
    _min?: SizeMinAggregateInputType
    _max?: SizeMaxAggregateInputType
  }

  export type SizeGroupByOutputType = {
    id: number
    name: string
    _count: SizeCountAggregateOutputType | null
    _avg: SizeAvgAggregateOutputType | null
    _sum: SizeSumAggregateOutputType | null
    _min: SizeMinAggregateOutputType | null
    _max: SizeMaxAggregateOutputType | null
  }

  type GetSizeGroupByPayload<T extends SizeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SizeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SizeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SizeGroupByOutputType[P]>
            : GetScalarType<T[P], SizeGroupByOutputType[P]>
        }
      >
    >


  export type SizeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    tools?: boolean | Size$toolsArgs<ExtArgs>
    _count?: boolean | SizeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["size"]>

  export type SizeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["size"]>

  export type SizeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["size"]>

  export type SizeSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type SizeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["size"]>
  export type SizeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tools?: boolean | Size$toolsArgs<ExtArgs>
    _count?: boolean | SizeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SizeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type SizeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SizePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Size"
    objects: {
      tools: Prisma.$ToolsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["size"]>
    composites: {}
  }

  type SizeGetPayload<S extends boolean | null | undefined | SizeDefaultArgs> = $Result.GetResult<Prisma.$SizePayload, S>

  type SizeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SizeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SizeCountAggregateInputType | true
    }

  export interface SizeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Size'], meta: { name: 'Size' } }
    /**
     * Find zero or one Size that matches the filter.
     * @param {SizeFindUniqueArgs} args - Arguments to find a Size
     * @example
     * // Get one Size
     * const size = await prisma.size.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SizeFindUniqueArgs>(args: SelectSubset<T, SizeFindUniqueArgs<ExtArgs>>): Prisma__SizeClient<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Size that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SizeFindUniqueOrThrowArgs} args - Arguments to find a Size
     * @example
     * // Get one Size
     * const size = await prisma.size.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SizeFindUniqueOrThrowArgs>(args: SelectSubset<T, SizeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SizeClient<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Size that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeFindFirstArgs} args - Arguments to find a Size
     * @example
     * // Get one Size
     * const size = await prisma.size.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SizeFindFirstArgs>(args?: SelectSubset<T, SizeFindFirstArgs<ExtArgs>>): Prisma__SizeClient<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Size that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeFindFirstOrThrowArgs} args - Arguments to find a Size
     * @example
     * // Get one Size
     * const size = await prisma.size.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SizeFindFirstOrThrowArgs>(args?: SelectSubset<T, SizeFindFirstOrThrowArgs<ExtArgs>>): Prisma__SizeClient<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sizes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sizes
     * const sizes = await prisma.size.findMany()
     * 
     * // Get first 10 Sizes
     * const sizes = await prisma.size.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sizeWithIdOnly = await prisma.size.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SizeFindManyArgs>(args?: SelectSubset<T, SizeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Size.
     * @param {SizeCreateArgs} args - Arguments to create a Size.
     * @example
     * // Create one Size
     * const Size = await prisma.size.create({
     *   data: {
     *     // ... data to create a Size
     *   }
     * })
     * 
     */
    create<T extends SizeCreateArgs>(args: SelectSubset<T, SizeCreateArgs<ExtArgs>>): Prisma__SizeClient<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sizes.
     * @param {SizeCreateManyArgs} args - Arguments to create many Sizes.
     * @example
     * // Create many Sizes
     * const size = await prisma.size.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SizeCreateManyArgs>(args?: SelectSubset<T, SizeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sizes and returns the data saved in the database.
     * @param {SizeCreateManyAndReturnArgs} args - Arguments to create many Sizes.
     * @example
     * // Create many Sizes
     * const size = await prisma.size.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sizes and only return the `id`
     * const sizeWithIdOnly = await prisma.size.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SizeCreateManyAndReturnArgs>(args?: SelectSubset<T, SizeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Size.
     * @param {SizeDeleteArgs} args - Arguments to delete one Size.
     * @example
     * // Delete one Size
     * const Size = await prisma.size.delete({
     *   where: {
     *     // ... filter to delete one Size
     *   }
     * })
     * 
     */
    delete<T extends SizeDeleteArgs>(args: SelectSubset<T, SizeDeleteArgs<ExtArgs>>): Prisma__SizeClient<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Size.
     * @param {SizeUpdateArgs} args - Arguments to update one Size.
     * @example
     * // Update one Size
     * const size = await prisma.size.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SizeUpdateArgs>(args: SelectSubset<T, SizeUpdateArgs<ExtArgs>>): Prisma__SizeClient<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sizes.
     * @param {SizeDeleteManyArgs} args - Arguments to filter Sizes to delete.
     * @example
     * // Delete a few Sizes
     * const { count } = await prisma.size.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SizeDeleteManyArgs>(args?: SelectSubset<T, SizeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sizes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sizes
     * const size = await prisma.size.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SizeUpdateManyArgs>(args: SelectSubset<T, SizeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sizes and returns the data updated in the database.
     * @param {SizeUpdateManyAndReturnArgs} args - Arguments to update many Sizes.
     * @example
     * // Update many Sizes
     * const size = await prisma.size.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sizes and only return the `id`
     * const sizeWithIdOnly = await prisma.size.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SizeUpdateManyAndReturnArgs>(args: SelectSubset<T, SizeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Size.
     * @param {SizeUpsertArgs} args - Arguments to update or create a Size.
     * @example
     * // Update or create a Size
     * const size = await prisma.size.upsert({
     *   create: {
     *     // ... data to create a Size
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Size we want to update
     *   }
     * })
     */
    upsert<T extends SizeUpsertArgs>(args: SelectSubset<T, SizeUpsertArgs<ExtArgs>>): Prisma__SizeClient<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sizes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeCountArgs} args - Arguments to filter Sizes to count.
     * @example
     * // Count the number of Sizes
     * const count = await prisma.size.count({
     *   where: {
     *     // ... the filter for the Sizes we want to count
     *   }
     * })
    **/
    count<T extends SizeCountArgs>(
      args?: Subset<T, SizeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SizeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Size.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SizeAggregateArgs>(args: Subset<T, SizeAggregateArgs>): Prisma.PrismaPromise<GetSizeAggregateType<T>>

    /**
     * Group by Size.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SizeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SizeGroupByArgs['orderBy'] }
        : { orderBy?: SizeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SizeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSizeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Size model
   */
  readonly fields: SizeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Size.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SizeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tools<T extends Size$toolsArgs<ExtArgs> = {}>(args?: Subset<T, Size$toolsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ToolsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Size model
   */
  interface SizeFieldRefs {
    readonly id: FieldRef<"Size", 'Int'>
    readonly name: FieldRef<"Size", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Size findUnique
   */
  export type SizeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    /**
     * Filter, which Size to fetch.
     */
    where: SizeWhereUniqueInput
  }

  /**
   * Size findUniqueOrThrow
   */
  export type SizeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    /**
     * Filter, which Size to fetch.
     */
    where: SizeWhereUniqueInput
  }

  /**
   * Size findFirst
   */
  export type SizeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    /**
     * Filter, which Size to fetch.
     */
    where?: SizeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sizes to fetch.
     */
    orderBy?: SizeOrderByWithRelationInput | SizeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sizes.
     */
    cursor?: SizeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sizes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sizes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sizes.
     */
    distinct?: SizeScalarFieldEnum | SizeScalarFieldEnum[]
  }

  /**
   * Size findFirstOrThrow
   */
  export type SizeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    /**
     * Filter, which Size to fetch.
     */
    where?: SizeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sizes to fetch.
     */
    orderBy?: SizeOrderByWithRelationInput | SizeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sizes.
     */
    cursor?: SizeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sizes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sizes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sizes.
     */
    distinct?: SizeScalarFieldEnum | SizeScalarFieldEnum[]
  }

  /**
   * Size findMany
   */
  export type SizeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    /**
     * Filter, which Sizes to fetch.
     */
    where?: SizeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sizes to fetch.
     */
    orderBy?: SizeOrderByWithRelationInput | SizeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sizes.
     */
    cursor?: SizeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sizes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sizes.
     */
    skip?: number
    distinct?: SizeScalarFieldEnum | SizeScalarFieldEnum[]
  }

  /**
   * Size create
   */
  export type SizeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    /**
     * The data needed to create a Size.
     */
    data: XOR<SizeCreateInput, SizeUncheckedCreateInput>
  }

  /**
   * Size createMany
   */
  export type SizeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sizes.
     */
    data: SizeCreateManyInput | SizeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Size createManyAndReturn
   */
  export type SizeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * The data used to create many Sizes.
     */
    data: SizeCreateManyInput | SizeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Size update
   */
  export type SizeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    /**
     * The data needed to update a Size.
     */
    data: XOR<SizeUpdateInput, SizeUncheckedUpdateInput>
    /**
     * Choose, which Size to update.
     */
    where: SizeWhereUniqueInput
  }

  /**
   * Size updateMany
   */
  export type SizeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sizes.
     */
    data: XOR<SizeUpdateManyMutationInput, SizeUncheckedUpdateManyInput>
    /**
     * Filter which Sizes to update
     */
    where?: SizeWhereInput
    /**
     * Limit how many Sizes to update.
     */
    limit?: number
  }

  /**
   * Size updateManyAndReturn
   */
  export type SizeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * The data used to update Sizes.
     */
    data: XOR<SizeUpdateManyMutationInput, SizeUncheckedUpdateManyInput>
    /**
     * Filter which Sizes to update
     */
    where?: SizeWhereInput
    /**
     * Limit how many Sizes to update.
     */
    limit?: number
  }

  /**
   * Size upsert
   */
  export type SizeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    /**
     * The filter to search for the Size to update in case it exists.
     */
    where: SizeWhereUniqueInput
    /**
     * In case the Size found by the `where` argument doesn't exist, create a new Size with this data.
     */
    create: XOR<SizeCreateInput, SizeUncheckedCreateInput>
    /**
     * In case the Size was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SizeUpdateInput, SizeUncheckedUpdateInput>
  }

  /**
   * Size delete
   */
  export type SizeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    /**
     * Filter which Size to delete.
     */
    where: SizeWhereUniqueInput
  }

  /**
   * Size deleteMany
   */
  export type SizeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sizes to delete
     */
    where?: SizeWhereInput
    /**
     * Limit how many Sizes to delete.
     */
    limit?: number
  }

  /**
   * Size.tools
   */
  export type Size$toolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tools
     */
    select?: ToolsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tools
     */
    omit?: ToolsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolsInclude<ExtArgs> | null
    where?: ToolsWhereInput
    orderBy?: ToolsOrderByWithRelationInput | ToolsOrderByWithRelationInput[]
    cursor?: ToolsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ToolsScalarFieldEnum | ToolsScalarFieldEnum[]
  }

  /**
   * Size without action
   */
  export type SizeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
  }


  /**
   * Model Master
   */

  export type AggregateMaster = {
    _count: MasterCountAggregateOutputType | null
    _avg: MasterAvgAggregateOutputType | null
    _sum: MasterSumAggregateOutputType | null
    _min: MasterMinAggregateOutputType | null
    _max: MasterMaxAggregateOutputType | null
  }

  export type MasterAvgAggregateOutputType = {
    id: number | null
    star: number | null
  }

  export type MasterSumAggregateOutputType = {
    id: number | null
    star: number | null
  }

  export type MasterMinAggregateOutputType = {
    id: number | null
    fullname: string | null
    phone: string | null
    isActive: boolean | null
    image: string | null
    passportImage: string | null
    star: number | null
    about: string | null
  }

  export type MasterMaxAggregateOutputType = {
    id: number | null
    fullname: string | null
    phone: string | null
    isActive: boolean | null
    image: string | null
    passportImage: string | null
    star: number | null
    about: string | null
  }

  export type MasterCountAggregateOutputType = {
    id: number
    fullname: number
    phone: number
    isActive: number
    image: number
    passportImage: number
    star: number
    about: number
    _all: number
  }


  export type MasterAvgAggregateInputType = {
    id?: true
    star?: true
  }

  export type MasterSumAggregateInputType = {
    id?: true
    star?: true
  }

  export type MasterMinAggregateInputType = {
    id?: true
    fullname?: true
    phone?: true
    isActive?: true
    image?: true
    passportImage?: true
    star?: true
    about?: true
  }

  export type MasterMaxAggregateInputType = {
    id?: true
    fullname?: true
    phone?: true
    isActive?: true
    image?: true
    passportImage?: true
    star?: true
    about?: true
  }

  export type MasterCountAggregateInputType = {
    id?: true
    fullname?: true
    phone?: true
    isActive?: true
    image?: true
    passportImage?: true
    star?: true
    about?: true
    _all?: true
  }

  export type MasterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Master to aggregate.
     */
    where?: MasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Masters to fetch.
     */
    orderBy?: MasterOrderByWithRelationInput | MasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Masters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Masters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Masters
    **/
    _count?: true | MasterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MasterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MasterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MasterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MasterMaxAggregateInputType
  }

  export type GetMasterAggregateType<T extends MasterAggregateArgs> = {
        [P in keyof T & keyof AggregateMaster]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMaster[P]>
      : GetScalarType<T[P], AggregateMaster[P]>
  }




  export type MasterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MasterWhereInput
    orderBy?: MasterOrderByWithAggregationInput | MasterOrderByWithAggregationInput[]
    by: MasterScalarFieldEnum[] | MasterScalarFieldEnum
    having?: MasterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MasterCountAggregateInputType | true
    _avg?: MasterAvgAggregateInputType
    _sum?: MasterSumAggregateInputType
    _min?: MasterMinAggregateInputType
    _max?: MasterMaxAggregateInputType
  }

  export type MasterGroupByOutputType = {
    id: number
    fullname: string
    phone: string
    isActive: boolean
    image: string | null
    passportImage: string | null
    star: number | null
    about: string
    _count: MasterCountAggregateOutputType | null
    _avg: MasterAvgAggregateOutputType | null
    _sum: MasterSumAggregateOutputType | null
    _min: MasterMinAggregateOutputType | null
    _max: MasterMaxAggregateOutputType | null
  }

  type GetMasterGroupByPayload<T extends MasterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MasterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MasterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MasterGroupByOutputType[P]>
            : GetScalarType<T[P], MasterGroupByOutputType[P]>
        }
      >
    >


  export type MasterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullname?: boolean
    phone?: boolean
    isActive?: boolean
    image?: boolean
    passportImage?: boolean
    star?: boolean
    about?: boolean
    masterProfessions?: boolean | Master$masterProfessionsArgs<ExtArgs>
    _count?: boolean | MasterCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["master"]>

  export type MasterSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullname?: boolean
    phone?: boolean
    isActive?: boolean
    image?: boolean
    passportImage?: boolean
    star?: boolean
    about?: boolean
  }, ExtArgs["result"]["master"]>

  export type MasterSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullname?: boolean
    phone?: boolean
    isActive?: boolean
    image?: boolean
    passportImage?: boolean
    star?: boolean
    about?: boolean
  }, ExtArgs["result"]["master"]>

  export type MasterSelectScalar = {
    id?: boolean
    fullname?: boolean
    phone?: boolean
    isActive?: boolean
    image?: boolean
    passportImage?: boolean
    star?: boolean
    about?: boolean
  }

  export type MasterOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "fullname" | "phone" | "isActive" | "image" | "passportImage" | "star" | "about", ExtArgs["result"]["master"]>
  export type MasterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    masterProfessions?: boolean | Master$masterProfessionsArgs<ExtArgs>
    _count?: boolean | MasterCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MasterIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type MasterIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $MasterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Master"
    objects: {
      masterProfessions: Prisma.$masterProfessionsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      fullname: string
      phone: string
      isActive: boolean
      image: string | null
      passportImage: string | null
      star: number | null
      about: string
    }, ExtArgs["result"]["master"]>
    composites: {}
  }

  type MasterGetPayload<S extends boolean | null | undefined | MasterDefaultArgs> = $Result.GetResult<Prisma.$MasterPayload, S>

  type MasterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MasterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MasterCountAggregateInputType | true
    }

  export interface MasterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Master'], meta: { name: 'Master' } }
    /**
     * Find zero or one Master that matches the filter.
     * @param {MasterFindUniqueArgs} args - Arguments to find a Master
     * @example
     * // Get one Master
     * const master = await prisma.master.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MasterFindUniqueArgs>(args: SelectSubset<T, MasterFindUniqueArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Master that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MasterFindUniqueOrThrowArgs} args - Arguments to find a Master
     * @example
     * // Get one Master
     * const master = await prisma.master.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MasterFindUniqueOrThrowArgs>(args: SelectSubset<T, MasterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Master that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterFindFirstArgs} args - Arguments to find a Master
     * @example
     * // Get one Master
     * const master = await prisma.master.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MasterFindFirstArgs>(args?: SelectSubset<T, MasterFindFirstArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Master that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterFindFirstOrThrowArgs} args - Arguments to find a Master
     * @example
     * // Get one Master
     * const master = await prisma.master.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MasterFindFirstOrThrowArgs>(args?: SelectSubset<T, MasterFindFirstOrThrowArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Masters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Masters
     * const masters = await prisma.master.findMany()
     * 
     * // Get first 10 Masters
     * const masters = await prisma.master.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const masterWithIdOnly = await prisma.master.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MasterFindManyArgs>(args?: SelectSubset<T, MasterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Master.
     * @param {MasterCreateArgs} args - Arguments to create a Master.
     * @example
     * // Create one Master
     * const Master = await prisma.master.create({
     *   data: {
     *     // ... data to create a Master
     *   }
     * })
     * 
     */
    create<T extends MasterCreateArgs>(args: SelectSubset<T, MasterCreateArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Masters.
     * @param {MasterCreateManyArgs} args - Arguments to create many Masters.
     * @example
     * // Create many Masters
     * const master = await prisma.master.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MasterCreateManyArgs>(args?: SelectSubset<T, MasterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Masters and returns the data saved in the database.
     * @param {MasterCreateManyAndReturnArgs} args - Arguments to create many Masters.
     * @example
     * // Create many Masters
     * const master = await prisma.master.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Masters and only return the `id`
     * const masterWithIdOnly = await prisma.master.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MasterCreateManyAndReturnArgs>(args?: SelectSubset<T, MasterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Master.
     * @param {MasterDeleteArgs} args - Arguments to delete one Master.
     * @example
     * // Delete one Master
     * const Master = await prisma.master.delete({
     *   where: {
     *     // ... filter to delete one Master
     *   }
     * })
     * 
     */
    delete<T extends MasterDeleteArgs>(args: SelectSubset<T, MasterDeleteArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Master.
     * @param {MasterUpdateArgs} args - Arguments to update one Master.
     * @example
     * // Update one Master
     * const master = await prisma.master.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MasterUpdateArgs>(args: SelectSubset<T, MasterUpdateArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Masters.
     * @param {MasterDeleteManyArgs} args - Arguments to filter Masters to delete.
     * @example
     * // Delete a few Masters
     * const { count } = await prisma.master.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MasterDeleteManyArgs>(args?: SelectSubset<T, MasterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Masters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Masters
     * const master = await prisma.master.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MasterUpdateManyArgs>(args: SelectSubset<T, MasterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Masters and returns the data updated in the database.
     * @param {MasterUpdateManyAndReturnArgs} args - Arguments to update many Masters.
     * @example
     * // Update many Masters
     * const master = await prisma.master.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Masters and only return the `id`
     * const masterWithIdOnly = await prisma.master.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MasterUpdateManyAndReturnArgs>(args: SelectSubset<T, MasterUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Master.
     * @param {MasterUpsertArgs} args - Arguments to update or create a Master.
     * @example
     * // Update or create a Master
     * const master = await prisma.master.upsert({
     *   create: {
     *     // ... data to create a Master
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Master we want to update
     *   }
     * })
     */
    upsert<T extends MasterUpsertArgs>(args: SelectSubset<T, MasterUpsertArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Masters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterCountArgs} args - Arguments to filter Masters to count.
     * @example
     * // Count the number of Masters
     * const count = await prisma.master.count({
     *   where: {
     *     // ... the filter for the Masters we want to count
     *   }
     * })
    **/
    count<T extends MasterCountArgs>(
      args?: Subset<T, MasterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MasterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Master.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MasterAggregateArgs>(args: Subset<T, MasterAggregateArgs>): Prisma.PrismaPromise<GetMasterAggregateType<T>>

    /**
     * Group by Master.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MasterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MasterGroupByArgs['orderBy'] }
        : { orderBy?: MasterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MasterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMasterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Master model
   */
  readonly fields: MasterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Master.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MasterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    masterProfessions<T extends Master$masterProfessionsArgs<ExtArgs> = {}>(args?: Subset<T, Master$masterProfessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$masterProfessionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Master model
   */
  interface MasterFieldRefs {
    readonly id: FieldRef<"Master", 'Int'>
    readonly fullname: FieldRef<"Master", 'String'>
    readonly phone: FieldRef<"Master", 'String'>
    readonly isActive: FieldRef<"Master", 'Boolean'>
    readonly image: FieldRef<"Master", 'String'>
    readonly passportImage: FieldRef<"Master", 'String'>
    readonly star: FieldRef<"Master", 'Float'>
    readonly about: FieldRef<"Master", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Master findUnique
   */
  export type MasterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
    /**
     * Filter, which Master to fetch.
     */
    where: MasterWhereUniqueInput
  }

  /**
   * Master findUniqueOrThrow
   */
  export type MasterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
    /**
     * Filter, which Master to fetch.
     */
    where: MasterWhereUniqueInput
  }

  /**
   * Master findFirst
   */
  export type MasterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
    /**
     * Filter, which Master to fetch.
     */
    where?: MasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Masters to fetch.
     */
    orderBy?: MasterOrderByWithRelationInput | MasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Masters.
     */
    cursor?: MasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Masters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Masters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Masters.
     */
    distinct?: MasterScalarFieldEnum | MasterScalarFieldEnum[]
  }

  /**
   * Master findFirstOrThrow
   */
  export type MasterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
    /**
     * Filter, which Master to fetch.
     */
    where?: MasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Masters to fetch.
     */
    orderBy?: MasterOrderByWithRelationInput | MasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Masters.
     */
    cursor?: MasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Masters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Masters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Masters.
     */
    distinct?: MasterScalarFieldEnum | MasterScalarFieldEnum[]
  }

  /**
   * Master findMany
   */
  export type MasterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
    /**
     * Filter, which Masters to fetch.
     */
    where?: MasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Masters to fetch.
     */
    orderBy?: MasterOrderByWithRelationInput | MasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Masters.
     */
    cursor?: MasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Masters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Masters.
     */
    skip?: number
    distinct?: MasterScalarFieldEnum | MasterScalarFieldEnum[]
  }

  /**
   * Master create
   */
  export type MasterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
    /**
     * The data needed to create a Master.
     */
    data: XOR<MasterCreateInput, MasterUncheckedCreateInput>
  }

  /**
   * Master createMany
   */
  export type MasterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Masters.
     */
    data: MasterCreateManyInput | MasterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Master createManyAndReturn
   */
  export type MasterCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * The data used to create many Masters.
     */
    data: MasterCreateManyInput | MasterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Master update
   */
  export type MasterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
    /**
     * The data needed to update a Master.
     */
    data: XOR<MasterUpdateInput, MasterUncheckedUpdateInput>
    /**
     * Choose, which Master to update.
     */
    where: MasterWhereUniqueInput
  }

  /**
   * Master updateMany
   */
  export type MasterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Masters.
     */
    data: XOR<MasterUpdateManyMutationInput, MasterUncheckedUpdateManyInput>
    /**
     * Filter which Masters to update
     */
    where?: MasterWhereInput
    /**
     * Limit how many Masters to update.
     */
    limit?: number
  }

  /**
   * Master updateManyAndReturn
   */
  export type MasterUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * The data used to update Masters.
     */
    data: XOR<MasterUpdateManyMutationInput, MasterUncheckedUpdateManyInput>
    /**
     * Filter which Masters to update
     */
    where?: MasterWhereInput
    /**
     * Limit how many Masters to update.
     */
    limit?: number
  }

  /**
   * Master upsert
   */
  export type MasterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
    /**
     * The filter to search for the Master to update in case it exists.
     */
    where: MasterWhereUniqueInput
    /**
     * In case the Master found by the `where` argument doesn't exist, create a new Master with this data.
     */
    create: XOR<MasterCreateInput, MasterUncheckedCreateInput>
    /**
     * In case the Master was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MasterUpdateInput, MasterUncheckedUpdateInput>
  }

  /**
   * Master delete
   */
  export type MasterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
    /**
     * Filter which Master to delete.
     */
    where: MasterWhereUniqueInput
  }

  /**
   * Master deleteMany
   */
  export type MasterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Masters to delete
     */
    where?: MasterWhereInput
    /**
     * Limit how many Masters to delete.
     */
    limit?: number
  }

  /**
   * Master.masterProfessions
   */
  export type Master$masterProfessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the masterProfessions
     */
    select?: masterProfessionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the masterProfessions
     */
    omit?: masterProfessionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: masterProfessionsInclude<ExtArgs> | null
    where?: masterProfessionsWhereInput
    orderBy?: masterProfessionsOrderByWithRelationInput | masterProfessionsOrderByWithRelationInput[]
    cursor?: masterProfessionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MasterProfessionsScalarFieldEnum | MasterProfessionsScalarFieldEnum[]
  }

  /**
   * Master without action
   */
  export type MasterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Master
     */
    select?: MasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Master
     */
    omit?: MasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MasterInclude<ExtArgs> | null
  }


  /**
   * Model masterProfessions
   */

  export type AggregateMasterProfessions = {
    _count: MasterProfessionsCountAggregateOutputType | null
    _avg: MasterProfessionsAvgAggregateOutputType | null
    _sum: MasterProfessionsSumAggregateOutputType | null
    _min: MasterProfessionsMinAggregateOutputType | null
    _max: MasterProfessionsMaxAggregateOutputType | null
  }

  export type MasterProfessionsAvgAggregateOutputType = {
    id: number | null
    minWorking_h: number | null
    professionId: number | null
    levelId: number | null
    price_h: number | null
    price_d: number | null
    experience: number | null
    masterId: number | null
  }

  export type MasterProfessionsSumAggregateOutputType = {
    id: number | null
    minWorking_h: number | null
    professionId: number | null
    levelId: number | null
    price_h: number | null
    price_d: number | null
    experience: number | null
    masterId: number | null
  }

  export type MasterProfessionsMinAggregateOutputType = {
    id: number | null
    minWorking_h: number | null
    professionId: number | null
    levelId: number | null
    price_h: number | null
    price_d: number | null
    experience: number | null
    masterId: number | null
  }

  export type MasterProfessionsMaxAggregateOutputType = {
    id: number | null
    minWorking_h: number | null
    professionId: number | null
    levelId: number | null
    price_h: number | null
    price_d: number | null
    experience: number | null
    masterId: number | null
  }

  export type MasterProfessionsCountAggregateOutputType = {
    id: number
    minWorking_h: number
    professionId: number
    levelId: number
    price_h: number
    price_d: number
    experience: number
    masterId: number
    _all: number
  }


  export type MasterProfessionsAvgAggregateInputType = {
    id?: true
    minWorking_h?: true
    professionId?: true
    levelId?: true
    price_h?: true
    price_d?: true
    experience?: true
    masterId?: true
  }

  export type MasterProfessionsSumAggregateInputType = {
    id?: true
    minWorking_h?: true
    professionId?: true
    levelId?: true
    price_h?: true
    price_d?: true
    experience?: true
    masterId?: true
  }

  export type MasterProfessionsMinAggregateInputType = {
    id?: true
    minWorking_h?: true
    professionId?: true
    levelId?: true
    price_h?: true
    price_d?: true
    experience?: true
    masterId?: true
  }

  export type MasterProfessionsMaxAggregateInputType = {
    id?: true
    minWorking_h?: true
    professionId?: true
    levelId?: true
    price_h?: true
    price_d?: true
    experience?: true
    masterId?: true
  }

  export type MasterProfessionsCountAggregateInputType = {
    id?: true
    minWorking_h?: true
    professionId?: true
    levelId?: true
    price_h?: true
    price_d?: true
    experience?: true
    masterId?: true
    _all?: true
  }

  export type MasterProfessionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which masterProfessions to aggregate.
     */
    where?: masterProfessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of masterProfessions to fetch.
     */
    orderBy?: masterProfessionsOrderByWithRelationInput | masterProfessionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: masterProfessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` masterProfessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` masterProfessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned masterProfessions
    **/
    _count?: true | MasterProfessionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MasterProfessionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MasterProfessionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MasterProfessionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MasterProfessionsMaxAggregateInputType
  }

  export type GetMasterProfessionsAggregateType<T extends MasterProfessionsAggregateArgs> = {
        [P in keyof T & keyof AggregateMasterProfessions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMasterProfessions[P]>
      : GetScalarType<T[P], AggregateMasterProfessions[P]>
  }




  export type masterProfessionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: masterProfessionsWhereInput
    orderBy?: masterProfessionsOrderByWithAggregationInput | masterProfessionsOrderByWithAggregationInput[]
    by: MasterProfessionsScalarFieldEnum[] | MasterProfessionsScalarFieldEnum
    having?: masterProfessionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MasterProfessionsCountAggregateInputType | true
    _avg?: MasterProfessionsAvgAggregateInputType
    _sum?: MasterProfessionsSumAggregateInputType
    _min?: MasterProfessionsMinAggregateInputType
    _max?: MasterProfessionsMaxAggregateInputType
  }

  export type MasterProfessionsGroupByOutputType = {
    id: number
    minWorking_h: number | null
    professionId: number
    levelId: number
    price_h: number | null
    price_d: number | null
    experience: number
    masterId: number
    _count: MasterProfessionsCountAggregateOutputType | null
    _avg: MasterProfessionsAvgAggregateOutputType | null
    _sum: MasterProfessionsSumAggregateOutputType | null
    _min: MasterProfessionsMinAggregateOutputType | null
    _max: MasterProfessionsMaxAggregateOutputType | null
  }

  type GetMasterProfessionsGroupByPayload<T extends masterProfessionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MasterProfessionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MasterProfessionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MasterProfessionsGroupByOutputType[P]>
            : GetScalarType<T[P], MasterProfessionsGroupByOutputType[P]>
        }
      >
    >


  export type masterProfessionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    minWorking_h?: boolean
    professionId?: boolean
    levelId?: boolean
    price_h?: boolean
    price_d?: boolean
    experience?: boolean
    masterId?: boolean
    level?: boolean | LevelDefaultArgs<ExtArgs>
    profession?: boolean | ProfessionDefaultArgs<ExtArgs>
    master?: boolean | MasterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["masterProfessions"]>

  export type masterProfessionsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    minWorking_h?: boolean
    professionId?: boolean
    levelId?: boolean
    price_h?: boolean
    price_d?: boolean
    experience?: boolean
    masterId?: boolean
    level?: boolean | LevelDefaultArgs<ExtArgs>
    profession?: boolean | ProfessionDefaultArgs<ExtArgs>
    master?: boolean | MasterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["masterProfessions"]>

  export type masterProfessionsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    minWorking_h?: boolean
    professionId?: boolean
    levelId?: boolean
    price_h?: boolean
    price_d?: boolean
    experience?: boolean
    masterId?: boolean
    level?: boolean | LevelDefaultArgs<ExtArgs>
    profession?: boolean | ProfessionDefaultArgs<ExtArgs>
    master?: boolean | MasterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["masterProfessions"]>

  export type masterProfessionsSelectScalar = {
    id?: boolean
    minWorking_h?: boolean
    professionId?: boolean
    levelId?: boolean
    price_h?: boolean
    price_d?: boolean
    experience?: boolean
    masterId?: boolean
  }

  export type masterProfessionsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "minWorking_h" | "professionId" | "levelId" | "price_h" | "price_d" | "experience" | "masterId", ExtArgs["result"]["masterProfessions"]>
  export type masterProfessionsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    level?: boolean | LevelDefaultArgs<ExtArgs>
    profession?: boolean | ProfessionDefaultArgs<ExtArgs>
    master?: boolean | MasterDefaultArgs<ExtArgs>
  }
  export type masterProfessionsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    level?: boolean | LevelDefaultArgs<ExtArgs>
    profession?: boolean | ProfessionDefaultArgs<ExtArgs>
    master?: boolean | MasterDefaultArgs<ExtArgs>
  }
  export type masterProfessionsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    level?: boolean | LevelDefaultArgs<ExtArgs>
    profession?: boolean | ProfessionDefaultArgs<ExtArgs>
    master?: boolean | MasterDefaultArgs<ExtArgs>
  }

  export type $masterProfessionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "masterProfessions"
    objects: {
      level: Prisma.$LevelPayload<ExtArgs>
      profession: Prisma.$ProfessionPayload<ExtArgs>
      master: Prisma.$MasterPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      minWorking_h: number | null
      professionId: number
      levelId: number
      price_h: number | null
      price_d: number | null
      experience: number
      masterId: number
    }, ExtArgs["result"]["masterProfessions"]>
    composites: {}
  }

  type masterProfessionsGetPayload<S extends boolean | null | undefined | masterProfessionsDefaultArgs> = $Result.GetResult<Prisma.$masterProfessionsPayload, S>

  type masterProfessionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<masterProfessionsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MasterProfessionsCountAggregateInputType | true
    }

  export interface masterProfessionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['masterProfessions'], meta: { name: 'masterProfessions' } }
    /**
     * Find zero or one MasterProfessions that matches the filter.
     * @param {masterProfessionsFindUniqueArgs} args - Arguments to find a MasterProfessions
     * @example
     * // Get one MasterProfessions
     * const masterProfessions = await prisma.masterProfessions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends masterProfessionsFindUniqueArgs>(args: SelectSubset<T, masterProfessionsFindUniqueArgs<ExtArgs>>): Prisma__masterProfessionsClient<$Result.GetResult<Prisma.$masterProfessionsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MasterProfessions that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {masterProfessionsFindUniqueOrThrowArgs} args - Arguments to find a MasterProfessions
     * @example
     * // Get one MasterProfessions
     * const masterProfessions = await prisma.masterProfessions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends masterProfessionsFindUniqueOrThrowArgs>(args: SelectSubset<T, masterProfessionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__masterProfessionsClient<$Result.GetResult<Prisma.$masterProfessionsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MasterProfessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {masterProfessionsFindFirstArgs} args - Arguments to find a MasterProfessions
     * @example
     * // Get one MasterProfessions
     * const masterProfessions = await prisma.masterProfessions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends masterProfessionsFindFirstArgs>(args?: SelectSubset<T, masterProfessionsFindFirstArgs<ExtArgs>>): Prisma__masterProfessionsClient<$Result.GetResult<Prisma.$masterProfessionsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MasterProfessions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {masterProfessionsFindFirstOrThrowArgs} args - Arguments to find a MasterProfessions
     * @example
     * // Get one MasterProfessions
     * const masterProfessions = await prisma.masterProfessions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends masterProfessionsFindFirstOrThrowArgs>(args?: SelectSubset<T, masterProfessionsFindFirstOrThrowArgs<ExtArgs>>): Prisma__masterProfessionsClient<$Result.GetResult<Prisma.$masterProfessionsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MasterProfessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {masterProfessionsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MasterProfessions
     * const masterProfessions = await prisma.masterProfessions.findMany()
     * 
     * // Get first 10 MasterProfessions
     * const masterProfessions = await prisma.masterProfessions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const masterProfessionsWithIdOnly = await prisma.masterProfessions.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends masterProfessionsFindManyArgs>(args?: SelectSubset<T, masterProfessionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$masterProfessionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MasterProfessions.
     * @param {masterProfessionsCreateArgs} args - Arguments to create a MasterProfessions.
     * @example
     * // Create one MasterProfessions
     * const MasterProfessions = await prisma.masterProfessions.create({
     *   data: {
     *     // ... data to create a MasterProfessions
     *   }
     * })
     * 
     */
    create<T extends masterProfessionsCreateArgs>(args: SelectSubset<T, masterProfessionsCreateArgs<ExtArgs>>): Prisma__masterProfessionsClient<$Result.GetResult<Prisma.$masterProfessionsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MasterProfessions.
     * @param {masterProfessionsCreateManyArgs} args - Arguments to create many MasterProfessions.
     * @example
     * // Create many MasterProfessions
     * const masterProfessions = await prisma.masterProfessions.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends masterProfessionsCreateManyArgs>(args?: SelectSubset<T, masterProfessionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MasterProfessions and returns the data saved in the database.
     * @param {masterProfessionsCreateManyAndReturnArgs} args - Arguments to create many MasterProfessions.
     * @example
     * // Create many MasterProfessions
     * const masterProfessions = await prisma.masterProfessions.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MasterProfessions and only return the `id`
     * const masterProfessionsWithIdOnly = await prisma.masterProfessions.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends masterProfessionsCreateManyAndReturnArgs>(args?: SelectSubset<T, masterProfessionsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$masterProfessionsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MasterProfessions.
     * @param {masterProfessionsDeleteArgs} args - Arguments to delete one MasterProfessions.
     * @example
     * // Delete one MasterProfessions
     * const MasterProfessions = await prisma.masterProfessions.delete({
     *   where: {
     *     // ... filter to delete one MasterProfessions
     *   }
     * })
     * 
     */
    delete<T extends masterProfessionsDeleteArgs>(args: SelectSubset<T, masterProfessionsDeleteArgs<ExtArgs>>): Prisma__masterProfessionsClient<$Result.GetResult<Prisma.$masterProfessionsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MasterProfessions.
     * @param {masterProfessionsUpdateArgs} args - Arguments to update one MasterProfessions.
     * @example
     * // Update one MasterProfessions
     * const masterProfessions = await prisma.masterProfessions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends masterProfessionsUpdateArgs>(args: SelectSubset<T, masterProfessionsUpdateArgs<ExtArgs>>): Prisma__masterProfessionsClient<$Result.GetResult<Prisma.$masterProfessionsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MasterProfessions.
     * @param {masterProfessionsDeleteManyArgs} args - Arguments to filter MasterProfessions to delete.
     * @example
     * // Delete a few MasterProfessions
     * const { count } = await prisma.masterProfessions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends masterProfessionsDeleteManyArgs>(args?: SelectSubset<T, masterProfessionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MasterProfessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {masterProfessionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MasterProfessions
     * const masterProfessions = await prisma.masterProfessions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends masterProfessionsUpdateManyArgs>(args: SelectSubset<T, masterProfessionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MasterProfessions and returns the data updated in the database.
     * @param {masterProfessionsUpdateManyAndReturnArgs} args - Arguments to update many MasterProfessions.
     * @example
     * // Update many MasterProfessions
     * const masterProfessions = await prisma.masterProfessions.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MasterProfessions and only return the `id`
     * const masterProfessionsWithIdOnly = await prisma.masterProfessions.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends masterProfessionsUpdateManyAndReturnArgs>(args: SelectSubset<T, masterProfessionsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$masterProfessionsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MasterProfessions.
     * @param {masterProfessionsUpsertArgs} args - Arguments to update or create a MasterProfessions.
     * @example
     * // Update or create a MasterProfessions
     * const masterProfessions = await prisma.masterProfessions.upsert({
     *   create: {
     *     // ... data to create a MasterProfessions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MasterProfessions we want to update
     *   }
     * })
     */
    upsert<T extends masterProfessionsUpsertArgs>(args: SelectSubset<T, masterProfessionsUpsertArgs<ExtArgs>>): Prisma__masterProfessionsClient<$Result.GetResult<Prisma.$masterProfessionsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MasterProfessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {masterProfessionsCountArgs} args - Arguments to filter MasterProfessions to count.
     * @example
     * // Count the number of MasterProfessions
     * const count = await prisma.masterProfessions.count({
     *   where: {
     *     // ... the filter for the MasterProfessions we want to count
     *   }
     * })
    **/
    count<T extends masterProfessionsCountArgs>(
      args?: Subset<T, masterProfessionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MasterProfessionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MasterProfessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MasterProfessionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MasterProfessionsAggregateArgs>(args: Subset<T, MasterProfessionsAggregateArgs>): Prisma.PrismaPromise<GetMasterProfessionsAggregateType<T>>

    /**
     * Group by MasterProfessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {masterProfessionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends masterProfessionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: masterProfessionsGroupByArgs['orderBy'] }
        : { orderBy?: masterProfessionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, masterProfessionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMasterProfessionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the masterProfessions model
   */
  readonly fields: masterProfessionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for masterProfessions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__masterProfessionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    level<T extends LevelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LevelDefaultArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    profession<T extends ProfessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfessionDefaultArgs<ExtArgs>>): Prisma__ProfessionClient<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    master<T extends MasterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MasterDefaultArgs<ExtArgs>>): Prisma__MasterClient<$Result.GetResult<Prisma.$MasterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the masterProfessions model
   */
  interface masterProfessionsFieldRefs {
    readonly id: FieldRef<"masterProfessions", 'Int'>
    readonly minWorking_h: FieldRef<"masterProfessions", 'Int'>
    readonly professionId: FieldRef<"masterProfessions", 'Int'>
    readonly levelId: FieldRef<"masterProfessions", 'Int'>
    readonly price_h: FieldRef<"masterProfessions", 'Float'>
    readonly price_d: FieldRef<"masterProfessions", 'Float'>
    readonly experience: FieldRef<"masterProfessions", 'Int'>
    readonly masterId: FieldRef<"masterProfessions", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * masterProfessions findUnique
   */
  export type masterProfessionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the masterProfessions
     */
    select?: masterProfessionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the masterProfessions
     */
    omit?: masterProfessionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: masterProfessionsInclude<ExtArgs> | null
    /**
     * Filter, which masterProfessions to fetch.
     */
    where: masterProfessionsWhereUniqueInput
  }

  /**
   * masterProfessions findUniqueOrThrow
   */
  export type masterProfessionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the masterProfessions
     */
    select?: masterProfessionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the masterProfessions
     */
    omit?: masterProfessionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: masterProfessionsInclude<ExtArgs> | null
    /**
     * Filter, which masterProfessions to fetch.
     */
    where: masterProfessionsWhereUniqueInput
  }

  /**
   * masterProfessions findFirst
   */
  export type masterProfessionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the masterProfessions
     */
    select?: masterProfessionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the masterProfessions
     */
    omit?: masterProfessionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: masterProfessionsInclude<ExtArgs> | null
    /**
     * Filter, which masterProfessions to fetch.
     */
    where?: masterProfessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of masterProfessions to fetch.
     */
    orderBy?: masterProfessionsOrderByWithRelationInput | masterProfessionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for masterProfessions.
     */
    cursor?: masterProfessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` masterProfessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` masterProfessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of masterProfessions.
     */
    distinct?: MasterProfessionsScalarFieldEnum | MasterProfessionsScalarFieldEnum[]
  }

  /**
   * masterProfessions findFirstOrThrow
   */
  export type masterProfessionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the masterProfessions
     */
    select?: masterProfessionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the masterProfessions
     */
    omit?: masterProfessionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: masterProfessionsInclude<ExtArgs> | null
    /**
     * Filter, which masterProfessions to fetch.
     */
    where?: masterProfessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of masterProfessions to fetch.
     */
    orderBy?: masterProfessionsOrderByWithRelationInput | masterProfessionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for masterProfessions.
     */
    cursor?: masterProfessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` masterProfessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` masterProfessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of masterProfessions.
     */
    distinct?: MasterProfessionsScalarFieldEnum | MasterProfessionsScalarFieldEnum[]
  }

  /**
   * masterProfessions findMany
   */
  export type masterProfessionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the masterProfessions
     */
    select?: masterProfessionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the masterProfessions
     */
    omit?: masterProfessionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: masterProfessionsInclude<ExtArgs> | null
    /**
     * Filter, which masterProfessions to fetch.
     */
    where?: masterProfessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of masterProfessions to fetch.
     */
    orderBy?: masterProfessionsOrderByWithRelationInput | masterProfessionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing masterProfessions.
     */
    cursor?: masterProfessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` masterProfessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` masterProfessions.
     */
    skip?: number
    distinct?: MasterProfessionsScalarFieldEnum | MasterProfessionsScalarFieldEnum[]
  }

  /**
   * masterProfessions create
   */
  export type masterProfessionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the masterProfessions
     */
    select?: masterProfessionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the masterProfessions
     */
    omit?: masterProfessionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: masterProfessionsInclude<ExtArgs> | null
    /**
     * The data needed to create a masterProfessions.
     */
    data: XOR<masterProfessionsCreateInput, masterProfessionsUncheckedCreateInput>
  }

  /**
   * masterProfessions createMany
   */
  export type masterProfessionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many masterProfessions.
     */
    data: masterProfessionsCreateManyInput | masterProfessionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * masterProfessions createManyAndReturn
   */
  export type masterProfessionsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the masterProfessions
     */
    select?: masterProfessionsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the masterProfessions
     */
    omit?: masterProfessionsOmit<ExtArgs> | null
    /**
     * The data used to create many masterProfessions.
     */
    data: masterProfessionsCreateManyInput | masterProfessionsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: masterProfessionsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * masterProfessions update
   */
  export type masterProfessionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the masterProfessions
     */
    select?: masterProfessionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the masterProfessions
     */
    omit?: masterProfessionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: masterProfessionsInclude<ExtArgs> | null
    /**
     * The data needed to update a masterProfessions.
     */
    data: XOR<masterProfessionsUpdateInput, masterProfessionsUncheckedUpdateInput>
    /**
     * Choose, which masterProfessions to update.
     */
    where: masterProfessionsWhereUniqueInput
  }

  /**
   * masterProfessions updateMany
   */
  export type masterProfessionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update masterProfessions.
     */
    data: XOR<masterProfessionsUpdateManyMutationInput, masterProfessionsUncheckedUpdateManyInput>
    /**
     * Filter which masterProfessions to update
     */
    where?: masterProfessionsWhereInput
    /**
     * Limit how many masterProfessions to update.
     */
    limit?: number
  }

  /**
   * masterProfessions updateManyAndReturn
   */
  export type masterProfessionsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the masterProfessions
     */
    select?: masterProfessionsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the masterProfessions
     */
    omit?: masterProfessionsOmit<ExtArgs> | null
    /**
     * The data used to update masterProfessions.
     */
    data: XOR<masterProfessionsUpdateManyMutationInput, masterProfessionsUncheckedUpdateManyInput>
    /**
     * Filter which masterProfessions to update
     */
    where?: masterProfessionsWhereInput
    /**
     * Limit how many masterProfessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: masterProfessionsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * masterProfessions upsert
   */
  export type masterProfessionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the masterProfessions
     */
    select?: masterProfessionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the masterProfessions
     */
    omit?: masterProfessionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: masterProfessionsInclude<ExtArgs> | null
    /**
     * The filter to search for the masterProfessions to update in case it exists.
     */
    where: masterProfessionsWhereUniqueInput
    /**
     * In case the masterProfessions found by the `where` argument doesn't exist, create a new masterProfessions with this data.
     */
    create: XOR<masterProfessionsCreateInput, masterProfessionsUncheckedCreateInput>
    /**
     * In case the masterProfessions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<masterProfessionsUpdateInput, masterProfessionsUncheckedUpdateInput>
  }

  /**
   * masterProfessions delete
   */
  export type masterProfessionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the masterProfessions
     */
    select?: masterProfessionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the masterProfessions
     */
    omit?: masterProfessionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: masterProfessionsInclude<ExtArgs> | null
    /**
     * Filter which masterProfessions to delete.
     */
    where: masterProfessionsWhereUniqueInput
  }

  /**
   * masterProfessions deleteMany
   */
  export type masterProfessionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which masterProfessions to delete
     */
    where?: masterProfessionsWhereInput
    /**
     * Limit how many masterProfessions to delete.
     */
    limit?: number
  }

  /**
   * masterProfessions without action
   */
  export type masterProfessionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the masterProfessions
     */
    select?: masterProfessionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the masterProfessions
     */
    omit?: masterProfessionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: masterProfessionsInclude<ExtArgs> | null
  }


  /**
   * Model professionLevel
   */

  export type AggregateProfessionLevel = {
    _count: ProfessionLevelCountAggregateOutputType | null
    _avg: ProfessionLevelAvgAggregateOutputType | null
    _sum: ProfessionLevelSumAggregateOutputType | null
    _min: ProfessionLevelMinAggregateOutputType | null
    _max: ProfessionLevelMaxAggregateOutputType | null
  }

  export type ProfessionLevelAvgAggregateOutputType = {
    id: number | null
    professionId: number | null
    levelId: number | null
    minWorking_h: number | null
    price_h: number | null
    price_d: number | null
  }

  export type ProfessionLevelSumAggregateOutputType = {
    id: number | null
    professionId: number | null
    levelId: number | null
    minWorking_h: number | null
    price_h: number | null
    price_d: number | null
  }

  export type ProfessionLevelMinAggregateOutputType = {
    id: number | null
    professionId: number | null
    levelId: number | null
    minWorking_h: number | null
    price_h: number | null
    price_d: number | null
  }

  export type ProfessionLevelMaxAggregateOutputType = {
    id: number | null
    professionId: number | null
    levelId: number | null
    minWorking_h: number | null
    price_h: number | null
    price_d: number | null
  }

  export type ProfessionLevelCountAggregateOutputType = {
    id: number
    professionId: number
    levelId: number
    minWorking_h: number
    price_h: number
    price_d: number
    _all: number
  }


  export type ProfessionLevelAvgAggregateInputType = {
    id?: true
    professionId?: true
    levelId?: true
    minWorking_h?: true
    price_h?: true
    price_d?: true
  }

  export type ProfessionLevelSumAggregateInputType = {
    id?: true
    professionId?: true
    levelId?: true
    minWorking_h?: true
    price_h?: true
    price_d?: true
  }

  export type ProfessionLevelMinAggregateInputType = {
    id?: true
    professionId?: true
    levelId?: true
    minWorking_h?: true
    price_h?: true
    price_d?: true
  }

  export type ProfessionLevelMaxAggregateInputType = {
    id?: true
    professionId?: true
    levelId?: true
    minWorking_h?: true
    price_h?: true
    price_d?: true
  }

  export type ProfessionLevelCountAggregateInputType = {
    id?: true
    professionId?: true
    levelId?: true
    minWorking_h?: true
    price_h?: true
    price_d?: true
    _all?: true
  }

  export type ProfessionLevelAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which professionLevel to aggregate.
     */
    where?: professionLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of professionLevels to fetch.
     */
    orderBy?: professionLevelOrderByWithRelationInput | professionLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: professionLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` professionLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` professionLevels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned professionLevels
    **/
    _count?: true | ProfessionLevelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfessionLevelAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfessionLevelSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfessionLevelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfessionLevelMaxAggregateInputType
  }

  export type GetProfessionLevelAggregateType<T extends ProfessionLevelAggregateArgs> = {
        [P in keyof T & keyof AggregateProfessionLevel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfessionLevel[P]>
      : GetScalarType<T[P], AggregateProfessionLevel[P]>
  }




  export type professionLevelGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: professionLevelWhereInput
    orderBy?: professionLevelOrderByWithAggregationInput | professionLevelOrderByWithAggregationInput[]
    by: ProfessionLevelScalarFieldEnum[] | ProfessionLevelScalarFieldEnum
    having?: professionLevelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfessionLevelCountAggregateInputType | true
    _avg?: ProfessionLevelAvgAggregateInputType
    _sum?: ProfessionLevelSumAggregateInputType
    _min?: ProfessionLevelMinAggregateInputType
    _max?: ProfessionLevelMaxAggregateInputType
  }

  export type ProfessionLevelGroupByOutputType = {
    id: number
    professionId: number
    levelId: number
    minWorking_h: number
    price_h: number
    price_d: number
    _count: ProfessionLevelCountAggregateOutputType | null
    _avg: ProfessionLevelAvgAggregateOutputType | null
    _sum: ProfessionLevelSumAggregateOutputType | null
    _min: ProfessionLevelMinAggregateOutputType | null
    _max: ProfessionLevelMaxAggregateOutputType | null
  }

  type GetProfessionLevelGroupByPayload<T extends professionLevelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfessionLevelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfessionLevelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfessionLevelGroupByOutputType[P]>
            : GetScalarType<T[P], ProfessionLevelGroupByOutputType[P]>
        }
      >
    >


  export type professionLevelSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    professionId?: boolean
    levelId?: boolean
    minWorking_h?: boolean
    price_h?: boolean
    price_d?: boolean
    profession?: boolean | ProfessionDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["professionLevel"]>

  export type professionLevelSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    professionId?: boolean
    levelId?: boolean
    minWorking_h?: boolean
    price_h?: boolean
    price_d?: boolean
    profession?: boolean | ProfessionDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["professionLevel"]>

  export type professionLevelSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    professionId?: boolean
    levelId?: boolean
    minWorking_h?: boolean
    price_h?: boolean
    price_d?: boolean
    profession?: boolean | ProfessionDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["professionLevel"]>

  export type professionLevelSelectScalar = {
    id?: boolean
    professionId?: boolean
    levelId?: boolean
    minWorking_h?: boolean
    price_h?: boolean
    price_d?: boolean
  }

  export type professionLevelOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "professionId" | "levelId" | "minWorking_h" | "price_h" | "price_d", ExtArgs["result"]["professionLevel"]>
  export type professionLevelInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profession?: boolean | ProfessionDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
  }
  export type professionLevelIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profession?: boolean | ProfessionDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
  }
  export type professionLevelIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profession?: boolean | ProfessionDefaultArgs<ExtArgs>
    level?: boolean | LevelDefaultArgs<ExtArgs>
  }

  export type $professionLevelPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "professionLevel"
    objects: {
      profession: Prisma.$ProfessionPayload<ExtArgs>
      level: Prisma.$LevelPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      professionId: number
      levelId: number
      minWorking_h: number
      price_h: number
      price_d: number
    }, ExtArgs["result"]["professionLevel"]>
    composites: {}
  }

  type professionLevelGetPayload<S extends boolean | null | undefined | professionLevelDefaultArgs> = $Result.GetResult<Prisma.$professionLevelPayload, S>

  type professionLevelCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<professionLevelFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProfessionLevelCountAggregateInputType | true
    }

  export interface professionLevelDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['professionLevel'], meta: { name: 'professionLevel' } }
    /**
     * Find zero or one ProfessionLevel that matches the filter.
     * @param {professionLevelFindUniqueArgs} args - Arguments to find a ProfessionLevel
     * @example
     * // Get one ProfessionLevel
     * const professionLevel = await prisma.professionLevel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends professionLevelFindUniqueArgs>(args: SelectSubset<T, professionLevelFindUniqueArgs<ExtArgs>>): Prisma__professionLevelClient<$Result.GetResult<Prisma.$professionLevelPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProfessionLevel that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {professionLevelFindUniqueOrThrowArgs} args - Arguments to find a ProfessionLevel
     * @example
     * // Get one ProfessionLevel
     * const professionLevel = await prisma.professionLevel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends professionLevelFindUniqueOrThrowArgs>(args: SelectSubset<T, professionLevelFindUniqueOrThrowArgs<ExtArgs>>): Prisma__professionLevelClient<$Result.GetResult<Prisma.$professionLevelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProfessionLevel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {professionLevelFindFirstArgs} args - Arguments to find a ProfessionLevel
     * @example
     * // Get one ProfessionLevel
     * const professionLevel = await prisma.professionLevel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends professionLevelFindFirstArgs>(args?: SelectSubset<T, professionLevelFindFirstArgs<ExtArgs>>): Prisma__professionLevelClient<$Result.GetResult<Prisma.$professionLevelPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProfessionLevel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {professionLevelFindFirstOrThrowArgs} args - Arguments to find a ProfessionLevel
     * @example
     * // Get one ProfessionLevel
     * const professionLevel = await prisma.professionLevel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends professionLevelFindFirstOrThrowArgs>(args?: SelectSubset<T, professionLevelFindFirstOrThrowArgs<ExtArgs>>): Prisma__professionLevelClient<$Result.GetResult<Prisma.$professionLevelPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProfessionLevels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {professionLevelFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProfessionLevels
     * const professionLevels = await prisma.professionLevel.findMany()
     * 
     * // Get first 10 ProfessionLevels
     * const professionLevels = await prisma.professionLevel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const professionLevelWithIdOnly = await prisma.professionLevel.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends professionLevelFindManyArgs>(args?: SelectSubset<T, professionLevelFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$professionLevelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProfessionLevel.
     * @param {professionLevelCreateArgs} args - Arguments to create a ProfessionLevel.
     * @example
     * // Create one ProfessionLevel
     * const ProfessionLevel = await prisma.professionLevel.create({
     *   data: {
     *     // ... data to create a ProfessionLevel
     *   }
     * })
     * 
     */
    create<T extends professionLevelCreateArgs>(args: SelectSubset<T, professionLevelCreateArgs<ExtArgs>>): Prisma__professionLevelClient<$Result.GetResult<Prisma.$professionLevelPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProfessionLevels.
     * @param {professionLevelCreateManyArgs} args - Arguments to create many ProfessionLevels.
     * @example
     * // Create many ProfessionLevels
     * const professionLevel = await prisma.professionLevel.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends professionLevelCreateManyArgs>(args?: SelectSubset<T, professionLevelCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProfessionLevels and returns the data saved in the database.
     * @param {professionLevelCreateManyAndReturnArgs} args - Arguments to create many ProfessionLevels.
     * @example
     * // Create many ProfessionLevels
     * const professionLevel = await prisma.professionLevel.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProfessionLevels and only return the `id`
     * const professionLevelWithIdOnly = await prisma.professionLevel.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends professionLevelCreateManyAndReturnArgs>(args?: SelectSubset<T, professionLevelCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$professionLevelPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProfessionLevel.
     * @param {professionLevelDeleteArgs} args - Arguments to delete one ProfessionLevel.
     * @example
     * // Delete one ProfessionLevel
     * const ProfessionLevel = await prisma.professionLevel.delete({
     *   where: {
     *     // ... filter to delete one ProfessionLevel
     *   }
     * })
     * 
     */
    delete<T extends professionLevelDeleteArgs>(args: SelectSubset<T, professionLevelDeleteArgs<ExtArgs>>): Prisma__professionLevelClient<$Result.GetResult<Prisma.$professionLevelPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProfessionLevel.
     * @param {professionLevelUpdateArgs} args - Arguments to update one ProfessionLevel.
     * @example
     * // Update one ProfessionLevel
     * const professionLevel = await prisma.professionLevel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends professionLevelUpdateArgs>(args: SelectSubset<T, professionLevelUpdateArgs<ExtArgs>>): Prisma__professionLevelClient<$Result.GetResult<Prisma.$professionLevelPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProfessionLevels.
     * @param {professionLevelDeleteManyArgs} args - Arguments to filter ProfessionLevels to delete.
     * @example
     * // Delete a few ProfessionLevels
     * const { count } = await prisma.professionLevel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends professionLevelDeleteManyArgs>(args?: SelectSubset<T, professionLevelDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProfessionLevels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {professionLevelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProfessionLevels
     * const professionLevel = await prisma.professionLevel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends professionLevelUpdateManyArgs>(args: SelectSubset<T, professionLevelUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProfessionLevels and returns the data updated in the database.
     * @param {professionLevelUpdateManyAndReturnArgs} args - Arguments to update many ProfessionLevels.
     * @example
     * // Update many ProfessionLevels
     * const professionLevel = await prisma.professionLevel.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProfessionLevels and only return the `id`
     * const professionLevelWithIdOnly = await prisma.professionLevel.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends professionLevelUpdateManyAndReturnArgs>(args: SelectSubset<T, professionLevelUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$professionLevelPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProfessionLevel.
     * @param {professionLevelUpsertArgs} args - Arguments to update or create a ProfessionLevel.
     * @example
     * // Update or create a ProfessionLevel
     * const professionLevel = await prisma.professionLevel.upsert({
     *   create: {
     *     // ... data to create a ProfessionLevel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProfessionLevel we want to update
     *   }
     * })
     */
    upsert<T extends professionLevelUpsertArgs>(args: SelectSubset<T, professionLevelUpsertArgs<ExtArgs>>): Prisma__professionLevelClient<$Result.GetResult<Prisma.$professionLevelPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProfessionLevels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {professionLevelCountArgs} args - Arguments to filter ProfessionLevels to count.
     * @example
     * // Count the number of ProfessionLevels
     * const count = await prisma.professionLevel.count({
     *   where: {
     *     // ... the filter for the ProfessionLevels we want to count
     *   }
     * })
    **/
    count<T extends professionLevelCountArgs>(
      args?: Subset<T, professionLevelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfessionLevelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProfessionLevel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionLevelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfessionLevelAggregateArgs>(args: Subset<T, ProfessionLevelAggregateArgs>): Prisma.PrismaPromise<GetProfessionLevelAggregateType<T>>

    /**
     * Group by ProfessionLevel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {professionLevelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends professionLevelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: professionLevelGroupByArgs['orderBy'] }
        : { orderBy?: professionLevelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, professionLevelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfessionLevelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the professionLevel model
   */
  readonly fields: professionLevelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for professionLevel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__professionLevelClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    profession<T extends ProfessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfessionDefaultArgs<ExtArgs>>): Prisma__ProfessionClient<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    level<T extends LevelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LevelDefaultArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the professionLevel model
   */
  interface professionLevelFieldRefs {
    readonly id: FieldRef<"professionLevel", 'Int'>
    readonly professionId: FieldRef<"professionLevel", 'Int'>
    readonly levelId: FieldRef<"professionLevel", 'Int'>
    readonly minWorking_h: FieldRef<"professionLevel", 'Int'>
    readonly price_h: FieldRef<"professionLevel", 'Int'>
    readonly price_d: FieldRef<"professionLevel", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * professionLevel findUnique
   */
  export type professionLevelFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the professionLevel
     */
    select?: professionLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the professionLevel
     */
    omit?: professionLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: professionLevelInclude<ExtArgs> | null
    /**
     * Filter, which professionLevel to fetch.
     */
    where: professionLevelWhereUniqueInput
  }

  /**
   * professionLevel findUniqueOrThrow
   */
  export type professionLevelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the professionLevel
     */
    select?: professionLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the professionLevel
     */
    omit?: professionLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: professionLevelInclude<ExtArgs> | null
    /**
     * Filter, which professionLevel to fetch.
     */
    where: professionLevelWhereUniqueInput
  }

  /**
   * professionLevel findFirst
   */
  export type professionLevelFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the professionLevel
     */
    select?: professionLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the professionLevel
     */
    omit?: professionLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: professionLevelInclude<ExtArgs> | null
    /**
     * Filter, which professionLevel to fetch.
     */
    where?: professionLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of professionLevels to fetch.
     */
    orderBy?: professionLevelOrderByWithRelationInput | professionLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for professionLevels.
     */
    cursor?: professionLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` professionLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` professionLevels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of professionLevels.
     */
    distinct?: ProfessionLevelScalarFieldEnum | ProfessionLevelScalarFieldEnum[]
  }

  /**
   * professionLevel findFirstOrThrow
   */
  export type professionLevelFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the professionLevel
     */
    select?: professionLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the professionLevel
     */
    omit?: professionLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: professionLevelInclude<ExtArgs> | null
    /**
     * Filter, which professionLevel to fetch.
     */
    where?: professionLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of professionLevels to fetch.
     */
    orderBy?: professionLevelOrderByWithRelationInput | professionLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for professionLevels.
     */
    cursor?: professionLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` professionLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` professionLevels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of professionLevels.
     */
    distinct?: ProfessionLevelScalarFieldEnum | ProfessionLevelScalarFieldEnum[]
  }

  /**
   * professionLevel findMany
   */
  export type professionLevelFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the professionLevel
     */
    select?: professionLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the professionLevel
     */
    omit?: professionLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: professionLevelInclude<ExtArgs> | null
    /**
     * Filter, which professionLevels to fetch.
     */
    where?: professionLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of professionLevels to fetch.
     */
    orderBy?: professionLevelOrderByWithRelationInput | professionLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing professionLevels.
     */
    cursor?: professionLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` professionLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` professionLevels.
     */
    skip?: number
    distinct?: ProfessionLevelScalarFieldEnum | ProfessionLevelScalarFieldEnum[]
  }

  /**
   * professionLevel create
   */
  export type professionLevelCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the professionLevel
     */
    select?: professionLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the professionLevel
     */
    omit?: professionLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: professionLevelInclude<ExtArgs> | null
    /**
     * The data needed to create a professionLevel.
     */
    data: XOR<professionLevelCreateInput, professionLevelUncheckedCreateInput>
  }

  /**
   * professionLevel createMany
   */
  export type professionLevelCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many professionLevels.
     */
    data: professionLevelCreateManyInput | professionLevelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * professionLevel createManyAndReturn
   */
  export type professionLevelCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the professionLevel
     */
    select?: professionLevelSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the professionLevel
     */
    omit?: professionLevelOmit<ExtArgs> | null
    /**
     * The data used to create many professionLevels.
     */
    data: professionLevelCreateManyInput | professionLevelCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: professionLevelIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * professionLevel update
   */
  export type professionLevelUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the professionLevel
     */
    select?: professionLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the professionLevel
     */
    omit?: professionLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: professionLevelInclude<ExtArgs> | null
    /**
     * The data needed to update a professionLevel.
     */
    data: XOR<professionLevelUpdateInput, professionLevelUncheckedUpdateInput>
    /**
     * Choose, which professionLevel to update.
     */
    where: professionLevelWhereUniqueInput
  }

  /**
   * professionLevel updateMany
   */
  export type professionLevelUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update professionLevels.
     */
    data: XOR<professionLevelUpdateManyMutationInput, professionLevelUncheckedUpdateManyInput>
    /**
     * Filter which professionLevels to update
     */
    where?: professionLevelWhereInput
    /**
     * Limit how many professionLevels to update.
     */
    limit?: number
  }

  /**
   * professionLevel updateManyAndReturn
   */
  export type professionLevelUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the professionLevel
     */
    select?: professionLevelSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the professionLevel
     */
    omit?: professionLevelOmit<ExtArgs> | null
    /**
     * The data used to update professionLevels.
     */
    data: XOR<professionLevelUpdateManyMutationInput, professionLevelUncheckedUpdateManyInput>
    /**
     * Filter which professionLevels to update
     */
    where?: professionLevelWhereInput
    /**
     * Limit how many professionLevels to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: professionLevelIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * professionLevel upsert
   */
  export type professionLevelUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the professionLevel
     */
    select?: professionLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the professionLevel
     */
    omit?: professionLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: professionLevelInclude<ExtArgs> | null
    /**
     * The filter to search for the professionLevel to update in case it exists.
     */
    where: professionLevelWhereUniqueInput
    /**
     * In case the professionLevel found by the `where` argument doesn't exist, create a new professionLevel with this data.
     */
    create: XOR<professionLevelCreateInput, professionLevelUncheckedCreateInput>
    /**
     * In case the professionLevel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<professionLevelUpdateInput, professionLevelUncheckedUpdateInput>
  }

  /**
   * professionLevel delete
   */
  export type professionLevelDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the professionLevel
     */
    select?: professionLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the professionLevel
     */
    omit?: professionLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: professionLevelInclude<ExtArgs> | null
    /**
     * Filter which professionLevel to delete.
     */
    where: professionLevelWhereUniqueInput
  }

  /**
   * professionLevel deleteMany
   */
  export type professionLevelDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which professionLevels to delete
     */
    where?: professionLevelWhereInput
    /**
     * Limit how many professionLevels to delete.
     */
    limit?: number
  }

  /**
   * professionLevel without action
   */
  export type professionLevelDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the professionLevel
     */
    select?: professionLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the professionLevel
     */
    omit?: professionLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: professionLevelInclude<ExtArgs> | null
  }


  /**
   * Model Profession
   */

  export type AggregateProfession = {
    _count: ProfessionCountAggregateOutputType | null
    _avg: ProfessionAvgAggregateOutputType | null
    _sum: ProfessionSumAggregateOutputType | null
    _min: ProfessionMinAggregateOutputType | null
    _max: ProfessionMaxAggregateOutputType | null
  }

  export type ProfessionAvgAggregateOutputType = {
    id: number | null
  }

  export type ProfessionSumAggregateOutputType = {
    id: number | null
  }

  export type ProfessionMinAggregateOutputType = {
    id: number | null
    name: string | null
    image: string | null
    isActive: string | null
  }

  export type ProfessionMaxAggregateOutputType = {
    id: number | null
    name: string | null
    image: string | null
    isActive: string | null
  }

  export type ProfessionCountAggregateOutputType = {
    id: number
    name: number
    image: number
    isActive: number
    _all: number
  }


  export type ProfessionAvgAggregateInputType = {
    id?: true
  }

  export type ProfessionSumAggregateInputType = {
    id?: true
  }

  export type ProfessionMinAggregateInputType = {
    id?: true
    name?: true
    image?: true
    isActive?: true
  }

  export type ProfessionMaxAggregateInputType = {
    id?: true
    name?: true
    image?: true
    isActive?: true
  }

  export type ProfessionCountAggregateInputType = {
    id?: true
    name?: true
    image?: true
    isActive?: true
    _all?: true
  }

  export type ProfessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profession to aggregate.
     */
    where?: ProfessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professions to fetch.
     */
    orderBy?: ProfessionOrderByWithRelationInput | ProfessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Professions
    **/
    _count?: true | ProfessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfessionMaxAggregateInputType
  }

  export type GetProfessionAggregateType<T extends ProfessionAggregateArgs> = {
        [P in keyof T & keyof AggregateProfession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfession[P]>
      : GetScalarType<T[P], AggregateProfession[P]>
  }




  export type ProfessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfessionWhereInput
    orderBy?: ProfessionOrderByWithAggregationInput | ProfessionOrderByWithAggregationInput[]
    by: ProfessionScalarFieldEnum[] | ProfessionScalarFieldEnum
    having?: ProfessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfessionCountAggregateInputType | true
    _avg?: ProfessionAvgAggregateInputType
    _sum?: ProfessionSumAggregateInputType
    _min?: ProfessionMinAggregateInputType
    _max?: ProfessionMaxAggregateInputType
  }

  export type ProfessionGroupByOutputType = {
    id: number
    name: string
    image: string
    isActive: string
    _count: ProfessionCountAggregateOutputType | null
    _avg: ProfessionAvgAggregateOutputType | null
    _sum: ProfessionSumAggregateOutputType | null
    _min: ProfessionMinAggregateOutputType | null
    _max: ProfessionMaxAggregateOutputType | null
  }

  type GetProfessionGroupByPayload<T extends ProfessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfessionGroupByOutputType[P]>
            : GetScalarType<T[P], ProfessionGroupByOutputType[P]>
        }
      >
    >


  export type ProfessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    image?: boolean
    isActive?: boolean
    orderProduct?: boolean | Profession$orderProductArgs<ExtArgs>
    masterProfession?: boolean | Profession$masterProfessionArgs<ExtArgs>
    professionLevel?: boolean | Profession$professionLevelArgs<ExtArgs>
    tools?: boolean | Profession$toolsArgs<ExtArgs>
    _count?: boolean | ProfessionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profession"]>

  export type ProfessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    image?: boolean
    isActive?: boolean
  }, ExtArgs["result"]["profession"]>

  export type ProfessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    image?: boolean
    isActive?: boolean
  }, ExtArgs["result"]["profession"]>

  export type ProfessionSelectScalar = {
    id?: boolean
    name?: boolean
    image?: boolean
    isActive?: boolean
  }

  export type ProfessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "image" | "isActive", ExtArgs["result"]["profession"]>
  export type ProfessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orderProduct?: boolean | Profession$orderProductArgs<ExtArgs>
    masterProfession?: boolean | Profession$masterProfessionArgs<ExtArgs>
    professionLevel?: boolean | Profession$professionLevelArgs<ExtArgs>
    tools?: boolean | Profession$toolsArgs<ExtArgs>
    _count?: boolean | ProfessionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProfessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ProfessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ProfessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Profession"
    objects: {
      orderProduct: Prisma.$orderProductPayload<ExtArgs>[]
      masterProfession: Prisma.$masterProfessionsPayload<ExtArgs>[]
      professionLevel: Prisma.$professionLevelPayload<ExtArgs>[]
      tools: Prisma.$ToolsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      image: string
      isActive: string
    }, ExtArgs["result"]["profession"]>
    composites: {}
  }

  type ProfessionGetPayload<S extends boolean | null | undefined | ProfessionDefaultArgs> = $Result.GetResult<Prisma.$ProfessionPayload, S>

  type ProfessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProfessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProfessionCountAggregateInputType | true
    }

  export interface ProfessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Profession'], meta: { name: 'Profession' } }
    /**
     * Find zero or one Profession that matches the filter.
     * @param {ProfessionFindUniqueArgs} args - Arguments to find a Profession
     * @example
     * // Get one Profession
     * const profession = await prisma.profession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProfessionFindUniqueArgs>(args: SelectSubset<T, ProfessionFindUniqueArgs<ExtArgs>>): Prisma__ProfessionClient<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Profession that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProfessionFindUniqueOrThrowArgs} args - Arguments to find a Profession
     * @example
     * // Get one Profession
     * const profession = await prisma.profession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProfessionFindUniqueOrThrowArgs>(args: SelectSubset<T, ProfessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProfessionClient<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Profession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionFindFirstArgs} args - Arguments to find a Profession
     * @example
     * // Get one Profession
     * const profession = await prisma.profession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProfessionFindFirstArgs>(args?: SelectSubset<T, ProfessionFindFirstArgs<ExtArgs>>): Prisma__ProfessionClient<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Profession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionFindFirstOrThrowArgs} args - Arguments to find a Profession
     * @example
     * // Get one Profession
     * const profession = await prisma.profession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProfessionFindFirstOrThrowArgs>(args?: SelectSubset<T, ProfessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProfessionClient<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Professions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Professions
     * const professions = await prisma.profession.findMany()
     * 
     * // Get first 10 Professions
     * const professions = await prisma.profession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const professionWithIdOnly = await prisma.profession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProfessionFindManyArgs>(args?: SelectSubset<T, ProfessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Profession.
     * @param {ProfessionCreateArgs} args - Arguments to create a Profession.
     * @example
     * // Create one Profession
     * const Profession = await prisma.profession.create({
     *   data: {
     *     // ... data to create a Profession
     *   }
     * })
     * 
     */
    create<T extends ProfessionCreateArgs>(args: SelectSubset<T, ProfessionCreateArgs<ExtArgs>>): Prisma__ProfessionClient<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Professions.
     * @param {ProfessionCreateManyArgs} args - Arguments to create many Professions.
     * @example
     * // Create many Professions
     * const profession = await prisma.profession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProfessionCreateManyArgs>(args?: SelectSubset<T, ProfessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Professions and returns the data saved in the database.
     * @param {ProfessionCreateManyAndReturnArgs} args - Arguments to create many Professions.
     * @example
     * // Create many Professions
     * const profession = await prisma.profession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Professions and only return the `id`
     * const professionWithIdOnly = await prisma.profession.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProfessionCreateManyAndReturnArgs>(args?: SelectSubset<T, ProfessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Profession.
     * @param {ProfessionDeleteArgs} args - Arguments to delete one Profession.
     * @example
     * // Delete one Profession
     * const Profession = await prisma.profession.delete({
     *   where: {
     *     // ... filter to delete one Profession
     *   }
     * })
     * 
     */
    delete<T extends ProfessionDeleteArgs>(args: SelectSubset<T, ProfessionDeleteArgs<ExtArgs>>): Prisma__ProfessionClient<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Profession.
     * @param {ProfessionUpdateArgs} args - Arguments to update one Profession.
     * @example
     * // Update one Profession
     * const profession = await prisma.profession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProfessionUpdateArgs>(args: SelectSubset<T, ProfessionUpdateArgs<ExtArgs>>): Prisma__ProfessionClient<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Professions.
     * @param {ProfessionDeleteManyArgs} args - Arguments to filter Professions to delete.
     * @example
     * // Delete a few Professions
     * const { count } = await prisma.profession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProfessionDeleteManyArgs>(args?: SelectSubset<T, ProfessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Professions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Professions
     * const profession = await prisma.profession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProfessionUpdateManyArgs>(args: SelectSubset<T, ProfessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Professions and returns the data updated in the database.
     * @param {ProfessionUpdateManyAndReturnArgs} args - Arguments to update many Professions.
     * @example
     * // Update many Professions
     * const profession = await prisma.profession.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Professions and only return the `id`
     * const professionWithIdOnly = await prisma.profession.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProfessionUpdateManyAndReturnArgs>(args: SelectSubset<T, ProfessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Profession.
     * @param {ProfessionUpsertArgs} args - Arguments to update or create a Profession.
     * @example
     * // Update or create a Profession
     * const profession = await prisma.profession.upsert({
     *   create: {
     *     // ... data to create a Profession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profession we want to update
     *   }
     * })
     */
    upsert<T extends ProfessionUpsertArgs>(args: SelectSubset<T, ProfessionUpsertArgs<ExtArgs>>): Prisma__ProfessionClient<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Professions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionCountArgs} args - Arguments to filter Professions to count.
     * @example
     * // Count the number of Professions
     * const count = await prisma.profession.count({
     *   where: {
     *     // ... the filter for the Professions we want to count
     *   }
     * })
    **/
    count<T extends ProfessionCountArgs>(
      args?: Subset<T, ProfessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfessionAggregateArgs>(args: Subset<T, ProfessionAggregateArgs>): Prisma.PrismaPromise<GetProfessionAggregateType<T>>

    /**
     * Group by Profession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfessionGroupByArgs['orderBy'] }
        : { orderBy?: ProfessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Profession model
   */
  readonly fields: ProfessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Profession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    orderProduct<T extends Profession$orderProductArgs<ExtArgs> = {}>(args?: Subset<T, Profession$orderProductArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$orderProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    masterProfession<T extends Profession$masterProfessionArgs<ExtArgs> = {}>(args?: Subset<T, Profession$masterProfessionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$masterProfessionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    professionLevel<T extends Profession$professionLevelArgs<ExtArgs> = {}>(args?: Subset<T, Profession$professionLevelArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$professionLevelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tools<T extends Profession$toolsArgs<ExtArgs> = {}>(args?: Subset<T, Profession$toolsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ToolsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Profession model
   */
  interface ProfessionFieldRefs {
    readonly id: FieldRef<"Profession", 'Int'>
    readonly name: FieldRef<"Profession", 'String'>
    readonly image: FieldRef<"Profession", 'String'>
    readonly isActive: FieldRef<"Profession", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Profession findUnique
   */
  export type ProfessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
    /**
     * Filter, which Profession to fetch.
     */
    where: ProfessionWhereUniqueInput
  }

  /**
   * Profession findUniqueOrThrow
   */
  export type ProfessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
    /**
     * Filter, which Profession to fetch.
     */
    where: ProfessionWhereUniqueInput
  }

  /**
   * Profession findFirst
   */
  export type ProfessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
    /**
     * Filter, which Profession to fetch.
     */
    where?: ProfessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professions to fetch.
     */
    orderBy?: ProfessionOrderByWithRelationInput | ProfessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Professions.
     */
    cursor?: ProfessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Professions.
     */
    distinct?: ProfessionScalarFieldEnum | ProfessionScalarFieldEnum[]
  }

  /**
   * Profession findFirstOrThrow
   */
  export type ProfessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
    /**
     * Filter, which Profession to fetch.
     */
    where?: ProfessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professions to fetch.
     */
    orderBy?: ProfessionOrderByWithRelationInput | ProfessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Professions.
     */
    cursor?: ProfessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Professions.
     */
    distinct?: ProfessionScalarFieldEnum | ProfessionScalarFieldEnum[]
  }

  /**
   * Profession findMany
   */
  export type ProfessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
    /**
     * Filter, which Professions to fetch.
     */
    where?: ProfessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professions to fetch.
     */
    orderBy?: ProfessionOrderByWithRelationInput | ProfessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Professions.
     */
    cursor?: ProfessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professions.
     */
    skip?: number
    distinct?: ProfessionScalarFieldEnum | ProfessionScalarFieldEnum[]
  }

  /**
   * Profession create
   */
  export type ProfessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Profession.
     */
    data: XOR<ProfessionCreateInput, ProfessionUncheckedCreateInput>
  }

  /**
   * Profession createMany
   */
  export type ProfessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Professions.
     */
    data: ProfessionCreateManyInput | ProfessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Profession createManyAndReturn
   */
  export type ProfessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * The data used to create many Professions.
     */
    data: ProfessionCreateManyInput | ProfessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Profession update
   */
  export type ProfessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Profession.
     */
    data: XOR<ProfessionUpdateInput, ProfessionUncheckedUpdateInput>
    /**
     * Choose, which Profession to update.
     */
    where: ProfessionWhereUniqueInput
  }

  /**
   * Profession updateMany
   */
  export type ProfessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Professions.
     */
    data: XOR<ProfessionUpdateManyMutationInput, ProfessionUncheckedUpdateManyInput>
    /**
     * Filter which Professions to update
     */
    where?: ProfessionWhereInput
    /**
     * Limit how many Professions to update.
     */
    limit?: number
  }

  /**
   * Profession updateManyAndReturn
   */
  export type ProfessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * The data used to update Professions.
     */
    data: XOR<ProfessionUpdateManyMutationInput, ProfessionUncheckedUpdateManyInput>
    /**
     * Filter which Professions to update
     */
    where?: ProfessionWhereInput
    /**
     * Limit how many Professions to update.
     */
    limit?: number
  }

  /**
   * Profession upsert
   */
  export type ProfessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Profession to update in case it exists.
     */
    where: ProfessionWhereUniqueInput
    /**
     * In case the Profession found by the `where` argument doesn't exist, create a new Profession with this data.
     */
    create: XOR<ProfessionCreateInput, ProfessionUncheckedCreateInput>
    /**
     * In case the Profession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfessionUpdateInput, ProfessionUncheckedUpdateInput>
  }

  /**
   * Profession delete
   */
  export type ProfessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
    /**
     * Filter which Profession to delete.
     */
    where: ProfessionWhereUniqueInput
  }

  /**
   * Profession deleteMany
   */
  export type ProfessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Professions to delete
     */
    where?: ProfessionWhereInput
    /**
     * Limit how many Professions to delete.
     */
    limit?: number
  }

  /**
   * Profession.orderProduct
   */
  export type Profession$orderProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderProduct
     */
    select?: orderProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orderProduct
     */
    omit?: orderProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderProductInclude<ExtArgs> | null
    where?: orderProductWhereInput
    orderBy?: orderProductOrderByWithRelationInput | orderProductOrderByWithRelationInput[]
    cursor?: orderProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderProductScalarFieldEnum | OrderProductScalarFieldEnum[]
  }

  /**
   * Profession.masterProfession
   */
  export type Profession$masterProfessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the masterProfessions
     */
    select?: masterProfessionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the masterProfessions
     */
    omit?: masterProfessionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: masterProfessionsInclude<ExtArgs> | null
    where?: masterProfessionsWhereInput
    orderBy?: masterProfessionsOrderByWithRelationInput | masterProfessionsOrderByWithRelationInput[]
    cursor?: masterProfessionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MasterProfessionsScalarFieldEnum | MasterProfessionsScalarFieldEnum[]
  }

  /**
   * Profession.professionLevel
   */
  export type Profession$professionLevelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the professionLevel
     */
    select?: professionLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the professionLevel
     */
    omit?: professionLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: professionLevelInclude<ExtArgs> | null
    where?: professionLevelWhereInput
    orderBy?: professionLevelOrderByWithRelationInput | professionLevelOrderByWithRelationInput[]
    cursor?: professionLevelWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfessionLevelScalarFieldEnum | ProfessionLevelScalarFieldEnum[]
  }

  /**
   * Profession.tools
   */
  export type Profession$toolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tools
     */
    select?: ToolsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tools
     */
    omit?: ToolsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolsInclude<ExtArgs> | null
    where?: ToolsWhereInput
    orderBy?: ToolsOrderByWithRelationInput | ToolsOrderByWithRelationInput[]
    cursor?: ToolsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ToolsScalarFieldEnum | ToolsScalarFieldEnum[]
  }

  /**
   * Profession without action
   */
  export type ProfessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
  }


  /**
   * Model Tools
   */

  export type AggregateTools = {
    _count: ToolsCountAggregateOutputType | null
    _avg: ToolsAvgAggregateOutputType | null
    _sum: ToolsSumAggregateOutputType | null
    _min: ToolsMinAggregateOutputType | null
    _max: ToolsMaxAggregateOutputType | null
  }

  export type ToolsAvgAggregateOutputType = {
    id: number | null
    price_h: number | null
    price_d: number | null
    quantity: number | null
    code: number | null
    brandId: number | null
    powerId: number | null
    sizeId: number | null
  }

  export type ToolsSumAggregateOutputType = {
    id: number | null
    price_h: number | null
    price_d: number | null
    quantity: number | null
    code: number | null
    brandId: number | null
    powerId: number | null
    sizeId: number | null
  }

  export type ToolsMinAggregateOutputType = {
    id: number | null
    name: string | null
    desc: string | null
    price_h: number | null
    price_d: number | null
    quantity: number | null
    code: number | null
    brandId: number | null
    isActive: boolean | null
    powerId: number | null
    sizeId: number | null
    image: string | null
  }

  export type ToolsMaxAggregateOutputType = {
    id: number | null
    name: string | null
    desc: string | null
    price_h: number | null
    price_d: number | null
    quantity: number | null
    code: number | null
    brandId: number | null
    isActive: boolean | null
    powerId: number | null
    sizeId: number | null
    image: string | null
  }

  export type ToolsCountAggregateOutputType = {
    id: number
    name: number
    desc: number
    price_h: number
    price_d: number
    quantity: number
    code: number
    brandId: number
    isActive: number
    powerId: number
    sizeId: number
    image: number
    _all: number
  }


  export type ToolsAvgAggregateInputType = {
    id?: true
    price_h?: true
    price_d?: true
    quantity?: true
    code?: true
    brandId?: true
    powerId?: true
    sizeId?: true
  }

  export type ToolsSumAggregateInputType = {
    id?: true
    price_h?: true
    price_d?: true
    quantity?: true
    code?: true
    brandId?: true
    powerId?: true
    sizeId?: true
  }

  export type ToolsMinAggregateInputType = {
    id?: true
    name?: true
    desc?: true
    price_h?: true
    price_d?: true
    quantity?: true
    code?: true
    brandId?: true
    isActive?: true
    powerId?: true
    sizeId?: true
    image?: true
  }

  export type ToolsMaxAggregateInputType = {
    id?: true
    name?: true
    desc?: true
    price_h?: true
    price_d?: true
    quantity?: true
    code?: true
    brandId?: true
    isActive?: true
    powerId?: true
    sizeId?: true
    image?: true
  }

  export type ToolsCountAggregateInputType = {
    id?: true
    name?: true
    desc?: true
    price_h?: true
    price_d?: true
    quantity?: true
    code?: true
    brandId?: true
    isActive?: true
    powerId?: true
    sizeId?: true
    image?: true
    _all?: true
  }

  export type ToolsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tools to aggregate.
     */
    where?: ToolsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tools to fetch.
     */
    orderBy?: ToolsOrderByWithRelationInput | ToolsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ToolsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tools
    **/
    _count?: true | ToolsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ToolsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ToolsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ToolsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ToolsMaxAggregateInputType
  }

  export type GetToolsAggregateType<T extends ToolsAggregateArgs> = {
        [P in keyof T & keyof AggregateTools]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTools[P]>
      : GetScalarType<T[P], AggregateTools[P]>
  }




  export type ToolsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ToolsWhereInput
    orderBy?: ToolsOrderByWithAggregationInput | ToolsOrderByWithAggregationInput[]
    by: ToolsScalarFieldEnum[] | ToolsScalarFieldEnum
    having?: ToolsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ToolsCountAggregateInputType | true
    _avg?: ToolsAvgAggregateInputType
    _sum?: ToolsSumAggregateInputType
    _min?: ToolsMinAggregateInputType
    _max?: ToolsMaxAggregateInputType
  }

  export type ToolsGroupByOutputType = {
    id: number
    name: string
    desc: string
    price_h: number
    price_d: number
    quantity: number
    code: number
    brandId: number | null
    isActive: boolean
    powerId: number | null
    sizeId: number | null
    image: string
    _count: ToolsCountAggregateOutputType | null
    _avg: ToolsAvgAggregateOutputType | null
    _sum: ToolsSumAggregateOutputType | null
    _min: ToolsMinAggregateOutputType | null
    _max: ToolsMaxAggregateOutputType | null
  }

  type GetToolsGroupByPayload<T extends ToolsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ToolsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ToolsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ToolsGroupByOutputType[P]>
            : GetScalarType<T[P], ToolsGroupByOutputType[P]>
        }
      >
    >


  export type ToolsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    desc?: boolean
    price_h?: boolean
    price_d?: boolean
    quantity?: boolean
    code?: boolean
    brandId?: boolean
    isActive?: boolean
    powerId?: boolean
    sizeId?: boolean
    image?: boolean
    orderProduct?: boolean | Tools$orderProductArgs<ExtArgs>
    professions?: boolean | Tools$professionsArgs<ExtArgs>
    brand?: boolean | Tools$brandArgs<ExtArgs>
    power?: boolean | Tools$powerArgs<ExtArgs>
    size?: boolean | Tools$sizeArgs<ExtArgs>
    _count?: boolean | ToolsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tools"]>

  export type ToolsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    desc?: boolean
    price_h?: boolean
    price_d?: boolean
    quantity?: boolean
    code?: boolean
    brandId?: boolean
    isActive?: boolean
    powerId?: boolean
    sizeId?: boolean
    image?: boolean
    brand?: boolean | Tools$brandArgs<ExtArgs>
    power?: boolean | Tools$powerArgs<ExtArgs>
    size?: boolean | Tools$sizeArgs<ExtArgs>
  }, ExtArgs["result"]["tools"]>

  export type ToolsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    desc?: boolean
    price_h?: boolean
    price_d?: boolean
    quantity?: boolean
    code?: boolean
    brandId?: boolean
    isActive?: boolean
    powerId?: boolean
    sizeId?: boolean
    image?: boolean
    brand?: boolean | Tools$brandArgs<ExtArgs>
    power?: boolean | Tools$powerArgs<ExtArgs>
    size?: boolean | Tools$sizeArgs<ExtArgs>
  }, ExtArgs["result"]["tools"]>

  export type ToolsSelectScalar = {
    id?: boolean
    name?: boolean
    desc?: boolean
    price_h?: boolean
    price_d?: boolean
    quantity?: boolean
    code?: boolean
    brandId?: boolean
    isActive?: boolean
    powerId?: boolean
    sizeId?: boolean
    image?: boolean
  }

  export type ToolsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "desc" | "price_h" | "price_d" | "quantity" | "code" | "brandId" | "isActive" | "powerId" | "sizeId" | "image", ExtArgs["result"]["tools"]>
  export type ToolsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orderProduct?: boolean | Tools$orderProductArgs<ExtArgs>
    professions?: boolean | Tools$professionsArgs<ExtArgs>
    brand?: boolean | Tools$brandArgs<ExtArgs>
    power?: boolean | Tools$powerArgs<ExtArgs>
    size?: boolean | Tools$sizeArgs<ExtArgs>
    _count?: boolean | ToolsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ToolsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brand?: boolean | Tools$brandArgs<ExtArgs>
    power?: boolean | Tools$powerArgs<ExtArgs>
    size?: boolean | Tools$sizeArgs<ExtArgs>
  }
  export type ToolsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brand?: boolean | Tools$brandArgs<ExtArgs>
    power?: boolean | Tools$powerArgs<ExtArgs>
    size?: boolean | Tools$sizeArgs<ExtArgs>
  }

  export type $ToolsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tools"
    objects: {
      orderProduct: Prisma.$orderProductPayload<ExtArgs>[]
      professions: Prisma.$ProfessionPayload<ExtArgs>[]
      brand: Prisma.$BrandPayload<ExtArgs> | null
      power: Prisma.$PowerPayload<ExtArgs> | null
      size: Prisma.$SizePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      desc: string
      price_h: number
      price_d: number
      quantity: number
      code: number
      brandId: number | null
      isActive: boolean
      powerId: number | null
      sizeId: number | null
      image: string
    }, ExtArgs["result"]["tools"]>
    composites: {}
  }

  type ToolsGetPayload<S extends boolean | null | undefined | ToolsDefaultArgs> = $Result.GetResult<Prisma.$ToolsPayload, S>

  type ToolsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ToolsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ToolsCountAggregateInputType | true
    }

  export interface ToolsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tools'], meta: { name: 'Tools' } }
    /**
     * Find zero or one Tools that matches the filter.
     * @param {ToolsFindUniqueArgs} args - Arguments to find a Tools
     * @example
     * // Get one Tools
     * const tools = await prisma.tools.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ToolsFindUniqueArgs>(args: SelectSubset<T, ToolsFindUniqueArgs<ExtArgs>>): Prisma__ToolsClient<$Result.GetResult<Prisma.$ToolsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Tools that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ToolsFindUniqueOrThrowArgs} args - Arguments to find a Tools
     * @example
     * // Get one Tools
     * const tools = await prisma.tools.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ToolsFindUniqueOrThrowArgs>(args: SelectSubset<T, ToolsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ToolsClient<$Result.GetResult<Prisma.$ToolsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tools that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToolsFindFirstArgs} args - Arguments to find a Tools
     * @example
     * // Get one Tools
     * const tools = await prisma.tools.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ToolsFindFirstArgs>(args?: SelectSubset<T, ToolsFindFirstArgs<ExtArgs>>): Prisma__ToolsClient<$Result.GetResult<Prisma.$ToolsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tools that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToolsFindFirstOrThrowArgs} args - Arguments to find a Tools
     * @example
     * // Get one Tools
     * const tools = await prisma.tools.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ToolsFindFirstOrThrowArgs>(args?: SelectSubset<T, ToolsFindFirstOrThrowArgs<ExtArgs>>): Prisma__ToolsClient<$Result.GetResult<Prisma.$ToolsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tools that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToolsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tools
     * const tools = await prisma.tools.findMany()
     * 
     * // Get first 10 Tools
     * const tools = await prisma.tools.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const toolsWithIdOnly = await prisma.tools.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ToolsFindManyArgs>(args?: SelectSubset<T, ToolsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ToolsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Tools.
     * @param {ToolsCreateArgs} args - Arguments to create a Tools.
     * @example
     * // Create one Tools
     * const Tools = await prisma.tools.create({
     *   data: {
     *     // ... data to create a Tools
     *   }
     * })
     * 
     */
    create<T extends ToolsCreateArgs>(args: SelectSubset<T, ToolsCreateArgs<ExtArgs>>): Prisma__ToolsClient<$Result.GetResult<Prisma.$ToolsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tools.
     * @param {ToolsCreateManyArgs} args - Arguments to create many Tools.
     * @example
     * // Create many Tools
     * const tools = await prisma.tools.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ToolsCreateManyArgs>(args?: SelectSubset<T, ToolsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tools and returns the data saved in the database.
     * @param {ToolsCreateManyAndReturnArgs} args - Arguments to create many Tools.
     * @example
     * // Create many Tools
     * const tools = await prisma.tools.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tools and only return the `id`
     * const toolsWithIdOnly = await prisma.tools.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ToolsCreateManyAndReturnArgs>(args?: SelectSubset<T, ToolsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ToolsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Tools.
     * @param {ToolsDeleteArgs} args - Arguments to delete one Tools.
     * @example
     * // Delete one Tools
     * const Tools = await prisma.tools.delete({
     *   where: {
     *     // ... filter to delete one Tools
     *   }
     * })
     * 
     */
    delete<T extends ToolsDeleteArgs>(args: SelectSubset<T, ToolsDeleteArgs<ExtArgs>>): Prisma__ToolsClient<$Result.GetResult<Prisma.$ToolsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Tools.
     * @param {ToolsUpdateArgs} args - Arguments to update one Tools.
     * @example
     * // Update one Tools
     * const tools = await prisma.tools.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ToolsUpdateArgs>(args: SelectSubset<T, ToolsUpdateArgs<ExtArgs>>): Prisma__ToolsClient<$Result.GetResult<Prisma.$ToolsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tools.
     * @param {ToolsDeleteManyArgs} args - Arguments to filter Tools to delete.
     * @example
     * // Delete a few Tools
     * const { count } = await prisma.tools.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ToolsDeleteManyArgs>(args?: SelectSubset<T, ToolsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToolsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tools
     * const tools = await prisma.tools.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ToolsUpdateManyArgs>(args: SelectSubset<T, ToolsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tools and returns the data updated in the database.
     * @param {ToolsUpdateManyAndReturnArgs} args - Arguments to update many Tools.
     * @example
     * // Update many Tools
     * const tools = await prisma.tools.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tools and only return the `id`
     * const toolsWithIdOnly = await prisma.tools.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ToolsUpdateManyAndReturnArgs>(args: SelectSubset<T, ToolsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ToolsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Tools.
     * @param {ToolsUpsertArgs} args - Arguments to update or create a Tools.
     * @example
     * // Update or create a Tools
     * const tools = await prisma.tools.upsert({
     *   create: {
     *     // ... data to create a Tools
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tools we want to update
     *   }
     * })
     */
    upsert<T extends ToolsUpsertArgs>(args: SelectSubset<T, ToolsUpsertArgs<ExtArgs>>): Prisma__ToolsClient<$Result.GetResult<Prisma.$ToolsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToolsCountArgs} args - Arguments to filter Tools to count.
     * @example
     * // Count the number of Tools
     * const count = await prisma.tools.count({
     *   where: {
     *     // ... the filter for the Tools we want to count
     *   }
     * })
    **/
    count<T extends ToolsCountArgs>(
      args?: Subset<T, ToolsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ToolsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToolsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ToolsAggregateArgs>(args: Subset<T, ToolsAggregateArgs>): Prisma.PrismaPromise<GetToolsAggregateType<T>>

    /**
     * Group by Tools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToolsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ToolsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ToolsGroupByArgs['orderBy'] }
        : { orderBy?: ToolsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ToolsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetToolsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tools model
   */
  readonly fields: ToolsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tools.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ToolsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    orderProduct<T extends Tools$orderProductArgs<ExtArgs> = {}>(args?: Subset<T, Tools$orderProductArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$orderProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    professions<T extends Tools$professionsArgs<ExtArgs> = {}>(args?: Subset<T, Tools$professionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    brand<T extends Tools$brandArgs<ExtArgs> = {}>(args?: Subset<T, Tools$brandArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    power<T extends Tools$powerArgs<ExtArgs> = {}>(args?: Subset<T, Tools$powerArgs<ExtArgs>>): Prisma__PowerClient<$Result.GetResult<Prisma.$PowerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    size<T extends Tools$sizeArgs<ExtArgs> = {}>(args?: Subset<T, Tools$sizeArgs<ExtArgs>>): Prisma__SizeClient<$Result.GetResult<Prisma.$SizePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tools model
   */
  interface ToolsFieldRefs {
    readonly id: FieldRef<"Tools", 'Int'>
    readonly name: FieldRef<"Tools", 'String'>
    readonly desc: FieldRef<"Tools", 'String'>
    readonly price_h: FieldRef<"Tools", 'Float'>
    readonly price_d: FieldRef<"Tools", 'Float'>
    readonly quantity: FieldRef<"Tools", 'Int'>
    readonly code: FieldRef<"Tools", 'Int'>
    readonly brandId: FieldRef<"Tools", 'Int'>
    readonly isActive: FieldRef<"Tools", 'Boolean'>
    readonly powerId: FieldRef<"Tools", 'Int'>
    readonly sizeId: FieldRef<"Tools", 'Int'>
    readonly image: FieldRef<"Tools", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Tools findUnique
   */
  export type ToolsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tools
     */
    select?: ToolsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tools
     */
    omit?: ToolsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolsInclude<ExtArgs> | null
    /**
     * Filter, which Tools to fetch.
     */
    where: ToolsWhereUniqueInput
  }

  /**
   * Tools findUniqueOrThrow
   */
  export type ToolsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tools
     */
    select?: ToolsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tools
     */
    omit?: ToolsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolsInclude<ExtArgs> | null
    /**
     * Filter, which Tools to fetch.
     */
    where: ToolsWhereUniqueInput
  }

  /**
   * Tools findFirst
   */
  export type ToolsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tools
     */
    select?: ToolsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tools
     */
    omit?: ToolsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolsInclude<ExtArgs> | null
    /**
     * Filter, which Tools to fetch.
     */
    where?: ToolsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tools to fetch.
     */
    orderBy?: ToolsOrderByWithRelationInput | ToolsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tools.
     */
    cursor?: ToolsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tools.
     */
    distinct?: ToolsScalarFieldEnum | ToolsScalarFieldEnum[]
  }

  /**
   * Tools findFirstOrThrow
   */
  export type ToolsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tools
     */
    select?: ToolsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tools
     */
    omit?: ToolsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolsInclude<ExtArgs> | null
    /**
     * Filter, which Tools to fetch.
     */
    where?: ToolsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tools to fetch.
     */
    orderBy?: ToolsOrderByWithRelationInput | ToolsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tools.
     */
    cursor?: ToolsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tools.
     */
    distinct?: ToolsScalarFieldEnum | ToolsScalarFieldEnum[]
  }

  /**
   * Tools findMany
   */
  export type ToolsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tools
     */
    select?: ToolsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tools
     */
    omit?: ToolsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolsInclude<ExtArgs> | null
    /**
     * Filter, which Tools to fetch.
     */
    where?: ToolsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tools to fetch.
     */
    orderBy?: ToolsOrderByWithRelationInput | ToolsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tools.
     */
    cursor?: ToolsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tools.
     */
    skip?: number
    distinct?: ToolsScalarFieldEnum | ToolsScalarFieldEnum[]
  }

  /**
   * Tools create
   */
  export type ToolsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tools
     */
    select?: ToolsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tools
     */
    omit?: ToolsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolsInclude<ExtArgs> | null
    /**
     * The data needed to create a Tools.
     */
    data: XOR<ToolsCreateInput, ToolsUncheckedCreateInput>
  }

  /**
   * Tools createMany
   */
  export type ToolsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tools.
     */
    data: ToolsCreateManyInput | ToolsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tools createManyAndReturn
   */
  export type ToolsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tools
     */
    select?: ToolsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tools
     */
    omit?: ToolsOmit<ExtArgs> | null
    /**
     * The data used to create many Tools.
     */
    data: ToolsCreateManyInput | ToolsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Tools update
   */
  export type ToolsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tools
     */
    select?: ToolsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tools
     */
    omit?: ToolsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolsInclude<ExtArgs> | null
    /**
     * The data needed to update a Tools.
     */
    data: XOR<ToolsUpdateInput, ToolsUncheckedUpdateInput>
    /**
     * Choose, which Tools to update.
     */
    where: ToolsWhereUniqueInput
  }

  /**
   * Tools updateMany
   */
  export type ToolsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tools.
     */
    data: XOR<ToolsUpdateManyMutationInput, ToolsUncheckedUpdateManyInput>
    /**
     * Filter which Tools to update
     */
    where?: ToolsWhereInput
    /**
     * Limit how many Tools to update.
     */
    limit?: number
  }

  /**
   * Tools updateManyAndReturn
   */
  export type ToolsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tools
     */
    select?: ToolsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tools
     */
    omit?: ToolsOmit<ExtArgs> | null
    /**
     * The data used to update Tools.
     */
    data: XOR<ToolsUpdateManyMutationInput, ToolsUncheckedUpdateManyInput>
    /**
     * Filter which Tools to update
     */
    where?: ToolsWhereInput
    /**
     * Limit how many Tools to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Tools upsert
   */
  export type ToolsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tools
     */
    select?: ToolsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tools
     */
    omit?: ToolsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolsInclude<ExtArgs> | null
    /**
     * The filter to search for the Tools to update in case it exists.
     */
    where: ToolsWhereUniqueInput
    /**
     * In case the Tools found by the `where` argument doesn't exist, create a new Tools with this data.
     */
    create: XOR<ToolsCreateInput, ToolsUncheckedCreateInput>
    /**
     * In case the Tools was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ToolsUpdateInput, ToolsUncheckedUpdateInput>
  }

  /**
   * Tools delete
   */
  export type ToolsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tools
     */
    select?: ToolsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tools
     */
    omit?: ToolsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolsInclude<ExtArgs> | null
    /**
     * Filter which Tools to delete.
     */
    where: ToolsWhereUniqueInput
  }

  /**
   * Tools deleteMany
   */
  export type ToolsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tools to delete
     */
    where?: ToolsWhereInput
    /**
     * Limit how many Tools to delete.
     */
    limit?: number
  }

  /**
   * Tools.orderProduct
   */
  export type Tools$orderProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderProduct
     */
    select?: orderProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orderProduct
     */
    omit?: orderProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderProductInclude<ExtArgs> | null
    where?: orderProductWhereInput
    orderBy?: orderProductOrderByWithRelationInput | orderProductOrderByWithRelationInput[]
    cursor?: orderProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderProductScalarFieldEnum | OrderProductScalarFieldEnum[]
  }

  /**
   * Tools.professions
   */
  export type Tools$professionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
    where?: ProfessionWhereInput
    orderBy?: ProfessionOrderByWithRelationInput | ProfessionOrderByWithRelationInput[]
    cursor?: ProfessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfessionScalarFieldEnum | ProfessionScalarFieldEnum[]
  }

  /**
   * Tools.brand
   */
  export type Tools$brandArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    where?: BrandWhereInput
  }

  /**
   * Tools.power
   */
  export type Tools$powerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Power
     */
    select?: PowerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Power
     */
    omit?: PowerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PowerInclude<ExtArgs> | null
    where?: PowerWhereInput
  }

  /**
   * Tools.size
   */
  export type Tools$sizeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Size
     */
    select?: SizeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Size
     */
    omit?: SizeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeInclude<ExtArgs> | null
    where?: SizeWhereInput
  }

  /**
   * Tools without action
   */
  export type ToolsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tools
     */
    select?: ToolsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tools
     */
    omit?: ToolsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolsInclude<ExtArgs> | null
  }


  /**
   * Model Order
   */

  export type AggregateOrder = {
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  export type OrderAvgAggregateOutputType = {
    id: number | null
    total: number | null
    userId: number | null
  }

  export type OrderSumAggregateOutputType = {
    id: number | null
    total: number | null
    userId: number | null
  }

  export type OrderMinAggregateOutputType = {
    id: number | null
    total: number | null
    location: string | null
    address: string | null
    date: Date | null
    pay_type: string | null
    withDelivery: boolean | null
    status: string | null
    instruction: string | null
    userId: number | null
  }

  export type OrderMaxAggregateOutputType = {
    id: number | null
    total: number | null
    location: string | null
    address: string | null
    date: Date | null
    pay_type: string | null
    withDelivery: boolean | null
    status: string | null
    instruction: string | null
    userId: number | null
  }

  export type OrderCountAggregateOutputType = {
    id: number
    total: number
    location: number
    address: number
    date: number
    pay_type: number
    withDelivery: number
    status: number
    instruction: number
    userId: number
    _all: number
  }


  export type OrderAvgAggregateInputType = {
    id?: true
    total?: true
    userId?: true
  }

  export type OrderSumAggregateInputType = {
    id?: true
    total?: true
    userId?: true
  }

  export type OrderMinAggregateInputType = {
    id?: true
    total?: true
    location?: true
    address?: true
    date?: true
    pay_type?: true
    withDelivery?: true
    status?: true
    instruction?: true
    userId?: true
  }

  export type OrderMaxAggregateInputType = {
    id?: true
    total?: true
    location?: true
    address?: true
    date?: true
    pay_type?: true
    withDelivery?: true
    status?: true
    instruction?: true
    userId?: true
  }

  export type OrderCountAggregateInputType = {
    id?: true
    total?: true
    location?: true
    address?: true
    date?: true
    pay_type?: true
    withDelivery?: true
    status?: true
    instruction?: true
    userId?: true
    _all?: true
  }

  export type OrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Order to aggregate.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Orders
    **/
    _count?: true | OrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderMaxAggregateInputType
  }

  export type GetOrderAggregateType<T extends OrderAggregateArgs> = {
        [P in keyof T & keyof AggregateOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder[P]>
      : GetScalarType<T[P], AggregateOrder[P]>
  }




  export type OrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithAggregationInput | OrderOrderByWithAggregationInput[]
    by: OrderScalarFieldEnum[] | OrderScalarFieldEnum
    having?: OrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderCountAggregateInputType | true
    _avg?: OrderAvgAggregateInputType
    _sum?: OrderSumAggregateInputType
    _min?: OrderMinAggregateInputType
    _max?: OrderMaxAggregateInputType
  }

  export type OrderGroupByOutputType = {
    id: number
    total: number
    location: string
    address: string
    date: Date
    pay_type: string
    withDelivery: boolean
    status: string
    instruction: string
    userId: number
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  type GetOrderGroupByPayload<T extends OrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderGroupByOutputType[P]>
            : GetScalarType<T[P], OrderGroupByOutputType[P]>
        }
      >
    >


  export type OrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    total?: boolean
    location?: boolean
    address?: boolean
    date?: boolean
    pay_type?: boolean
    withDelivery?: boolean
    status?: boolean
    instruction?: boolean
    userId?: boolean
    orderProduct?: boolean | Order$orderProductArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    total?: boolean
    location?: boolean
    address?: boolean
    date?: boolean
    pay_type?: boolean
    withDelivery?: boolean
    status?: boolean
    instruction?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    total?: boolean
    location?: boolean
    address?: boolean
    date?: boolean
    pay_type?: boolean
    withDelivery?: boolean
    status?: boolean
    instruction?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectScalar = {
    id?: boolean
    total?: boolean
    location?: boolean
    address?: boolean
    date?: boolean
    pay_type?: boolean
    withDelivery?: boolean
    status?: boolean
    instruction?: boolean
    userId?: boolean
  }

  export type OrderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "total" | "location" | "address" | "date" | "pay_type" | "withDelivery" | "status" | "instruction" | "userId", ExtArgs["result"]["order"]>
  export type OrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orderProduct?: boolean | Order$orderProductArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type OrderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $OrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Order"
    objects: {
      orderProduct: Prisma.$orderProductPayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      total: number
      location: string
      address: string
      date: Date
      pay_type: string
      withDelivery: boolean
      status: string
      instruction: string
      userId: number
    }, ExtArgs["result"]["order"]>
    composites: {}
  }

  type OrderGetPayload<S extends boolean | null | undefined | OrderDefaultArgs> = $Result.GetResult<Prisma.$OrderPayload, S>

  type OrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrderCountAggregateInputType | true
    }

  export interface OrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Order'], meta: { name: 'Order' } }
    /**
     * Find zero or one Order that matches the filter.
     * @param {OrderFindUniqueArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderFindUniqueArgs>(args: SelectSubset<T, OrderFindUniqueArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Order that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrderFindUniqueOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Order that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderFindFirstArgs>(args?: SelectSubset<T, OrderFindFirstArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Order that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.order.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.order.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderWithIdOnly = await prisma.order.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrderFindManyArgs>(args?: SelectSubset<T, OrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Order.
     * @param {OrderCreateArgs} args - Arguments to create a Order.
     * @example
     * // Create one Order
     * const Order = await prisma.order.create({
     *   data: {
     *     // ... data to create a Order
     *   }
     * })
     * 
     */
    create<T extends OrderCreateArgs>(args: SelectSubset<T, OrderCreateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Orders.
     * @param {OrderCreateManyArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderCreateManyArgs>(args?: SelectSubset<T, OrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Orders and returns the data saved in the database.
     * @param {OrderCreateManyAndReturnArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Orders and only return the `id`
     * const orderWithIdOnly = await prisma.order.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrderCreateManyAndReturnArgs>(args?: SelectSubset<T, OrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Order.
     * @param {OrderDeleteArgs} args - Arguments to delete one Order.
     * @example
     * // Delete one Order
     * const Order = await prisma.order.delete({
     *   where: {
     *     // ... filter to delete one Order
     *   }
     * })
     * 
     */
    delete<T extends OrderDeleteArgs>(args: SelectSubset<T, OrderDeleteArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Order.
     * @param {OrderUpdateArgs} args - Arguments to update one Order.
     * @example
     * // Update one Order
     * const order = await prisma.order.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderUpdateArgs>(args: SelectSubset<T, OrderUpdateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Orders.
     * @param {OrderDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.order.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderDeleteManyArgs>(args?: SelectSubset<T, OrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderUpdateManyArgs>(args: SelectSubset<T, OrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders and returns the data updated in the database.
     * @param {OrderUpdateManyAndReturnArgs} args - Arguments to update many Orders.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Orders and only return the `id`
     * const orderWithIdOnly = await prisma.order.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrderUpdateManyAndReturnArgs>(args: SelectSubset<T, OrderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Order.
     * @param {OrderUpsertArgs} args - Arguments to update or create a Order.
     * @example
     * // Update or create a Order
     * const order = await prisma.order.upsert({
     *   create: {
     *     // ... data to create a Order
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order we want to update
     *   }
     * })
     */
    upsert<T extends OrderUpsertArgs>(args: SelectSubset<T, OrderUpsertArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.order.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends OrderCountArgs>(
      args?: Subset<T, OrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderAggregateArgs>(args: Subset<T, OrderAggregateArgs>): Prisma.PrismaPromise<GetOrderAggregateType<T>>

    /**
     * Group by Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderGroupByArgs['orderBy'] }
        : { orderBy?: OrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Order model
   */
  readonly fields: OrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Order.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    orderProduct<T extends Order$orderProductArgs<ExtArgs> = {}>(args?: Subset<T, Order$orderProductArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$orderProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Order model
   */
  interface OrderFieldRefs {
    readonly id: FieldRef<"Order", 'Int'>
    readonly total: FieldRef<"Order", 'Float'>
    readonly location: FieldRef<"Order", 'String'>
    readonly address: FieldRef<"Order", 'String'>
    readonly date: FieldRef<"Order", 'DateTime'>
    readonly pay_type: FieldRef<"Order", 'String'>
    readonly withDelivery: FieldRef<"Order", 'Boolean'>
    readonly status: FieldRef<"Order", 'String'>
    readonly instruction: FieldRef<"Order", 'String'>
    readonly userId: FieldRef<"Order", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Order findUnique
   */
  export type OrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findUniqueOrThrow
   */
  export type OrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findFirst
   */
  export type OrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findFirstOrThrow
   */
  export type OrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findMany
   */
  export type OrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Orders to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order create
   */
  export type OrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to create a Order.
     */
    data: XOR<OrderCreateInput, OrderUncheckedCreateInput>
  }

  /**
   * Order createMany
   */
  export type OrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Order createManyAndReturn
   */
  export type OrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Order update
   */
  export type OrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to update a Order.
     */
    data: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
    /**
     * Choose, which Order to update.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order updateMany
   */
  export type OrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to update.
     */
    limit?: number
  }

  /**
   * Order updateManyAndReturn
   */
  export type OrderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Order upsert
   */
  export type OrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The filter to search for the Order to update in case it exists.
     */
    where: OrderWhereUniqueInput
    /**
     * In case the Order found by the `where` argument doesn't exist, create a new Order with this data.
     */
    create: XOR<OrderCreateInput, OrderUncheckedCreateInput>
    /**
     * In case the Order was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
  }

  /**
   * Order delete
   */
  export type OrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter which Order to delete.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order deleteMany
   */
  export type OrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Orders to delete
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to delete.
     */
    limit?: number
  }

  /**
   * Order.orderProduct
   */
  export type Order$orderProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderProduct
     */
    select?: orderProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orderProduct
     */
    omit?: orderProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderProductInclude<ExtArgs> | null
    where?: orderProductWhereInput
    orderBy?: orderProductOrderByWithRelationInput | orderProductOrderByWithRelationInput[]
    cursor?: orderProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderProductScalarFieldEnum | OrderProductScalarFieldEnum[]
  }

  /**
   * Order without action
   */
  export type OrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
  }


  /**
   * Model orderProduct
   */

  export type AggregateOrderProduct = {
    _count: OrderProductCountAggregateOutputType | null
    _avg: OrderProductAvgAggregateOutputType | null
    _sum: OrderProductSumAggregateOutputType | null
    _min: OrderProductMinAggregateOutputType | null
    _max: OrderProductMaxAggregateOutputType | null
  }

  export type OrderProductAvgAggregateOutputType = {
    id: number | null
    workingTime: number | null
    price: number | null
    count: number | null
    toolId: number | null
    levelId: number | null
    orderId: number | null
    professionId: number | null
  }

  export type OrderProductSumAggregateOutputType = {
    id: number | null
    workingTime: number | null
    price: number | null
    count: number | null
    toolId: number | null
    levelId: number | null
    orderId: number | null
    professionId: number | null
  }

  export type OrderProductMinAggregateOutputType = {
    id: number | null
    isActive: string | null
    timeUnit: string | null
    workingTime: number | null
    price: number | null
    count: number | null
    toolId: number | null
    levelId: number | null
    orderId: number | null
    professionId: number | null
  }

  export type OrderProductMaxAggregateOutputType = {
    id: number | null
    isActive: string | null
    timeUnit: string | null
    workingTime: number | null
    price: number | null
    count: number | null
    toolId: number | null
    levelId: number | null
    orderId: number | null
    professionId: number | null
  }

  export type OrderProductCountAggregateOutputType = {
    id: number
    isActive: number
    timeUnit: number
    workingTime: number
    price: number
    count: number
    toolId: number
    levelId: number
    orderId: number
    professionId: number
    _all: number
  }


  export type OrderProductAvgAggregateInputType = {
    id?: true
    workingTime?: true
    price?: true
    count?: true
    toolId?: true
    levelId?: true
    orderId?: true
    professionId?: true
  }

  export type OrderProductSumAggregateInputType = {
    id?: true
    workingTime?: true
    price?: true
    count?: true
    toolId?: true
    levelId?: true
    orderId?: true
    professionId?: true
  }

  export type OrderProductMinAggregateInputType = {
    id?: true
    isActive?: true
    timeUnit?: true
    workingTime?: true
    price?: true
    count?: true
    toolId?: true
    levelId?: true
    orderId?: true
    professionId?: true
  }

  export type OrderProductMaxAggregateInputType = {
    id?: true
    isActive?: true
    timeUnit?: true
    workingTime?: true
    price?: true
    count?: true
    toolId?: true
    levelId?: true
    orderId?: true
    professionId?: true
  }

  export type OrderProductCountAggregateInputType = {
    id?: true
    isActive?: true
    timeUnit?: true
    workingTime?: true
    price?: true
    count?: true
    toolId?: true
    levelId?: true
    orderId?: true
    professionId?: true
    _all?: true
  }

  export type OrderProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which orderProduct to aggregate.
     */
    where?: orderProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orderProducts to fetch.
     */
    orderBy?: orderProductOrderByWithRelationInput | orderProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: orderProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orderProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orderProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned orderProducts
    **/
    _count?: true | OrderProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderProductMaxAggregateInputType
  }

  export type GetOrderProductAggregateType<T extends OrderProductAggregateArgs> = {
        [P in keyof T & keyof AggregateOrderProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrderProduct[P]>
      : GetScalarType<T[P], AggregateOrderProduct[P]>
  }




  export type orderProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: orderProductWhereInput
    orderBy?: orderProductOrderByWithAggregationInput | orderProductOrderByWithAggregationInput[]
    by: OrderProductScalarFieldEnum[] | OrderProductScalarFieldEnum
    having?: orderProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderProductCountAggregateInputType | true
    _avg?: OrderProductAvgAggregateInputType
    _sum?: OrderProductSumAggregateInputType
    _min?: OrderProductMinAggregateInputType
    _max?: OrderProductMaxAggregateInputType
  }

  export type OrderProductGroupByOutputType = {
    id: number
    isActive: string
    timeUnit: string
    workingTime: number
    price: number
    count: number
    toolId: number | null
    levelId: number | null
    orderId: number
    professionId: number | null
    _count: OrderProductCountAggregateOutputType | null
    _avg: OrderProductAvgAggregateOutputType | null
    _sum: OrderProductSumAggregateOutputType | null
    _min: OrderProductMinAggregateOutputType | null
    _max: OrderProductMaxAggregateOutputType | null
  }

  type GetOrderProductGroupByPayload<T extends orderProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderProductGroupByOutputType[P]>
            : GetScalarType<T[P], OrderProductGroupByOutputType[P]>
        }
      >
    >


  export type orderProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    isActive?: boolean
    timeUnit?: boolean
    workingTime?: boolean
    price?: boolean
    count?: boolean
    toolId?: boolean
    levelId?: boolean
    orderId?: boolean
    professionId?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    tool?: boolean | orderProduct$toolArgs<ExtArgs>
    level?: boolean | orderProduct$levelArgs<ExtArgs>
    professions?: boolean | orderProduct$professionsArgs<ExtArgs>
  }, ExtArgs["result"]["orderProduct"]>

  export type orderProductSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    isActive?: boolean
    timeUnit?: boolean
    workingTime?: boolean
    price?: boolean
    count?: boolean
    toolId?: boolean
    levelId?: boolean
    orderId?: boolean
    professionId?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    tool?: boolean | orderProduct$toolArgs<ExtArgs>
    level?: boolean | orderProduct$levelArgs<ExtArgs>
    professions?: boolean | orderProduct$professionsArgs<ExtArgs>
  }, ExtArgs["result"]["orderProduct"]>

  export type orderProductSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    isActive?: boolean
    timeUnit?: boolean
    workingTime?: boolean
    price?: boolean
    count?: boolean
    toolId?: boolean
    levelId?: boolean
    orderId?: boolean
    professionId?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    tool?: boolean | orderProduct$toolArgs<ExtArgs>
    level?: boolean | orderProduct$levelArgs<ExtArgs>
    professions?: boolean | orderProduct$professionsArgs<ExtArgs>
  }, ExtArgs["result"]["orderProduct"]>

  export type orderProductSelectScalar = {
    id?: boolean
    isActive?: boolean
    timeUnit?: boolean
    workingTime?: boolean
    price?: boolean
    count?: boolean
    toolId?: boolean
    levelId?: boolean
    orderId?: boolean
    professionId?: boolean
  }

  export type orderProductOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "isActive" | "timeUnit" | "workingTime" | "price" | "count" | "toolId" | "levelId" | "orderId" | "professionId", ExtArgs["result"]["orderProduct"]>
  export type orderProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    tool?: boolean | orderProduct$toolArgs<ExtArgs>
    level?: boolean | orderProduct$levelArgs<ExtArgs>
    professions?: boolean | orderProduct$professionsArgs<ExtArgs>
  }
  export type orderProductIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    tool?: boolean | orderProduct$toolArgs<ExtArgs>
    level?: boolean | orderProduct$levelArgs<ExtArgs>
    professions?: boolean | orderProduct$professionsArgs<ExtArgs>
  }
  export type orderProductIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    tool?: boolean | orderProduct$toolArgs<ExtArgs>
    level?: boolean | orderProduct$levelArgs<ExtArgs>
    professions?: boolean | orderProduct$professionsArgs<ExtArgs>
  }

  export type $orderProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "orderProduct"
    objects: {
      order: Prisma.$OrderPayload<ExtArgs>
      tool: Prisma.$ToolsPayload<ExtArgs> | null
      level: Prisma.$LevelPayload<ExtArgs> | null
      professions: Prisma.$ProfessionPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      isActive: string
      timeUnit: string
      workingTime: number
      price: number
      count: number
      toolId: number | null
      levelId: number | null
      orderId: number
      professionId: number | null
    }, ExtArgs["result"]["orderProduct"]>
    composites: {}
  }

  type orderProductGetPayload<S extends boolean | null | undefined | orderProductDefaultArgs> = $Result.GetResult<Prisma.$orderProductPayload, S>

  type orderProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<orderProductFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrderProductCountAggregateInputType | true
    }

  export interface orderProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['orderProduct'], meta: { name: 'orderProduct' } }
    /**
     * Find zero or one OrderProduct that matches the filter.
     * @param {orderProductFindUniqueArgs} args - Arguments to find a OrderProduct
     * @example
     * // Get one OrderProduct
     * const orderProduct = await prisma.orderProduct.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends orderProductFindUniqueArgs>(args: SelectSubset<T, orderProductFindUniqueArgs<ExtArgs>>): Prisma__orderProductClient<$Result.GetResult<Prisma.$orderProductPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OrderProduct that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {orderProductFindUniqueOrThrowArgs} args - Arguments to find a OrderProduct
     * @example
     * // Get one OrderProduct
     * const orderProduct = await prisma.orderProduct.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends orderProductFindUniqueOrThrowArgs>(args: SelectSubset<T, orderProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__orderProductClient<$Result.GetResult<Prisma.$orderProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrderProduct that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderProductFindFirstArgs} args - Arguments to find a OrderProduct
     * @example
     * // Get one OrderProduct
     * const orderProduct = await prisma.orderProduct.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends orderProductFindFirstArgs>(args?: SelectSubset<T, orderProductFindFirstArgs<ExtArgs>>): Prisma__orderProductClient<$Result.GetResult<Prisma.$orderProductPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrderProduct that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderProductFindFirstOrThrowArgs} args - Arguments to find a OrderProduct
     * @example
     * // Get one OrderProduct
     * const orderProduct = await prisma.orderProduct.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends orderProductFindFirstOrThrowArgs>(args?: SelectSubset<T, orderProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__orderProductClient<$Result.GetResult<Prisma.$orderProductPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OrderProducts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrderProducts
     * const orderProducts = await prisma.orderProduct.findMany()
     * 
     * // Get first 10 OrderProducts
     * const orderProducts = await prisma.orderProduct.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderProductWithIdOnly = await prisma.orderProduct.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends orderProductFindManyArgs>(args?: SelectSubset<T, orderProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$orderProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OrderProduct.
     * @param {orderProductCreateArgs} args - Arguments to create a OrderProduct.
     * @example
     * // Create one OrderProduct
     * const OrderProduct = await prisma.orderProduct.create({
     *   data: {
     *     // ... data to create a OrderProduct
     *   }
     * })
     * 
     */
    create<T extends orderProductCreateArgs>(args: SelectSubset<T, orderProductCreateArgs<ExtArgs>>): Prisma__orderProductClient<$Result.GetResult<Prisma.$orderProductPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OrderProducts.
     * @param {orderProductCreateManyArgs} args - Arguments to create many OrderProducts.
     * @example
     * // Create many OrderProducts
     * const orderProduct = await prisma.orderProduct.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends orderProductCreateManyArgs>(args?: SelectSubset<T, orderProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OrderProducts and returns the data saved in the database.
     * @param {orderProductCreateManyAndReturnArgs} args - Arguments to create many OrderProducts.
     * @example
     * // Create many OrderProducts
     * const orderProduct = await prisma.orderProduct.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OrderProducts and only return the `id`
     * const orderProductWithIdOnly = await prisma.orderProduct.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends orderProductCreateManyAndReturnArgs>(args?: SelectSubset<T, orderProductCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$orderProductPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a OrderProduct.
     * @param {orderProductDeleteArgs} args - Arguments to delete one OrderProduct.
     * @example
     * // Delete one OrderProduct
     * const OrderProduct = await prisma.orderProduct.delete({
     *   where: {
     *     // ... filter to delete one OrderProduct
     *   }
     * })
     * 
     */
    delete<T extends orderProductDeleteArgs>(args: SelectSubset<T, orderProductDeleteArgs<ExtArgs>>): Prisma__orderProductClient<$Result.GetResult<Prisma.$orderProductPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OrderProduct.
     * @param {orderProductUpdateArgs} args - Arguments to update one OrderProduct.
     * @example
     * // Update one OrderProduct
     * const orderProduct = await prisma.orderProduct.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends orderProductUpdateArgs>(args: SelectSubset<T, orderProductUpdateArgs<ExtArgs>>): Prisma__orderProductClient<$Result.GetResult<Prisma.$orderProductPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OrderProducts.
     * @param {orderProductDeleteManyArgs} args - Arguments to filter OrderProducts to delete.
     * @example
     * // Delete a few OrderProducts
     * const { count } = await prisma.orderProduct.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends orderProductDeleteManyArgs>(args?: SelectSubset<T, orderProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrderProducts
     * const orderProduct = await prisma.orderProduct.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends orderProductUpdateManyArgs>(args: SelectSubset<T, orderProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderProducts and returns the data updated in the database.
     * @param {orderProductUpdateManyAndReturnArgs} args - Arguments to update many OrderProducts.
     * @example
     * // Update many OrderProducts
     * const orderProduct = await prisma.orderProduct.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OrderProducts and only return the `id`
     * const orderProductWithIdOnly = await prisma.orderProduct.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends orderProductUpdateManyAndReturnArgs>(args: SelectSubset<T, orderProductUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$orderProductPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one OrderProduct.
     * @param {orderProductUpsertArgs} args - Arguments to update or create a OrderProduct.
     * @example
     * // Update or create a OrderProduct
     * const orderProduct = await prisma.orderProduct.upsert({
     *   create: {
     *     // ... data to create a OrderProduct
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrderProduct we want to update
     *   }
     * })
     */
    upsert<T extends orderProductUpsertArgs>(args: SelectSubset<T, orderProductUpsertArgs<ExtArgs>>): Prisma__orderProductClient<$Result.GetResult<Prisma.$orderProductPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OrderProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderProductCountArgs} args - Arguments to filter OrderProducts to count.
     * @example
     * // Count the number of OrderProducts
     * const count = await prisma.orderProduct.count({
     *   where: {
     *     // ... the filter for the OrderProducts we want to count
     *   }
     * })
    **/
    count<T extends orderProductCountArgs>(
      args?: Subset<T, orderProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrderProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderProductAggregateArgs>(args: Subset<T, OrderProductAggregateArgs>): Prisma.PrismaPromise<GetOrderProductAggregateType<T>>

    /**
     * Group by OrderProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends orderProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: orderProductGroupByArgs['orderBy'] }
        : { orderBy?: orderProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, orderProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the orderProduct model
   */
  readonly fields: orderProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for orderProduct.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__orderProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    order<T extends OrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderDefaultArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tool<T extends orderProduct$toolArgs<ExtArgs> = {}>(args?: Subset<T, orderProduct$toolArgs<ExtArgs>>): Prisma__ToolsClient<$Result.GetResult<Prisma.$ToolsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    level<T extends orderProduct$levelArgs<ExtArgs> = {}>(args?: Subset<T, orderProduct$levelArgs<ExtArgs>>): Prisma__LevelClient<$Result.GetResult<Prisma.$LevelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    professions<T extends orderProduct$professionsArgs<ExtArgs> = {}>(args?: Subset<T, orderProduct$professionsArgs<ExtArgs>>): Prisma__ProfessionClient<$Result.GetResult<Prisma.$ProfessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the orderProduct model
   */
  interface orderProductFieldRefs {
    readonly id: FieldRef<"orderProduct", 'Int'>
    readonly isActive: FieldRef<"orderProduct", 'String'>
    readonly timeUnit: FieldRef<"orderProduct", 'String'>
    readonly workingTime: FieldRef<"orderProduct", 'Int'>
    readonly price: FieldRef<"orderProduct", 'Float'>
    readonly count: FieldRef<"orderProduct", 'Int'>
    readonly toolId: FieldRef<"orderProduct", 'Int'>
    readonly levelId: FieldRef<"orderProduct", 'Int'>
    readonly orderId: FieldRef<"orderProduct", 'Int'>
    readonly professionId: FieldRef<"orderProduct", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * orderProduct findUnique
   */
  export type orderProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderProduct
     */
    select?: orderProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orderProduct
     */
    omit?: orderProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderProductInclude<ExtArgs> | null
    /**
     * Filter, which orderProduct to fetch.
     */
    where: orderProductWhereUniqueInput
  }

  /**
   * orderProduct findUniqueOrThrow
   */
  export type orderProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderProduct
     */
    select?: orderProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orderProduct
     */
    omit?: orderProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderProductInclude<ExtArgs> | null
    /**
     * Filter, which orderProduct to fetch.
     */
    where: orderProductWhereUniqueInput
  }

  /**
   * orderProduct findFirst
   */
  export type orderProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderProduct
     */
    select?: orderProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orderProduct
     */
    omit?: orderProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderProductInclude<ExtArgs> | null
    /**
     * Filter, which orderProduct to fetch.
     */
    where?: orderProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orderProducts to fetch.
     */
    orderBy?: orderProductOrderByWithRelationInput | orderProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orderProducts.
     */
    cursor?: orderProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orderProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orderProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orderProducts.
     */
    distinct?: OrderProductScalarFieldEnum | OrderProductScalarFieldEnum[]
  }

  /**
   * orderProduct findFirstOrThrow
   */
  export type orderProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderProduct
     */
    select?: orderProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orderProduct
     */
    omit?: orderProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderProductInclude<ExtArgs> | null
    /**
     * Filter, which orderProduct to fetch.
     */
    where?: orderProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orderProducts to fetch.
     */
    orderBy?: orderProductOrderByWithRelationInput | orderProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orderProducts.
     */
    cursor?: orderProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orderProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orderProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orderProducts.
     */
    distinct?: OrderProductScalarFieldEnum | OrderProductScalarFieldEnum[]
  }

  /**
   * orderProduct findMany
   */
  export type orderProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderProduct
     */
    select?: orderProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orderProduct
     */
    omit?: orderProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderProductInclude<ExtArgs> | null
    /**
     * Filter, which orderProducts to fetch.
     */
    where?: orderProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orderProducts to fetch.
     */
    orderBy?: orderProductOrderByWithRelationInput | orderProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing orderProducts.
     */
    cursor?: orderProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orderProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orderProducts.
     */
    skip?: number
    distinct?: OrderProductScalarFieldEnum | OrderProductScalarFieldEnum[]
  }

  /**
   * orderProduct create
   */
  export type orderProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderProduct
     */
    select?: orderProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orderProduct
     */
    omit?: orderProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderProductInclude<ExtArgs> | null
    /**
     * The data needed to create a orderProduct.
     */
    data: XOR<orderProductCreateInput, orderProductUncheckedCreateInput>
  }

  /**
   * orderProduct createMany
   */
  export type orderProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many orderProducts.
     */
    data: orderProductCreateManyInput | orderProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * orderProduct createManyAndReturn
   */
  export type orderProductCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderProduct
     */
    select?: orderProductSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the orderProduct
     */
    omit?: orderProductOmit<ExtArgs> | null
    /**
     * The data used to create many orderProducts.
     */
    data: orderProductCreateManyInput | orderProductCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderProductIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * orderProduct update
   */
  export type orderProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderProduct
     */
    select?: orderProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orderProduct
     */
    omit?: orderProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderProductInclude<ExtArgs> | null
    /**
     * The data needed to update a orderProduct.
     */
    data: XOR<orderProductUpdateInput, orderProductUncheckedUpdateInput>
    /**
     * Choose, which orderProduct to update.
     */
    where: orderProductWhereUniqueInput
  }

  /**
   * orderProduct updateMany
   */
  export type orderProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update orderProducts.
     */
    data: XOR<orderProductUpdateManyMutationInput, orderProductUncheckedUpdateManyInput>
    /**
     * Filter which orderProducts to update
     */
    where?: orderProductWhereInput
    /**
     * Limit how many orderProducts to update.
     */
    limit?: number
  }

  /**
   * orderProduct updateManyAndReturn
   */
  export type orderProductUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderProduct
     */
    select?: orderProductSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the orderProduct
     */
    omit?: orderProductOmit<ExtArgs> | null
    /**
     * The data used to update orderProducts.
     */
    data: XOR<orderProductUpdateManyMutationInput, orderProductUncheckedUpdateManyInput>
    /**
     * Filter which orderProducts to update
     */
    where?: orderProductWhereInput
    /**
     * Limit how many orderProducts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderProductIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * orderProduct upsert
   */
  export type orderProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderProduct
     */
    select?: orderProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orderProduct
     */
    omit?: orderProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderProductInclude<ExtArgs> | null
    /**
     * The filter to search for the orderProduct to update in case it exists.
     */
    where: orderProductWhereUniqueInput
    /**
     * In case the orderProduct found by the `where` argument doesn't exist, create a new orderProduct with this data.
     */
    create: XOR<orderProductCreateInput, orderProductUncheckedCreateInput>
    /**
     * In case the orderProduct was found with the provided `where` argument, update it with this data.
     */
    update: XOR<orderProductUpdateInput, orderProductUncheckedUpdateInput>
  }

  /**
   * orderProduct delete
   */
  export type orderProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderProduct
     */
    select?: orderProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orderProduct
     */
    omit?: orderProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderProductInclude<ExtArgs> | null
    /**
     * Filter which orderProduct to delete.
     */
    where: orderProductWhereUniqueInput
  }

  /**
   * orderProduct deleteMany
   */
  export type orderProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which orderProducts to delete
     */
    where?: orderProductWhereInput
    /**
     * Limit how many orderProducts to delete.
     */
    limit?: number
  }

  /**
   * orderProduct.tool
   */
  export type orderProduct$toolArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tools
     */
    select?: ToolsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tools
     */
    omit?: ToolsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToolsInclude<ExtArgs> | null
    where?: ToolsWhereInput
  }

  /**
   * orderProduct.level
   */
  export type orderProduct$levelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Level
     */
    select?: LevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Level
     */
    omit?: LevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LevelInclude<ExtArgs> | null
    where?: LevelWhereInput
  }

  /**
   * orderProduct.professions
   */
  export type orderProduct$professionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profession
     */
    select?: ProfessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profession
     */
    omit?: ProfessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionInclude<ExtArgs> | null
    where?: ProfessionWhereInput
  }

  /**
   * orderProduct without action
   */
  export type orderProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderProduct
     */
    select?: orderProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orderProduct
     */
    omit?: orderProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderProductInclude<ExtArgs> | null
  }


  /**
   * Model FAQ
   */

  export type AggregateFAQ = {
    _count: FAQCountAggregateOutputType | null
    _avg: FAQAvgAggregateOutputType | null
    _sum: FAQSumAggregateOutputType | null
    _min: FAQMinAggregateOutputType | null
    _max: FAQMaxAggregateOutputType | null
  }

  export type FAQAvgAggregateOutputType = {
    id: number | null
  }

  export type FAQSumAggregateOutputType = {
    id: number | null
  }

  export type FAQMinAggregateOutputType = {
    id: number | null
    answer: string | null
    quiteions: string | null
  }

  export type FAQMaxAggregateOutputType = {
    id: number | null
    answer: string | null
    quiteions: string | null
  }

  export type FAQCountAggregateOutputType = {
    id: number
    answer: number
    quiteions: number
    _all: number
  }


  export type FAQAvgAggregateInputType = {
    id?: true
  }

  export type FAQSumAggregateInputType = {
    id?: true
  }

  export type FAQMinAggregateInputType = {
    id?: true
    answer?: true
    quiteions?: true
  }

  export type FAQMaxAggregateInputType = {
    id?: true
    answer?: true
    quiteions?: true
  }

  export type FAQCountAggregateInputType = {
    id?: true
    answer?: true
    quiteions?: true
    _all?: true
  }

  export type FAQAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FAQ to aggregate.
     */
    where?: FAQWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FAQS to fetch.
     */
    orderBy?: FAQOrderByWithRelationInput | FAQOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FAQWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FAQS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FAQS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FAQS
    **/
    _count?: true | FAQCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FAQAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FAQSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FAQMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FAQMaxAggregateInputType
  }

  export type GetFAQAggregateType<T extends FAQAggregateArgs> = {
        [P in keyof T & keyof AggregateFAQ]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFAQ[P]>
      : GetScalarType<T[P], AggregateFAQ[P]>
  }




  export type FAQGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FAQWhereInput
    orderBy?: FAQOrderByWithAggregationInput | FAQOrderByWithAggregationInput[]
    by: FAQScalarFieldEnum[] | FAQScalarFieldEnum
    having?: FAQScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FAQCountAggregateInputType | true
    _avg?: FAQAvgAggregateInputType
    _sum?: FAQSumAggregateInputType
    _min?: FAQMinAggregateInputType
    _max?: FAQMaxAggregateInputType
  }

  export type FAQGroupByOutputType = {
    id: number
    answer: string
    quiteions: string
    _count: FAQCountAggregateOutputType | null
    _avg: FAQAvgAggregateOutputType | null
    _sum: FAQSumAggregateOutputType | null
    _min: FAQMinAggregateOutputType | null
    _max: FAQMaxAggregateOutputType | null
  }

  type GetFAQGroupByPayload<T extends FAQGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FAQGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FAQGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FAQGroupByOutputType[P]>
            : GetScalarType<T[P], FAQGroupByOutputType[P]>
        }
      >
    >


  export type FAQSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    answer?: boolean
    quiteions?: boolean
  }, ExtArgs["result"]["fAQ"]>

  export type FAQSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    answer?: boolean
    quiteions?: boolean
  }, ExtArgs["result"]["fAQ"]>

  export type FAQSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    answer?: boolean
    quiteions?: boolean
  }, ExtArgs["result"]["fAQ"]>

  export type FAQSelectScalar = {
    id?: boolean
    answer?: boolean
    quiteions?: boolean
  }

  export type FAQOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "answer" | "quiteions", ExtArgs["result"]["fAQ"]>

  export type $FAQPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FAQ"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      answer: string
      quiteions: string
    }, ExtArgs["result"]["fAQ"]>
    composites: {}
  }

  type FAQGetPayload<S extends boolean | null | undefined | FAQDefaultArgs> = $Result.GetResult<Prisma.$FAQPayload, S>

  type FAQCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FAQFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FAQCountAggregateInputType | true
    }

  export interface FAQDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FAQ'], meta: { name: 'FAQ' } }
    /**
     * Find zero or one FAQ that matches the filter.
     * @param {FAQFindUniqueArgs} args - Arguments to find a FAQ
     * @example
     * // Get one FAQ
     * const fAQ = await prisma.fAQ.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FAQFindUniqueArgs>(args: SelectSubset<T, FAQFindUniqueArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FAQ that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FAQFindUniqueOrThrowArgs} args - Arguments to find a FAQ
     * @example
     * // Get one FAQ
     * const fAQ = await prisma.fAQ.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FAQFindUniqueOrThrowArgs>(args: SelectSubset<T, FAQFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FAQ that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQFindFirstArgs} args - Arguments to find a FAQ
     * @example
     * // Get one FAQ
     * const fAQ = await prisma.fAQ.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FAQFindFirstArgs>(args?: SelectSubset<T, FAQFindFirstArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FAQ that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQFindFirstOrThrowArgs} args - Arguments to find a FAQ
     * @example
     * // Get one FAQ
     * const fAQ = await prisma.fAQ.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FAQFindFirstOrThrowArgs>(args?: SelectSubset<T, FAQFindFirstOrThrowArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FAQS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FAQS
     * const fAQS = await prisma.fAQ.findMany()
     * 
     * // Get first 10 FAQS
     * const fAQS = await prisma.fAQ.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fAQWithIdOnly = await prisma.fAQ.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FAQFindManyArgs>(args?: SelectSubset<T, FAQFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FAQ.
     * @param {FAQCreateArgs} args - Arguments to create a FAQ.
     * @example
     * // Create one FAQ
     * const FAQ = await prisma.fAQ.create({
     *   data: {
     *     // ... data to create a FAQ
     *   }
     * })
     * 
     */
    create<T extends FAQCreateArgs>(args: SelectSubset<T, FAQCreateArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FAQS.
     * @param {FAQCreateManyArgs} args - Arguments to create many FAQS.
     * @example
     * // Create many FAQS
     * const fAQ = await prisma.fAQ.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FAQCreateManyArgs>(args?: SelectSubset<T, FAQCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FAQS and returns the data saved in the database.
     * @param {FAQCreateManyAndReturnArgs} args - Arguments to create many FAQS.
     * @example
     * // Create many FAQS
     * const fAQ = await prisma.fAQ.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FAQS and only return the `id`
     * const fAQWithIdOnly = await prisma.fAQ.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FAQCreateManyAndReturnArgs>(args?: SelectSubset<T, FAQCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FAQ.
     * @param {FAQDeleteArgs} args - Arguments to delete one FAQ.
     * @example
     * // Delete one FAQ
     * const FAQ = await prisma.fAQ.delete({
     *   where: {
     *     // ... filter to delete one FAQ
     *   }
     * })
     * 
     */
    delete<T extends FAQDeleteArgs>(args: SelectSubset<T, FAQDeleteArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FAQ.
     * @param {FAQUpdateArgs} args - Arguments to update one FAQ.
     * @example
     * // Update one FAQ
     * const fAQ = await prisma.fAQ.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FAQUpdateArgs>(args: SelectSubset<T, FAQUpdateArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FAQS.
     * @param {FAQDeleteManyArgs} args - Arguments to filter FAQS to delete.
     * @example
     * // Delete a few FAQS
     * const { count } = await prisma.fAQ.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FAQDeleteManyArgs>(args?: SelectSubset<T, FAQDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FAQS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FAQS
     * const fAQ = await prisma.fAQ.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FAQUpdateManyArgs>(args: SelectSubset<T, FAQUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FAQS and returns the data updated in the database.
     * @param {FAQUpdateManyAndReturnArgs} args - Arguments to update many FAQS.
     * @example
     * // Update many FAQS
     * const fAQ = await prisma.fAQ.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FAQS and only return the `id`
     * const fAQWithIdOnly = await prisma.fAQ.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FAQUpdateManyAndReturnArgs>(args: SelectSubset<T, FAQUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FAQ.
     * @param {FAQUpsertArgs} args - Arguments to update or create a FAQ.
     * @example
     * // Update or create a FAQ
     * const fAQ = await prisma.fAQ.upsert({
     *   create: {
     *     // ... data to create a FAQ
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FAQ we want to update
     *   }
     * })
     */
    upsert<T extends FAQUpsertArgs>(args: SelectSubset<T, FAQUpsertArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FAQS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQCountArgs} args - Arguments to filter FAQS to count.
     * @example
     * // Count the number of FAQS
     * const count = await prisma.fAQ.count({
     *   where: {
     *     // ... the filter for the FAQS we want to count
     *   }
     * })
    **/
    count<T extends FAQCountArgs>(
      args?: Subset<T, FAQCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FAQCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FAQ.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FAQAggregateArgs>(args: Subset<T, FAQAggregateArgs>): Prisma.PrismaPromise<GetFAQAggregateType<T>>

    /**
     * Group by FAQ.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FAQGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FAQGroupByArgs['orderBy'] }
        : { orderBy?: FAQGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FAQGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFAQGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FAQ model
   */
  readonly fields: FAQFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FAQ.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FAQClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FAQ model
   */
  interface FAQFieldRefs {
    readonly id: FieldRef<"FAQ", 'Int'>
    readonly answer: FieldRef<"FAQ", 'String'>
    readonly quiteions: FieldRef<"FAQ", 'String'>
  }
    

  // Custom InputTypes
  /**
   * FAQ findUnique
   */
  export type FAQFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * Filter, which FAQ to fetch.
     */
    where: FAQWhereUniqueInput
  }

  /**
   * FAQ findUniqueOrThrow
   */
  export type FAQFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * Filter, which FAQ to fetch.
     */
    where: FAQWhereUniqueInput
  }

  /**
   * FAQ findFirst
   */
  export type FAQFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * Filter, which FAQ to fetch.
     */
    where?: FAQWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FAQS to fetch.
     */
    orderBy?: FAQOrderByWithRelationInput | FAQOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FAQS.
     */
    cursor?: FAQWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FAQS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FAQS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FAQS.
     */
    distinct?: FAQScalarFieldEnum | FAQScalarFieldEnum[]
  }

  /**
   * FAQ findFirstOrThrow
   */
  export type FAQFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * Filter, which FAQ to fetch.
     */
    where?: FAQWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FAQS to fetch.
     */
    orderBy?: FAQOrderByWithRelationInput | FAQOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FAQS.
     */
    cursor?: FAQWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FAQS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FAQS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FAQS.
     */
    distinct?: FAQScalarFieldEnum | FAQScalarFieldEnum[]
  }

  /**
   * FAQ findMany
   */
  export type FAQFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * Filter, which FAQS to fetch.
     */
    where?: FAQWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FAQS to fetch.
     */
    orderBy?: FAQOrderByWithRelationInput | FAQOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FAQS.
     */
    cursor?: FAQWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FAQS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FAQS.
     */
    skip?: number
    distinct?: FAQScalarFieldEnum | FAQScalarFieldEnum[]
  }

  /**
   * FAQ create
   */
  export type FAQCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * The data needed to create a FAQ.
     */
    data: XOR<FAQCreateInput, FAQUncheckedCreateInput>
  }

  /**
   * FAQ createMany
   */
  export type FAQCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FAQS.
     */
    data: FAQCreateManyInput | FAQCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FAQ createManyAndReturn
   */
  export type FAQCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * The data used to create many FAQS.
     */
    data: FAQCreateManyInput | FAQCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FAQ update
   */
  export type FAQUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * The data needed to update a FAQ.
     */
    data: XOR<FAQUpdateInput, FAQUncheckedUpdateInput>
    /**
     * Choose, which FAQ to update.
     */
    where: FAQWhereUniqueInput
  }

  /**
   * FAQ updateMany
   */
  export type FAQUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FAQS.
     */
    data: XOR<FAQUpdateManyMutationInput, FAQUncheckedUpdateManyInput>
    /**
     * Filter which FAQS to update
     */
    where?: FAQWhereInput
    /**
     * Limit how many FAQS to update.
     */
    limit?: number
  }

  /**
   * FAQ updateManyAndReturn
   */
  export type FAQUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * The data used to update FAQS.
     */
    data: XOR<FAQUpdateManyMutationInput, FAQUncheckedUpdateManyInput>
    /**
     * Filter which FAQS to update
     */
    where?: FAQWhereInput
    /**
     * Limit how many FAQS to update.
     */
    limit?: number
  }

  /**
   * FAQ upsert
   */
  export type FAQUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * The filter to search for the FAQ to update in case it exists.
     */
    where: FAQWhereUniqueInput
    /**
     * In case the FAQ found by the `where` argument doesn't exist, create a new FAQ with this data.
     */
    create: XOR<FAQCreateInput, FAQUncheckedCreateInput>
    /**
     * In case the FAQ was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FAQUpdateInput, FAQUncheckedUpdateInput>
  }

  /**
   * FAQ delete
   */
  export type FAQDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * Filter which FAQ to delete.
     */
    where: FAQWhereUniqueInput
  }

  /**
   * FAQ deleteMany
   */
  export type FAQDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FAQS to delete
     */
    where?: FAQWhereInput
    /**
     * Limit how many FAQS to delete.
     */
    limit?: number
  }

  /**
   * FAQ without action
   */
  export type FAQDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
  }


  /**
   * Model Contact
   */

  export type AggregateContact = {
    _count: ContactCountAggregateOutputType | null
    _avg: ContactAvgAggregateOutputType | null
    _sum: ContactSumAggregateOutputType | null
    _min: ContactMinAggregateOutputType | null
    _max: ContactMaxAggregateOutputType | null
  }

  export type ContactAvgAggregateOutputType = {
    id: number | null
  }

  export type ContactSumAggregateOutputType = {
    id: number | null
  }

  export type ContactMinAggregateOutputType = {
    id: number | null
    name: string | null
    surname: string | null
    phone: string | null
    address: string | null
    message: string | null
  }

  export type ContactMaxAggregateOutputType = {
    id: number | null
    name: string | null
    surname: string | null
    phone: string | null
    address: string | null
    message: string | null
  }

  export type ContactCountAggregateOutputType = {
    id: number
    name: number
    surname: number
    phone: number
    address: number
    message: number
    _all: number
  }


  export type ContactAvgAggregateInputType = {
    id?: true
  }

  export type ContactSumAggregateInputType = {
    id?: true
  }

  export type ContactMinAggregateInputType = {
    id?: true
    name?: true
    surname?: true
    phone?: true
    address?: true
    message?: true
  }

  export type ContactMaxAggregateInputType = {
    id?: true
    name?: true
    surname?: true
    phone?: true
    address?: true
    message?: true
  }

  export type ContactCountAggregateInputType = {
    id?: true
    name?: true
    surname?: true
    phone?: true
    address?: true
    message?: true
    _all?: true
  }

  export type ContactAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contact to aggregate.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contacts
    **/
    _count?: true | ContactCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContactAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContactSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContactMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContactMaxAggregateInputType
  }

  export type GetContactAggregateType<T extends ContactAggregateArgs> = {
        [P in keyof T & keyof AggregateContact]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContact[P]>
      : GetScalarType<T[P], AggregateContact[P]>
  }




  export type ContactGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactWhereInput
    orderBy?: ContactOrderByWithAggregationInput | ContactOrderByWithAggregationInput[]
    by: ContactScalarFieldEnum[] | ContactScalarFieldEnum
    having?: ContactScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContactCountAggregateInputType | true
    _avg?: ContactAvgAggregateInputType
    _sum?: ContactSumAggregateInputType
    _min?: ContactMinAggregateInputType
    _max?: ContactMaxAggregateInputType
  }

  export type ContactGroupByOutputType = {
    id: number
    name: string
    surname: string
    phone: string
    address: string
    message: string
    _count: ContactCountAggregateOutputType | null
    _avg: ContactAvgAggregateOutputType | null
    _sum: ContactSumAggregateOutputType | null
    _min: ContactMinAggregateOutputType | null
    _max: ContactMaxAggregateOutputType | null
  }

  type GetContactGroupByPayload<T extends ContactGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContactGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContactGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContactGroupByOutputType[P]>
            : GetScalarType<T[P], ContactGroupByOutputType[P]>
        }
      >
    >


  export type ContactSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    surname?: boolean
    phone?: boolean
    address?: boolean
    message?: boolean
  }, ExtArgs["result"]["contact"]>

  export type ContactSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    surname?: boolean
    phone?: boolean
    address?: boolean
    message?: boolean
  }, ExtArgs["result"]["contact"]>

  export type ContactSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    surname?: boolean
    phone?: boolean
    address?: boolean
    message?: boolean
  }, ExtArgs["result"]["contact"]>

  export type ContactSelectScalar = {
    id?: boolean
    name?: boolean
    surname?: boolean
    phone?: boolean
    address?: boolean
    message?: boolean
  }

  export type ContactOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "surname" | "phone" | "address" | "message", ExtArgs["result"]["contact"]>

  export type $ContactPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Contact"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      surname: string
      phone: string
      address: string
      message: string
    }, ExtArgs["result"]["contact"]>
    composites: {}
  }

  type ContactGetPayload<S extends boolean | null | undefined | ContactDefaultArgs> = $Result.GetResult<Prisma.$ContactPayload, S>

  type ContactCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ContactFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContactCountAggregateInputType | true
    }

  export interface ContactDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Contact'], meta: { name: 'Contact' } }
    /**
     * Find zero or one Contact that matches the filter.
     * @param {ContactFindUniqueArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContactFindUniqueArgs>(args: SelectSubset<T, ContactFindUniqueArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Contact that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ContactFindUniqueOrThrowArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContactFindUniqueOrThrowArgs>(args: SelectSubset<T, ContactFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Contact that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindFirstArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContactFindFirstArgs>(args?: SelectSubset<T, ContactFindFirstArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Contact that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindFirstOrThrowArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContactFindFirstOrThrowArgs>(args?: SelectSubset<T, ContactFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Contacts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contacts
     * const contacts = await prisma.contact.findMany()
     * 
     * // Get first 10 Contacts
     * const contacts = await prisma.contact.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contactWithIdOnly = await prisma.contact.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContactFindManyArgs>(args?: SelectSubset<T, ContactFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Contact.
     * @param {ContactCreateArgs} args - Arguments to create a Contact.
     * @example
     * // Create one Contact
     * const Contact = await prisma.contact.create({
     *   data: {
     *     // ... data to create a Contact
     *   }
     * })
     * 
     */
    create<T extends ContactCreateArgs>(args: SelectSubset<T, ContactCreateArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Contacts.
     * @param {ContactCreateManyArgs} args - Arguments to create many Contacts.
     * @example
     * // Create many Contacts
     * const contact = await prisma.contact.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContactCreateManyArgs>(args?: SelectSubset<T, ContactCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Contacts and returns the data saved in the database.
     * @param {ContactCreateManyAndReturnArgs} args - Arguments to create many Contacts.
     * @example
     * // Create many Contacts
     * const contact = await prisma.contact.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Contacts and only return the `id`
     * const contactWithIdOnly = await prisma.contact.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContactCreateManyAndReturnArgs>(args?: SelectSubset<T, ContactCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Contact.
     * @param {ContactDeleteArgs} args - Arguments to delete one Contact.
     * @example
     * // Delete one Contact
     * const Contact = await prisma.contact.delete({
     *   where: {
     *     // ... filter to delete one Contact
     *   }
     * })
     * 
     */
    delete<T extends ContactDeleteArgs>(args: SelectSubset<T, ContactDeleteArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Contact.
     * @param {ContactUpdateArgs} args - Arguments to update one Contact.
     * @example
     * // Update one Contact
     * const contact = await prisma.contact.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContactUpdateArgs>(args: SelectSubset<T, ContactUpdateArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Contacts.
     * @param {ContactDeleteManyArgs} args - Arguments to filter Contacts to delete.
     * @example
     * // Delete a few Contacts
     * const { count } = await prisma.contact.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContactDeleteManyArgs>(args?: SelectSubset<T, ContactDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contacts
     * const contact = await prisma.contact.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContactUpdateManyArgs>(args: SelectSubset<T, ContactUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contacts and returns the data updated in the database.
     * @param {ContactUpdateManyAndReturnArgs} args - Arguments to update many Contacts.
     * @example
     * // Update many Contacts
     * const contact = await prisma.contact.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Contacts and only return the `id`
     * const contactWithIdOnly = await prisma.contact.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ContactUpdateManyAndReturnArgs>(args: SelectSubset<T, ContactUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Contact.
     * @param {ContactUpsertArgs} args - Arguments to update or create a Contact.
     * @example
     * // Update or create a Contact
     * const contact = await prisma.contact.upsert({
     *   create: {
     *     // ... data to create a Contact
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contact we want to update
     *   }
     * })
     */
    upsert<T extends ContactUpsertArgs>(args: SelectSubset<T, ContactUpsertArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactCountArgs} args - Arguments to filter Contacts to count.
     * @example
     * // Count the number of Contacts
     * const count = await prisma.contact.count({
     *   where: {
     *     // ... the filter for the Contacts we want to count
     *   }
     * })
    **/
    count<T extends ContactCountArgs>(
      args?: Subset<T, ContactCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContactCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContactAggregateArgs>(args: Subset<T, ContactAggregateArgs>): Prisma.PrismaPromise<GetContactAggregateType<T>>

    /**
     * Group by Contact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContactGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContactGroupByArgs['orderBy'] }
        : { orderBy?: ContactGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContactGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContactGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Contact model
   */
  readonly fields: ContactFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Contact.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContactClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Contact model
   */
  interface ContactFieldRefs {
    readonly id: FieldRef<"Contact", 'Int'>
    readonly name: FieldRef<"Contact", 'String'>
    readonly surname: FieldRef<"Contact", 'String'>
    readonly phone: FieldRef<"Contact", 'String'>
    readonly address: FieldRef<"Contact", 'String'>
    readonly message: FieldRef<"Contact", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Contact findUnique
   */
  export type ContactFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact findUniqueOrThrow
   */
  export type ContactFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact findFirst
   */
  export type ContactFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contacts.
     */
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Contact findFirstOrThrow
   */
  export type ContactFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contacts.
     */
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Contact findMany
   */
  export type ContactFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Filter, which Contacts to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Contact create
   */
  export type ContactCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * The data needed to create a Contact.
     */
    data: XOR<ContactCreateInput, ContactUncheckedCreateInput>
  }

  /**
   * Contact createMany
   */
  export type ContactCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Contacts.
     */
    data: ContactCreateManyInput | ContactCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Contact createManyAndReturn
   */
  export type ContactCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * The data used to create many Contacts.
     */
    data: ContactCreateManyInput | ContactCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Contact update
   */
  export type ContactUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * The data needed to update a Contact.
     */
    data: XOR<ContactUpdateInput, ContactUncheckedUpdateInput>
    /**
     * Choose, which Contact to update.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact updateMany
   */
  export type ContactUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Contacts.
     */
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyInput>
    /**
     * Filter which Contacts to update
     */
    where?: ContactWhereInput
    /**
     * Limit how many Contacts to update.
     */
    limit?: number
  }

  /**
   * Contact updateManyAndReturn
   */
  export type ContactUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * The data used to update Contacts.
     */
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyInput>
    /**
     * Filter which Contacts to update
     */
    where?: ContactWhereInput
    /**
     * Limit how many Contacts to update.
     */
    limit?: number
  }

  /**
   * Contact upsert
   */
  export type ContactUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * The filter to search for the Contact to update in case it exists.
     */
    where: ContactWhereUniqueInput
    /**
     * In case the Contact found by the `where` argument doesn't exist, create a new Contact with this data.
     */
    create: XOR<ContactCreateInput, ContactUncheckedCreateInput>
    /**
     * In case the Contact was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContactUpdateInput, ContactUncheckedUpdateInput>
  }

  /**
   * Contact delete
   */
  export type ContactDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Filter which Contact to delete.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact deleteMany
   */
  export type ContactDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contacts to delete
     */
    where?: ContactWhereInput
    /**
     * Limit how many Contacts to delete.
     */
    limit?: number
  }

  /**
   * Contact without action
   */
  export type ContactDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
  }


  /**
   * Model generalInfo
   */

  export type AggregateGeneralInfo = {
    _count: GeneralInfoCountAggregateOutputType | null
    _avg: GeneralInfoAvgAggregateOutputType | null
    _sum: GeneralInfoSumAggregateOutputType | null
    _min: GeneralInfoMinAggregateOutputType | null
    _max: GeneralInfoMaxAggregateOutputType | null
  }

  export type GeneralInfoAvgAggregateOutputType = {
    id: number | null
  }

  export type GeneralInfoSumAggregateOutputType = {
    id: number | null
  }

  export type GeneralInfoMinAggregateOutputType = {
    id: number | null
    link: string | null
    email: string | null
    phone: string | null
  }

  export type GeneralInfoMaxAggregateOutputType = {
    id: number | null
    link: string | null
    email: string | null
    phone: string | null
  }

  export type GeneralInfoCountAggregateOutputType = {
    id: number
    link: number
    email: number
    phone: number
    _all: number
  }


  export type GeneralInfoAvgAggregateInputType = {
    id?: true
  }

  export type GeneralInfoSumAggregateInputType = {
    id?: true
  }

  export type GeneralInfoMinAggregateInputType = {
    id?: true
    link?: true
    email?: true
    phone?: true
  }

  export type GeneralInfoMaxAggregateInputType = {
    id?: true
    link?: true
    email?: true
    phone?: true
  }

  export type GeneralInfoCountAggregateInputType = {
    id?: true
    link?: true
    email?: true
    phone?: true
    _all?: true
  }

  export type GeneralInfoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which generalInfo to aggregate.
     */
    where?: generalInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of generalInfos to fetch.
     */
    orderBy?: generalInfoOrderByWithRelationInput | generalInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: generalInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` generalInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` generalInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned generalInfos
    **/
    _count?: true | GeneralInfoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GeneralInfoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GeneralInfoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GeneralInfoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GeneralInfoMaxAggregateInputType
  }

  export type GetGeneralInfoAggregateType<T extends GeneralInfoAggregateArgs> = {
        [P in keyof T & keyof AggregateGeneralInfo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGeneralInfo[P]>
      : GetScalarType<T[P], AggregateGeneralInfo[P]>
  }




  export type generalInfoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: generalInfoWhereInput
    orderBy?: generalInfoOrderByWithAggregationInput | generalInfoOrderByWithAggregationInput[]
    by: GeneralInfoScalarFieldEnum[] | GeneralInfoScalarFieldEnum
    having?: generalInfoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GeneralInfoCountAggregateInputType | true
    _avg?: GeneralInfoAvgAggregateInputType
    _sum?: GeneralInfoSumAggregateInputType
    _min?: GeneralInfoMinAggregateInputType
    _max?: GeneralInfoMaxAggregateInputType
  }

  export type GeneralInfoGroupByOutputType = {
    id: number
    link: string
    email: string
    phone: string
    _count: GeneralInfoCountAggregateOutputType | null
    _avg: GeneralInfoAvgAggregateOutputType | null
    _sum: GeneralInfoSumAggregateOutputType | null
    _min: GeneralInfoMinAggregateOutputType | null
    _max: GeneralInfoMaxAggregateOutputType | null
  }

  type GetGeneralInfoGroupByPayload<T extends generalInfoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GeneralInfoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GeneralInfoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GeneralInfoGroupByOutputType[P]>
            : GetScalarType<T[P], GeneralInfoGroupByOutputType[P]>
        }
      >
    >


  export type generalInfoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    link?: boolean
    email?: boolean
    phone?: boolean
  }, ExtArgs["result"]["generalInfo"]>

  export type generalInfoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    link?: boolean
    email?: boolean
    phone?: boolean
  }, ExtArgs["result"]["generalInfo"]>

  export type generalInfoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    link?: boolean
    email?: boolean
    phone?: boolean
  }, ExtArgs["result"]["generalInfo"]>

  export type generalInfoSelectScalar = {
    id?: boolean
    link?: boolean
    email?: boolean
    phone?: boolean
  }

  export type generalInfoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "link" | "email" | "phone", ExtArgs["result"]["generalInfo"]>

  export type $generalInfoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "generalInfo"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      link: string
      email: string
      phone: string
    }, ExtArgs["result"]["generalInfo"]>
    composites: {}
  }

  type generalInfoGetPayload<S extends boolean | null | undefined | generalInfoDefaultArgs> = $Result.GetResult<Prisma.$generalInfoPayload, S>

  type generalInfoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<generalInfoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GeneralInfoCountAggregateInputType | true
    }

  export interface generalInfoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['generalInfo'], meta: { name: 'generalInfo' } }
    /**
     * Find zero or one GeneralInfo that matches the filter.
     * @param {generalInfoFindUniqueArgs} args - Arguments to find a GeneralInfo
     * @example
     * // Get one GeneralInfo
     * const generalInfo = await prisma.generalInfo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends generalInfoFindUniqueArgs>(args: SelectSubset<T, generalInfoFindUniqueArgs<ExtArgs>>): Prisma__generalInfoClient<$Result.GetResult<Prisma.$generalInfoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GeneralInfo that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {generalInfoFindUniqueOrThrowArgs} args - Arguments to find a GeneralInfo
     * @example
     * // Get one GeneralInfo
     * const generalInfo = await prisma.generalInfo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends generalInfoFindUniqueOrThrowArgs>(args: SelectSubset<T, generalInfoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__generalInfoClient<$Result.GetResult<Prisma.$generalInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GeneralInfo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {generalInfoFindFirstArgs} args - Arguments to find a GeneralInfo
     * @example
     * // Get one GeneralInfo
     * const generalInfo = await prisma.generalInfo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends generalInfoFindFirstArgs>(args?: SelectSubset<T, generalInfoFindFirstArgs<ExtArgs>>): Prisma__generalInfoClient<$Result.GetResult<Prisma.$generalInfoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GeneralInfo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {generalInfoFindFirstOrThrowArgs} args - Arguments to find a GeneralInfo
     * @example
     * // Get one GeneralInfo
     * const generalInfo = await prisma.generalInfo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends generalInfoFindFirstOrThrowArgs>(args?: SelectSubset<T, generalInfoFindFirstOrThrowArgs<ExtArgs>>): Prisma__generalInfoClient<$Result.GetResult<Prisma.$generalInfoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GeneralInfos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {generalInfoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GeneralInfos
     * const generalInfos = await prisma.generalInfo.findMany()
     * 
     * // Get first 10 GeneralInfos
     * const generalInfos = await prisma.generalInfo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const generalInfoWithIdOnly = await prisma.generalInfo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends generalInfoFindManyArgs>(args?: SelectSubset<T, generalInfoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$generalInfoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GeneralInfo.
     * @param {generalInfoCreateArgs} args - Arguments to create a GeneralInfo.
     * @example
     * // Create one GeneralInfo
     * const GeneralInfo = await prisma.generalInfo.create({
     *   data: {
     *     // ... data to create a GeneralInfo
     *   }
     * })
     * 
     */
    create<T extends generalInfoCreateArgs>(args: SelectSubset<T, generalInfoCreateArgs<ExtArgs>>): Prisma__generalInfoClient<$Result.GetResult<Prisma.$generalInfoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GeneralInfos.
     * @param {generalInfoCreateManyArgs} args - Arguments to create many GeneralInfos.
     * @example
     * // Create many GeneralInfos
     * const generalInfo = await prisma.generalInfo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends generalInfoCreateManyArgs>(args?: SelectSubset<T, generalInfoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GeneralInfos and returns the data saved in the database.
     * @param {generalInfoCreateManyAndReturnArgs} args - Arguments to create many GeneralInfos.
     * @example
     * // Create many GeneralInfos
     * const generalInfo = await prisma.generalInfo.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GeneralInfos and only return the `id`
     * const generalInfoWithIdOnly = await prisma.generalInfo.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends generalInfoCreateManyAndReturnArgs>(args?: SelectSubset<T, generalInfoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$generalInfoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GeneralInfo.
     * @param {generalInfoDeleteArgs} args - Arguments to delete one GeneralInfo.
     * @example
     * // Delete one GeneralInfo
     * const GeneralInfo = await prisma.generalInfo.delete({
     *   where: {
     *     // ... filter to delete one GeneralInfo
     *   }
     * })
     * 
     */
    delete<T extends generalInfoDeleteArgs>(args: SelectSubset<T, generalInfoDeleteArgs<ExtArgs>>): Prisma__generalInfoClient<$Result.GetResult<Prisma.$generalInfoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GeneralInfo.
     * @param {generalInfoUpdateArgs} args - Arguments to update one GeneralInfo.
     * @example
     * // Update one GeneralInfo
     * const generalInfo = await prisma.generalInfo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends generalInfoUpdateArgs>(args: SelectSubset<T, generalInfoUpdateArgs<ExtArgs>>): Prisma__generalInfoClient<$Result.GetResult<Prisma.$generalInfoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GeneralInfos.
     * @param {generalInfoDeleteManyArgs} args - Arguments to filter GeneralInfos to delete.
     * @example
     * // Delete a few GeneralInfos
     * const { count } = await prisma.generalInfo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends generalInfoDeleteManyArgs>(args?: SelectSubset<T, generalInfoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GeneralInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {generalInfoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GeneralInfos
     * const generalInfo = await prisma.generalInfo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends generalInfoUpdateManyArgs>(args: SelectSubset<T, generalInfoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GeneralInfos and returns the data updated in the database.
     * @param {generalInfoUpdateManyAndReturnArgs} args - Arguments to update many GeneralInfos.
     * @example
     * // Update many GeneralInfos
     * const generalInfo = await prisma.generalInfo.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GeneralInfos and only return the `id`
     * const generalInfoWithIdOnly = await prisma.generalInfo.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends generalInfoUpdateManyAndReturnArgs>(args: SelectSubset<T, generalInfoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$generalInfoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GeneralInfo.
     * @param {generalInfoUpsertArgs} args - Arguments to update or create a GeneralInfo.
     * @example
     * // Update or create a GeneralInfo
     * const generalInfo = await prisma.generalInfo.upsert({
     *   create: {
     *     // ... data to create a GeneralInfo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GeneralInfo we want to update
     *   }
     * })
     */
    upsert<T extends generalInfoUpsertArgs>(args: SelectSubset<T, generalInfoUpsertArgs<ExtArgs>>): Prisma__generalInfoClient<$Result.GetResult<Prisma.$generalInfoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GeneralInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {generalInfoCountArgs} args - Arguments to filter GeneralInfos to count.
     * @example
     * // Count the number of GeneralInfos
     * const count = await prisma.generalInfo.count({
     *   where: {
     *     // ... the filter for the GeneralInfos we want to count
     *   }
     * })
    **/
    count<T extends generalInfoCountArgs>(
      args?: Subset<T, generalInfoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GeneralInfoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GeneralInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneralInfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GeneralInfoAggregateArgs>(args: Subset<T, GeneralInfoAggregateArgs>): Prisma.PrismaPromise<GetGeneralInfoAggregateType<T>>

    /**
     * Group by GeneralInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {generalInfoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends generalInfoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: generalInfoGroupByArgs['orderBy'] }
        : { orderBy?: generalInfoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, generalInfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGeneralInfoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the generalInfo model
   */
  readonly fields: generalInfoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for generalInfo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__generalInfoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the generalInfo model
   */
  interface generalInfoFieldRefs {
    readonly id: FieldRef<"generalInfo", 'Int'>
    readonly link: FieldRef<"generalInfo", 'String'>
    readonly email: FieldRef<"generalInfo", 'String'>
    readonly phone: FieldRef<"generalInfo", 'String'>
  }
    

  // Custom InputTypes
  /**
   * generalInfo findUnique
   */
  export type generalInfoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the generalInfo
     */
    select?: generalInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the generalInfo
     */
    omit?: generalInfoOmit<ExtArgs> | null
    /**
     * Filter, which generalInfo to fetch.
     */
    where: generalInfoWhereUniqueInput
  }

  /**
   * generalInfo findUniqueOrThrow
   */
  export type generalInfoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the generalInfo
     */
    select?: generalInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the generalInfo
     */
    omit?: generalInfoOmit<ExtArgs> | null
    /**
     * Filter, which generalInfo to fetch.
     */
    where: generalInfoWhereUniqueInput
  }

  /**
   * generalInfo findFirst
   */
  export type generalInfoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the generalInfo
     */
    select?: generalInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the generalInfo
     */
    omit?: generalInfoOmit<ExtArgs> | null
    /**
     * Filter, which generalInfo to fetch.
     */
    where?: generalInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of generalInfos to fetch.
     */
    orderBy?: generalInfoOrderByWithRelationInput | generalInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for generalInfos.
     */
    cursor?: generalInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` generalInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` generalInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of generalInfos.
     */
    distinct?: GeneralInfoScalarFieldEnum | GeneralInfoScalarFieldEnum[]
  }

  /**
   * generalInfo findFirstOrThrow
   */
  export type generalInfoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the generalInfo
     */
    select?: generalInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the generalInfo
     */
    omit?: generalInfoOmit<ExtArgs> | null
    /**
     * Filter, which generalInfo to fetch.
     */
    where?: generalInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of generalInfos to fetch.
     */
    orderBy?: generalInfoOrderByWithRelationInput | generalInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for generalInfos.
     */
    cursor?: generalInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` generalInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` generalInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of generalInfos.
     */
    distinct?: GeneralInfoScalarFieldEnum | GeneralInfoScalarFieldEnum[]
  }

  /**
   * generalInfo findMany
   */
  export type generalInfoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the generalInfo
     */
    select?: generalInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the generalInfo
     */
    omit?: generalInfoOmit<ExtArgs> | null
    /**
     * Filter, which generalInfos to fetch.
     */
    where?: generalInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of generalInfos to fetch.
     */
    orderBy?: generalInfoOrderByWithRelationInput | generalInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing generalInfos.
     */
    cursor?: generalInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` generalInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` generalInfos.
     */
    skip?: number
    distinct?: GeneralInfoScalarFieldEnum | GeneralInfoScalarFieldEnum[]
  }

  /**
   * generalInfo create
   */
  export type generalInfoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the generalInfo
     */
    select?: generalInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the generalInfo
     */
    omit?: generalInfoOmit<ExtArgs> | null
    /**
     * The data needed to create a generalInfo.
     */
    data: XOR<generalInfoCreateInput, generalInfoUncheckedCreateInput>
  }

  /**
   * generalInfo createMany
   */
  export type generalInfoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many generalInfos.
     */
    data: generalInfoCreateManyInput | generalInfoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * generalInfo createManyAndReturn
   */
  export type generalInfoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the generalInfo
     */
    select?: generalInfoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the generalInfo
     */
    omit?: generalInfoOmit<ExtArgs> | null
    /**
     * The data used to create many generalInfos.
     */
    data: generalInfoCreateManyInput | generalInfoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * generalInfo update
   */
  export type generalInfoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the generalInfo
     */
    select?: generalInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the generalInfo
     */
    omit?: generalInfoOmit<ExtArgs> | null
    /**
     * The data needed to update a generalInfo.
     */
    data: XOR<generalInfoUpdateInput, generalInfoUncheckedUpdateInput>
    /**
     * Choose, which generalInfo to update.
     */
    where: generalInfoWhereUniqueInput
  }

  /**
   * generalInfo updateMany
   */
  export type generalInfoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update generalInfos.
     */
    data: XOR<generalInfoUpdateManyMutationInput, generalInfoUncheckedUpdateManyInput>
    /**
     * Filter which generalInfos to update
     */
    where?: generalInfoWhereInput
    /**
     * Limit how many generalInfos to update.
     */
    limit?: number
  }

  /**
   * generalInfo updateManyAndReturn
   */
  export type generalInfoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the generalInfo
     */
    select?: generalInfoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the generalInfo
     */
    omit?: generalInfoOmit<ExtArgs> | null
    /**
     * The data used to update generalInfos.
     */
    data: XOR<generalInfoUpdateManyMutationInput, generalInfoUncheckedUpdateManyInput>
    /**
     * Filter which generalInfos to update
     */
    where?: generalInfoWhereInput
    /**
     * Limit how many generalInfos to update.
     */
    limit?: number
  }

  /**
   * generalInfo upsert
   */
  export type generalInfoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the generalInfo
     */
    select?: generalInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the generalInfo
     */
    omit?: generalInfoOmit<ExtArgs> | null
    /**
     * The filter to search for the generalInfo to update in case it exists.
     */
    where: generalInfoWhereUniqueInput
    /**
     * In case the generalInfo found by the `where` argument doesn't exist, create a new generalInfo with this data.
     */
    create: XOR<generalInfoCreateInput, generalInfoUncheckedCreateInput>
    /**
     * In case the generalInfo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<generalInfoUpdateInput, generalInfoUncheckedUpdateInput>
  }

  /**
   * generalInfo delete
   */
  export type generalInfoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the generalInfo
     */
    select?: generalInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the generalInfo
     */
    omit?: generalInfoOmit<ExtArgs> | null
    /**
     * Filter which generalInfo to delete.
     */
    where: generalInfoWhereUniqueInput
  }

  /**
   * generalInfo deleteMany
   */
  export type generalInfoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which generalInfos to delete
     */
    where?: generalInfoWhereInput
    /**
     * Limit how many generalInfos to delete.
     */
    limit?: number
  }

  /**
   * generalInfo without action
   */
  export type generalInfoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the generalInfo
     */
    select?: generalInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the generalInfo
     */
    omit?: generalInfoOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    phone: 'phone',
    password: 'password',
    status: 'status',
    role: 'role',
    regionId: 'regionId',
    stir: 'stir',
    mfo: 'mfo',
    hr: 'hr',
    bank: 'bank',
    oked: 'oked',
    manzil: 'manzil'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const RegionScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type RegionScalarFieldEnum = (typeof RegionScalarFieldEnum)[keyof typeof RegionScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    ip: 'ip',
    userId: 'userId',
    date: 'date'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const LevelScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type LevelScalarFieldEnum = (typeof LevelScalarFieldEnum)[keyof typeof LevelScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    message: 'message',
    star: 'star'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const BrandScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type BrandScalarFieldEnum = (typeof BrandScalarFieldEnum)[keyof typeof BrandScalarFieldEnum]


  export const PowerScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type PowerScalarFieldEnum = (typeof PowerScalarFieldEnum)[keyof typeof PowerScalarFieldEnum]


  export const SizeScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type SizeScalarFieldEnum = (typeof SizeScalarFieldEnum)[keyof typeof SizeScalarFieldEnum]


  export const MasterScalarFieldEnum: {
    id: 'id',
    fullname: 'fullname',
    phone: 'phone',
    isActive: 'isActive',
    image: 'image',
    passportImage: 'passportImage',
    star: 'star',
    about: 'about'
  };

  export type MasterScalarFieldEnum = (typeof MasterScalarFieldEnum)[keyof typeof MasterScalarFieldEnum]


  export const MasterProfessionsScalarFieldEnum: {
    id: 'id',
    minWorking_h: 'minWorking_h',
    professionId: 'professionId',
    levelId: 'levelId',
    price_h: 'price_h',
    price_d: 'price_d',
    experience: 'experience',
    masterId: 'masterId'
  };

  export type MasterProfessionsScalarFieldEnum = (typeof MasterProfessionsScalarFieldEnum)[keyof typeof MasterProfessionsScalarFieldEnum]


  export const ProfessionLevelScalarFieldEnum: {
    id: 'id',
    professionId: 'professionId',
    levelId: 'levelId',
    minWorking_h: 'minWorking_h',
    price_h: 'price_h',
    price_d: 'price_d'
  };

  export type ProfessionLevelScalarFieldEnum = (typeof ProfessionLevelScalarFieldEnum)[keyof typeof ProfessionLevelScalarFieldEnum]


  export const ProfessionScalarFieldEnum: {
    id: 'id',
    name: 'name',
    image: 'image',
    isActive: 'isActive'
  };

  export type ProfessionScalarFieldEnum = (typeof ProfessionScalarFieldEnum)[keyof typeof ProfessionScalarFieldEnum]


  export const ToolsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    desc: 'desc',
    price_h: 'price_h',
    price_d: 'price_d',
    quantity: 'quantity',
    code: 'code',
    brandId: 'brandId',
    isActive: 'isActive',
    powerId: 'powerId',
    sizeId: 'sizeId',
    image: 'image'
  };

  export type ToolsScalarFieldEnum = (typeof ToolsScalarFieldEnum)[keyof typeof ToolsScalarFieldEnum]


  export const OrderScalarFieldEnum: {
    id: 'id',
    total: 'total',
    location: 'location',
    address: 'address',
    date: 'date',
    pay_type: 'pay_type',
    withDelivery: 'withDelivery',
    status: 'status',
    instruction: 'instruction',
    userId: 'userId'
  };

  export type OrderScalarFieldEnum = (typeof OrderScalarFieldEnum)[keyof typeof OrderScalarFieldEnum]


  export const OrderProductScalarFieldEnum: {
    id: 'id',
    isActive: 'isActive',
    timeUnit: 'timeUnit',
    workingTime: 'workingTime',
    price: 'price',
    count: 'count',
    toolId: 'toolId',
    levelId: 'levelId',
    orderId: 'orderId',
    professionId: 'professionId'
  };

  export type OrderProductScalarFieldEnum = (typeof OrderProductScalarFieldEnum)[keyof typeof OrderProductScalarFieldEnum]


  export const FAQScalarFieldEnum: {
    id: 'id',
    answer: 'answer',
    quiteions: 'quiteions'
  };

  export type FAQScalarFieldEnum = (typeof FAQScalarFieldEnum)[keyof typeof FAQScalarFieldEnum]


  export const ContactScalarFieldEnum: {
    id: 'id',
    name: 'name',
    surname: 'surname',
    phone: 'phone',
    address: 'address',
    message: 'message'
  };

  export type ContactScalarFieldEnum = (typeof ContactScalarFieldEnum)[keyof typeof ContactScalarFieldEnum]


  export const GeneralInfoScalarFieldEnum: {
    id: 'id',
    link: 'link',
    email: 'email',
    phone: 'phone'
  };

  export type GeneralInfoScalarFieldEnum = (typeof GeneralInfoScalarFieldEnum)[keyof typeof GeneralInfoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    phone?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    status?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    regionId?: IntFilter<"User"> | number
    stir?: IntNullableFilter<"User"> | number | null
    mfo?: IntNullableFilter<"User"> | number | null
    hr?: IntNullableFilter<"User"> | number | null
    bank?: StringNullableFilter<"User"> | string | null
    oked?: IntNullableFilter<"User"> | number | null
    manzil?: StringNullableFilter<"User"> | string | null
    region?: XOR<RegionScalarRelationFilter, RegionWhereInput>
    sessions?: SessionListRelationFilter
    orders?: OrderListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    password?: SortOrder
    status?: SortOrder
    role?: SortOrder
    regionId?: SortOrder
    stir?: SortOrderInput | SortOrder
    mfo?: SortOrderInput | SortOrder
    hr?: SortOrderInput | SortOrder
    bank?: SortOrderInput | SortOrder
    oked?: SortOrderInput | SortOrder
    manzil?: SortOrderInput | SortOrder
    region?: RegionOrderByWithRelationInput
    sessions?: SessionOrderByRelationAggregateInput
    orders?: OrderOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    phone?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    status?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    regionId?: IntFilter<"User"> | number
    stir?: IntNullableFilter<"User"> | number | null
    mfo?: IntNullableFilter<"User"> | number | null
    hr?: IntNullableFilter<"User"> | number | null
    bank?: StringNullableFilter<"User"> | string | null
    oked?: IntNullableFilter<"User"> | number | null
    manzil?: StringNullableFilter<"User"> | string | null
    region?: XOR<RegionScalarRelationFilter, RegionWhereInput>
    sessions?: SessionListRelationFilter
    orders?: OrderListRelationFilter
  }, "id" | "phone">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    password?: SortOrder
    status?: SortOrder
    role?: SortOrder
    regionId?: SortOrder
    stir?: SortOrderInput | SortOrder
    mfo?: SortOrderInput | SortOrder
    hr?: SortOrderInput | SortOrder
    bank?: SortOrderInput | SortOrder
    oked?: SortOrderInput | SortOrder
    manzil?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    name?: StringWithAggregatesFilter<"User"> | string
    phone?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    status?: StringWithAggregatesFilter<"User"> | string
    role?: StringWithAggregatesFilter<"User"> | string
    regionId?: IntWithAggregatesFilter<"User"> | number
    stir?: IntNullableWithAggregatesFilter<"User"> | number | null
    mfo?: IntNullableWithAggregatesFilter<"User"> | number | null
    hr?: IntNullableWithAggregatesFilter<"User"> | number | null
    bank?: StringNullableWithAggregatesFilter<"User"> | string | null
    oked?: IntNullableWithAggregatesFilter<"User"> | number | null
    manzil?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type RegionWhereInput = {
    AND?: RegionWhereInput | RegionWhereInput[]
    OR?: RegionWhereInput[]
    NOT?: RegionWhereInput | RegionWhereInput[]
    id?: IntFilter<"Region"> | number
    name?: StringFilter<"Region"> | string
    user?: UserListRelationFilter
  }

  export type RegionOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    user?: UserOrderByRelationAggregateInput
  }

  export type RegionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: RegionWhereInput | RegionWhereInput[]
    OR?: RegionWhereInput[]
    NOT?: RegionWhereInput | RegionWhereInput[]
    user?: UserListRelationFilter
  }, "id" | "name">

  export type RegionOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: RegionCountOrderByAggregateInput
    _avg?: RegionAvgOrderByAggregateInput
    _max?: RegionMaxOrderByAggregateInput
    _min?: RegionMinOrderByAggregateInput
    _sum?: RegionSumOrderByAggregateInput
  }

  export type RegionScalarWhereWithAggregatesInput = {
    AND?: RegionScalarWhereWithAggregatesInput | RegionScalarWhereWithAggregatesInput[]
    OR?: RegionScalarWhereWithAggregatesInput[]
    NOT?: RegionScalarWhereWithAggregatesInput | RegionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Region"> | number
    name?: StringWithAggregatesFilter<"Region"> | string
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: IntFilter<"Session"> | number
    ip?: StringFilter<"Session"> | string
    userId?: IntFilter<"Session"> | number
    date?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    ip?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    ip?: StringFilter<"Session"> | string
    userId?: IntFilter<"Session"> | number
    date?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    ip?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _avg?: SessionAvgOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
    _sum?: SessionSumOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Session"> | number
    ip?: StringWithAggregatesFilter<"Session"> | string
    userId?: IntWithAggregatesFilter<"Session"> | number
    date?: DateTimeWithAggregatesFilter<"Session"> | Date | string
  }

  export type LevelWhereInput = {
    AND?: LevelWhereInput | LevelWhereInput[]
    OR?: LevelWhereInput[]
    NOT?: LevelWhereInput | LevelWhereInput[]
    id?: IntFilter<"Level"> | number
    name?: StringFilter<"Level"> | string
    product?: OrderProductListRelationFilter
    professionLevel?: ProfessionLevelListRelationFilter
    masterProfession?: MasterProfessionsListRelationFilter
  }

  export type LevelOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    product?: orderProductOrderByRelationAggregateInput
    professionLevel?: professionLevelOrderByRelationAggregateInput
    masterProfession?: masterProfessionsOrderByRelationAggregateInput
  }

  export type LevelWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: LevelWhereInput | LevelWhereInput[]
    OR?: LevelWhereInput[]
    NOT?: LevelWhereInput | LevelWhereInput[]
    product?: OrderProductListRelationFilter
    professionLevel?: ProfessionLevelListRelationFilter
    masterProfession?: MasterProfessionsListRelationFilter
  }, "id" | "name">

  export type LevelOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: LevelCountOrderByAggregateInput
    _avg?: LevelAvgOrderByAggregateInput
    _max?: LevelMaxOrderByAggregateInput
    _min?: LevelMinOrderByAggregateInput
    _sum?: LevelSumOrderByAggregateInput
  }

  export type LevelScalarWhereWithAggregatesInput = {
    AND?: LevelScalarWhereWithAggregatesInput | LevelScalarWhereWithAggregatesInput[]
    OR?: LevelScalarWhereWithAggregatesInput[]
    NOT?: LevelScalarWhereWithAggregatesInput | LevelScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Level"> | number
    name?: StringWithAggregatesFilter<"Level"> | string
  }

  export type CommentWhereInput = {
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    id?: IntFilter<"Comment"> | number
    message?: StringFilter<"Comment"> | string
    star?: FloatFilter<"Comment"> | number
  }

  export type CommentOrderByWithRelationInput = {
    id?: SortOrder
    message?: SortOrder
    star?: SortOrder
  }

  export type CommentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    message?: StringFilter<"Comment"> | string
    star?: FloatFilter<"Comment"> | number
  }, "id">

  export type CommentOrderByWithAggregationInput = {
    id?: SortOrder
    message?: SortOrder
    star?: SortOrder
    _count?: CommentCountOrderByAggregateInput
    _avg?: CommentAvgOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
    _sum?: CommentSumOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    OR?: CommentScalarWhereWithAggregatesInput[]
    NOT?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Comment"> | number
    message?: StringWithAggregatesFilter<"Comment"> | string
    star?: FloatWithAggregatesFilter<"Comment"> | number
  }

  export type BrandWhereInput = {
    AND?: BrandWhereInput | BrandWhereInput[]
    OR?: BrandWhereInput[]
    NOT?: BrandWhereInput | BrandWhereInput[]
    id?: IntFilter<"Brand"> | number
    name?: StringFilter<"Brand"> | string
    tools?: ToolsListRelationFilter
  }

  export type BrandOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    tools?: ToolsOrderByRelationAggregateInput
  }

  export type BrandWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: BrandWhereInput | BrandWhereInput[]
    OR?: BrandWhereInput[]
    NOT?: BrandWhereInput | BrandWhereInput[]
    tools?: ToolsListRelationFilter
  }, "id" | "name">

  export type BrandOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: BrandCountOrderByAggregateInput
    _avg?: BrandAvgOrderByAggregateInput
    _max?: BrandMaxOrderByAggregateInput
    _min?: BrandMinOrderByAggregateInput
    _sum?: BrandSumOrderByAggregateInput
  }

  export type BrandScalarWhereWithAggregatesInput = {
    AND?: BrandScalarWhereWithAggregatesInput | BrandScalarWhereWithAggregatesInput[]
    OR?: BrandScalarWhereWithAggregatesInput[]
    NOT?: BrandScalarWhereWithAggregatesInput | BrandScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Brand"> | number
    name?: StringWithAggregatesFilter<"Brand"> | string
  }

  export type PowerWhereInput = {
    AND?: PowerWhereInput | PowerWhereInput[]
    OR?: PowerWhereInput[]
    NOT?: PowerWhereInput | PowerWhereInput[]
    id?: IntFilter<"Power"> | number
    name?: StringFilter<"Power"> | string
    tools?: ToolsListRelationFilter
  }

  export type PowerOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    tools?: ToolsOrderByRelationAggregateInput
  }

  export type PowerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: PowerWhereInput | PowerWhereInput[]
    OR?: PowerWhereInput[]
    NOT?: PowerWhereInput | PowerWhereInput[]
    tools?: ToolsListRelationFilter
  }, "id" | "name">

  export type PowerOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: PowerCountOrderByAggregateInput
    _avg?: PowerAvgOrderByAggregateInput
    _max?: PowerMaxOrderByAggregateInput
    _min?: PowerMinOrderByAggregateInput
    _sum?: PowerSumOrderByAggregateInput
  }

  export type PowerScalarWhereWithAggregatesInput = {
    AND?: PowerScalarWhereWithAggregatesInput | PowerScalarWhereWithAggregatesInput[]
    OR?: PowerScalarWhereWithAggregatesInput[]
    NOT?: PowerScalarWhereWithAggregatesInput | PowerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Power"> | number
    name?: StringWithAggregatesFilter<"Power"> | string
  }

  export type SizeWhereInput = {
    AND?: SizeWhereInput | SizeWhereInput[]
    OR?: SizeWhereInput[]
    NOT?: SizeWhereInput | SizeWhereInput[]
    id?: IntFilter<"Size"> | number
    name?: StringFilter<"Size"> | string
    tools?: ToolsListRelationFilter
  }

  export type SizeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    tools?: ToolsOrderByRelationAggregateInput
  }

  export type SizeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: SizeWhereInput | SizeWhereInput[]
    OR?: SizeWhereInput[]
    NOT?: SizeWhereInput | SizeWhereInput[]
    tools?: ToolsListRelationFilter
  }, "id" | "name">

  export type SizeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: SizeCountOrderByAggregateInput
    _avg?: SizeAvgOrderByAggregateInput
    _max?: SizeMaxOrderByAggregateInput
    _min?: SizeMinOrderByAggregateInput
    _sum?: SizeSumOrderByAggregateInput
  }

  export type SizeScalarWhereWithAggregatesInput = {
    AND?: SizeScalarWhereWithAggregatesInput | SizeScalarWhereWithAggregatesInput[]
    OR?: SizeScalarWhereWithAggregatesInput[]
    NOT?: SizeScalarWhereWithAggregatesInput | SizeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Size"> | number
    name?: StringWithAggregatesFilter<"Size"> | string
  }

  export type MasterWhereInput = {
    AND?: MasterWhereInput | MasterWhereInput[]
    OR?: MasterWhereInput[]
    NOT?: MasterWhereInput | MasterWhereInput[]
    id?: IntFilter<"Master"> | number
    fullname?: StringFilter<"Master"> | string
    phone?: StringFilter<"Master"> | string
    isActive?: BoolFilter<"Master"> | boolean
    image?: StringNullableFilter<"Master"> | string | null
    passportImage?: StringNullableFilter<"Master"> | string | null
    star?: FloatNullableFilter<"Master"> | number | null
    about?: StringFilter<"Master"> | string
    masterProfessions?: MasterProfessionsListRelationFilter
  }

  export type MasterOrderByWithRelationInput = {
    id?: SortOrder
    fullname?: SortOrder
    phone?: SortOrder
    isActive?: SortOrder
    image?: SortOrderInput | SortOrder
    passportImage?: SortOrderInput | SortOrder
    star?: SortOrderInput | SortOrder
    about?: SortOrder
    masterProfessions?: masterProfessionsOrderByRelationAggregateInput
  }

  export type MasterWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    phone?: string
    AND?: MasterWhereInput | MasterWhereInput[]
    OR?: MasterWhereInput[]
    NOT?: MasterWhereInput | MasterWhereInput[]
    fullname?: StringFilter<"Master"> | string
    isActive?: BoolFilter<"Master"> | boolean
    image?: StringNullableFilter<"Master"> | string | null
    passportImage?: StringNullableFilter<"Master"> | string | null
    star?: FloatNullableFilter<"Master"> | number | null
    about?: StringFilter<"Master"> | string
    masterProfessions?: MasterProfessionsListRelationFilter
  }, "id" | "phone">

  export type MasterOrderByWithAggregationInput = {
    id?: SortOrder
    fullname?: SortOrder
    phone?: SortOrder
    isActive?: SortOrder
    image?: SortOrderInput | SortOrder
    passportImage?: SortOrderInput | SortOrder
    star?: SortOrderInput | SortOrder
    about?: SortOrder
    _count?: MasterCountOrderByAggregateInput
    _avg?: MasterAvgOrderByAggregateInput
    _max?: MasterMaxOrderByAggregateInput
    _min?: MasterMinOrderByAggregateInput
    _sum?: MasterSumOrderByAggregateInput
  }

  export type MasterScalarWhereWithAggregatesInput = {
    AND?: MasterScalarWhereWithAggregatesInput | MasterScalarWhereWithAggregatesInput[]
    OR?: MasterScalarWhereWithAggregatesInput[]
    NOT?: MasterScalarWhereWithAggregatesInput | MasterScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Master"> | number
    fullname?: StringWithAggregatesFilter<"Master"> | string
    phone?: StringWithAggregatesFilter<"Master"> | string
    isActive?: BoolWithAggregatesFilter<"Master"> | boolean
    image?: StringNullableWithAggregatesFilter<"Master"> | string | null
    passportImage?: StringNullableWithAggregatesFilter<"Master"> | string | null
    star?: FloatNullableWithAggregatesFilter<"Master"> | number | null
    about?: StringWithAggregatesFilter<"Master"> | string
  }

  export type masterProfessionsWhereInput = {
    AND?: masterProfessionsWhereInput | masterProfessionsWhereInput[]
    OR?: masterProfessionsWhereInput[]
    NOT?: masterProfessionsWhereInput | masterProfessionsWhereInput[]
    id?: IntFilter<"masterProfessions"> | number
    minWorking_h?: IntNullableFilter<"masterProfessions"> | number | null
    professionId?: IntFilter<"masterProfessions"> | number
    levelId?: IntFilter<"masterProfessions"> | number
    price_h?: FloatNullableFilter<"masterProfessions"> | number | null
    price_d?: FloatNullableFilter<"masterProfessions"> | number | null
    experience?: IntFilter<"masterProfessions"> | number
    masterId?: IntFilter<"masterProfessions"> | number
    level?: XOR<LevelScalarRelationFilter, LevelWhereInput>
    profession?: XOR<ProfessionScalarRelationFilter, ProfessionWhereInput>
    master?: XOR<MasterScalarRelationFilter, MasterWhereInput>
  }

  export type masterProfessionsOrderByWithRelationInput = {
    id?: SortOrder
    minWorking_h?: SortOrderInput | SortOrder
    professionId?: SortOrder
    levelId?: SortOrder
    price_h?: SortOrderInput | SortOrder
    price_d?: SortOrderInput | SortOrder
    experience?: SortOrder
    masterId?: SortOrder
    level?: LevelOrderByWithRelationInput
    profession?: ProfessionOrderByWithRelationInput
    master?: MasterOrderByWithRelationInput
  }

  export type masterProfessionsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: masterProfessionsWhereInput | masterProfessionsWhereInput[]
    OR?: masterProfessionsWhereInput[]
    NOT?: masterProfessionsWhereInput | masterProfessionsWhereInput[]
    minWorking_h?: IntNullableFilter<"masterProfessions"> | number | null
    professionId?: IntFilter<"masterProfessions"> | number
    levelId?: IntFilter<"masterProfessions"> | number
    price_h?: FloatNullableFilter<"masterProfessions"> | number | null
    price_d?: FloatNullableFilter<"masterProfessions"> | number | null
    experience?: IntFilter<"masterProfessions"> | number
    masterId?: IntFilter<"masterProfessions"> | number
    level?: XOR<LevelScalarRelationFilter, LevelWhereInput>
    profession?: XOR<ProfessionScalarRelationFilter, ProfessionWhereInput>
    master?: XOR<MasterScalarRelationFilter, MasterWhereInput>
  }, "id">

  export type masterProfessionsOrderByWithAggregationInput = {
    id?: SortOrder
    minWorking_h?: SortOrderInput | SortOrder
    professionId?: SortOrder
    levelId?: SortOrder
    price_h?: SortOrderInput | SortOrder
    price_d?: SortOrderInput | SortOrder
    experience?: SortOrder
    masterId?: SortOrder
    _count?: masterProfessionsCountOrderByAggregateInput
    _avg?: masterProfessionsAvgOrderByAggregateInput
    _max?: masterProfessionsMaxOrderByAggregateInput
    _min?: masterProfessionsMinOrderByAggregateInput
    _sum?: masterProfessionsSumOrderByAggregateInput
  }

  export type masterProfessionsScalarWhereWithAggregatesInput = {
    AND?: masterProfessionsScalarWhereWithAggregatesInput | masterProfessionsScalarWhereWithAggregatesInput[]
    OR?: masterProfessionsScalarWhereWithAggregatesInput[]
    NOT?: masterProfessionsScalarWhereWithAggregatesInput | masterProfessionsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"masterProfessions"> | number
    minWorking_h?: IntNullableWithAggregatesFilter<"masterProfessions"> | number | null
    professionId?: IntWithAggregatesFilter<"masterProfessions"> | number
    levelId?: IntWithAggregatesFilter<"masterProfessions"> | number
    price_h?: FloatNullableWithAggregatesFilter<"masterProfessions"> | number | null
    price_d?: FloatNullableWithAggregatesFilter<"masterProfessions"> | number | null
    experience?: IntWithAggregatesFilter<"masterProfessions"> | number
    masterId?: IntWithAggregatesFilter<"masterProfessions"> | number
  }

  export type professionLevelWhereInput = {
    AND?: professionLevelWhereInput | professionLevelWhereInput[]
    OR?: professionLevelWhereInput[]
    NOT?: professionLevelWhereInput | professionLevelWhereInput[]
    id?: IntFilter<"professionLevel"> | number
    professionId?: IntFilter<"professionLevel"> | number
    levelId?: IntFilter<"professionLevel"> | number
    minWorking_h?: IntFilter<"professionLevel"> | number
    price_h?: IntFilter<"professionLevel"> | number
    price_d?: IntFilter<"professionLevel"> | number
    profession?: XOR<ProfessionScalarRelationFilter, ProfessionWhereInput>
    level?: XOR<LevelScalarRelationFilter, LevelWhereInput>
  }

  export type professionLevelOrderByWithRelationInput = {
    id?: SortOrder
    professionId?: SortOrder
    levelId?: SortOrder
    minWorking_h?: SortOrder
    price_h?: SortOrder
    price_d?: SortOrder
    profession?: ProfessionOrderByWithRelationInput
    level?: LevelOrderByWithRelationInput
  }

  export type professionLevelWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: professionLevelWhereInput | professionLevelWhereInput[]
    OR?: professionLevelWhereInput[]
    NOT?: professionLevelWhereInput | professionLevelWhereInput[]
    professionId?: IntFilter<"professionLevel"> | number
    levelId?: IntFilter<"professionLevel"> | number
    minWorking_h?: IntFilter<"professionLevel"> | number
    price_h?: IntFilter<"professionLevel"> | number
    price_d?: IntFilter<"professionLevel"> | number
    profession?: XOR<ProfessionScalarRelationFilter, ProfessionWhereInput>
    level?: XOR<LevelScalarRelationFilter, LevelWhereInput>
  }, "id">

  export type professionLevelOrderByWithAggregationInput = {
    id?: SortOrder
    professionId?: SortOrder
    levelId?: SortOrder
    minWorking_h?: SortOrder
    price_h?: SortOrder
    price_d?: SortOrder
    _count?: professionLevelCountOrderByAggregateInput
    _avg?: professionLevelAvgOrderByAggregateInput
    _max?: professionLevelMaxOrderByAggregateInput
    _min?: professionLevelMinOrderByAggregateInput
    _sum?: professionLevelSumOrderByAggregateInput
  }

  export type professionLevelScalarWhereWithAggregatesInput = {
    AND?: professionLevelScalarWhereWithAggregatesInput | professionLevelScalarWhereWithAggregatesInput[]
    OR?: professionLevelScalarWhereWithAggregatesInput[]
    NOT?: professionLevelScalarWhereWithAggregatesInput | professionLevelScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"professionLevel"> | number
    professionId?: IntWithAggregatesFilter<"professionLevel"> | number
    levelId?: IntWithAggregatesFilter<"professionLevel"> | number
    minWorking_h?: IntWithAggregatesFilter<"professionLevel"> | number
    price_h?: IntWithAggregatesFilter<"professionLevel"> | number
    price_d?: IntWithAggregatesFilter<"professionLevel"> | number
  }

  export type ProfessionWhereInput = {
    AND?: ProfessionWhereInput | ProfessionWhereInput[]
    OR?: ProfessionWhereInput[]
    NOT?: ProfessionWhereInput | ProfessionWhereInput[]
    id?: IntFilter<"Profession"> | number
    name?: StringFilter<"Profession"> | string
    image?: StringFilter<"Profession"> | string
    isActive?: StringFilter<"Profession"> | string
    orderProduct?: OrderProductListRelationFilter
    masterProfession?: MasterProfessionsListRelationFilter
    professionLevel?: ProfessionLevelListRelationFilter
    tools?: ToolsListRelationFilter
  }

  export type ProfessionOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    isActive?: SortOrder
    orderProduct?: orderProductOrderByRelationAggregateInput
    masterProfession?: masterProfessionsOrderByRelationAggregateInput
    professionLevel?: professionLevelOrderByRelationAggregateInput
    tools?: ToolsOrderByRelationAggregateInput
  }

  export type ProfessionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProfessionWhereInput | ProfessionWhereInput[]
    OR?: ProfessionWhereInput[]
    NOT?: ProfessionWhereInput | ProfessionWhereInput[]
    name?: StringFilter<"Profession"> | string
    image?: StringFilter<"Profession"> | string
    isActive?: StringFilter<"Profession"> | string
    orderProduct?: OrderProductListRelationFilter
    masterProfession?: MasterProfessionsListRelationFilter
    professionLevel?: ProfessionLevelListRelationFilter
    tools?: ToolsListRelationFilter
  }, "id">

  export type ProfessionOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    isActive?: SortOrder
    _count?: ProfessionCountOrderByAggregateInput
    _avg?: ProfessionAvgOrderByAggregateInput
    _max?: ProfessionMaxOrderByAggregateInput
    _min?: ProfessionMinOrderByAggregateInput
    _sum?: ProfessionSumOrderByAggregateInput
  }

  export type ProfessionScalarWhereWithAggregatesInput = {
    AND?: ProfessionScalarWhereWithAggregatesInput | ProfessionScalarWhereWithAggregatesInput[]
    OR?: ProfessionScalarWhereWithAggregatesInput[]
    NOT?: ProfessionScalarWhereWithAggregatesInput | ProfessionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Profession"> | number
    name?: StringWithAggregatesFilter<"Profession"> | string
    image?: StringWithAggregatesFilter<"Profession"> | string
    isActive?: StringWithAggregatesFilter<"Profession"> | string
  }

  export type ToolsWhereInput = {
    AND?: ToolsWhereInput | ToolsWhereInput[]
    OR?: ToolsWhereInput[]
    NOT?: ToolsWhereInput | ToolsWhereInput[]
    id?: IntFilter<"Tools"> | number
    name?: StringFilter<"Tools"> | string
    desc?: StringFilter<"Tools"> | string
    price_h?: FloatFilter<"Tools"> | number
    price_d?: FloatFilter<"Tools"> | number
    quantity?: IntFilter<"Tools"> | number
    code?: IntFilter<"Tools"> | number
    brandId?: IntNullableFilter<"Tools"> | number | null
    isActive?: BoolFilter<"Tools"> | boolean
    powerId?: IntNullableFilter<"Tools"> | number | null
    sizeId?: IntNullableFilter<"Tools"> | number | null
    image?: StringFilter<"Tools"> | string
    orderProduct?: OrderProductListRelationFilter
    professions?: ProfessionListRelationFilter
    brand?: XOR<BrandNullableScalarRelationFilter, BrandWhereInput> | null
    power?: XOR<PowerNullableScalarRelationFilter, PowerWhereInput> | null
    size?: XOR<SizeNullableScalarRelationFilter, SizeWhereInput> | null
  }

  export type ToolsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    desc?: SortOrder
    price_h?: SortOrder
    price_d?: SortOrder
    quantity?: SortOrder
    code?: SortOrder
    brandId?: SortOrderInput | SortOrder
    isActive?: SortOrder
    powerId?: SortOrderInput | SortOrder
    sizeId?: SortOrderInput | SortOrder
    image?: SortOrder
    orderProduct?: orderProductOrderByRelationAggregateInput
    professions?: ProfessionOrderByRelationAggregateInput
    brand?: BrandOrderByWithRelationInput
    power?: PowerOrderByWithRelationInput
    size?: SizeOrderByWithRelationInput
  }

  export type ToolsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    code?: number
    AND?: ToolsWhereInput | ToolsWhereInput[]
    OR?: ToolsWhereInput[]
    NOT?: ToolsWhereInput | ToolsWhereInput[]
    name?: StringFilter<"Tools"> | string
    desc?: StringFilter<"Tools"> | string
    price_h?: FloatFilter<"Tools"> | number
    price_d?: FloatFilter<"Tools"> | number
    quantity?: IntFilter<"Tools"> | number
    brandId?: IntNullableFilter<"Tools"> | number | null
    isActive?: BoolFilter<"Tools"> | boolean
    powerId?: IntNullableFilter<"Tools"> | number | null
    sizeId?: IntNullableFilter<"Tools"> | number | null
    image?: StringFilter<"Tools"> | string
    orderProduct?: OrderProductListRelationFilter
    professions?: ProfessionListRelationFilter
    brand?: XOR<BrandNullableScalarRelationFilter, BrandWhereInput> | null
    power?: XOR<PowerNullableScalarRelationFilter, PowerWhereInput> | null
    size?: XOR<SizeNullableScalarRelationFilter, SizeWhereInput> | null
  }, "id" | "code">

  export type ToolsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    desc?: SortOrder
    price_h?: SortOrder
    price_d?: SortOrder
    quantity?: SortOrder
    code?: SortOrder
    brandId?: SortOrderInput | SortOrder
    isActive?: SortOrder
    powerId?: SortOrderInput | SortOrder
    sizeId?: SortOrderInput | SortOrder
    image?: SortOrder
    _count?: ToolsCountOrderByAggregateInput
    _avg?: ToolsAvgOrderByAggregateInput
    _max?: ToolsMaxOrderByAggregateInput
    _min?: ToolsMinOrderByAggregateInput
    _sum?: ToolsSumOrderByAggregateInput
  }

  export type ToolsScalarWhereWithAggregatesInput = {
    AND?: ToolsScalarWhereWithAggregatesInput | ToolsScalarWhereWithAggregatesInput[]
    OR?: ToolsScalarWhereWithAggregatesInput[]
    NOT?: ToolsScalarWhereWithAggregatesInput | ToolsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Tools"> | number
    name?: StringWithAggregatesFilter<"Tools"> | string
    desc?: StringWithAggregatesFilter<"Tools"> | string
    price_h?: FloatWithAggregatesFilter<"Tools"> | number
    price_d?: FloatWithAggregatesFilter<"Tools"> | number
    quantity?: IntWithAggregatesFilter<"Tools"> | number
    code?: IntWithAggregatesFilter<"Tools"> | number
    brandId?: IntNullableWithAggregatesFilter<"Tools"> | number | null
    isActive?: BoolWithAggregatesFilter<"Tools"> | boolean
    powerId?: IntNullableWithAggregatesFilter<"Tools"> | number | null
    sizeId?: IntNullableWithAggregatesFilter<"Tools"> | number | null
    image?: StringWithAggregatesFilter<"Tools"> | string
  }

  export type OrderWhereInput = {
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    id?: IntFilter<"Order"> | number
    total?: FloatFilter<"Order"> | number
    location?: StringFilter<"Order"> | string
    address?: StringFilter<"Order"> | string
    date?: DateTimeFilter<"Order"> | Date | string
    pay_type?: StringFilter<"Order"> | string
    withDelivery?: BoolFilter<"Order"> | boolean
    status?: StringFilter<"Order"> | string
    instruction?: StringFilter<"Order"> | string
    userId?: IntFilter<"Order"> | number
    orderProduct?: OrderProductListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type OrderOrderByWithRelationInput = {
    id?: SortOrder
    total?: SortOrder
    location?: SortOrder
    address?: SortOrder
    date?: SortOrder
    pay_type?: SortOrder
    withDelivery?: SortOrder
    status?: SortOrder
    instruction?: SortOrder
    userId?: SortOrder
    orderProduct?: orderProductOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
  }

  export type OrderWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    total?: FloatFilter<"Order"> | number
    location?: StringFilter<"Order"> | string
    address?: StringFilter<"Order"> | string
    date?: DateTimeFilter<"Order"> | Date | string
    pay_type?: StringFilter<"Order"> | string
    withDelivery?: BoolFilter<"Order"> | boolean
    status?: StringFilter<"Order"> | string
    instruction?: StringFilter<"Order"> | string
    userId?: IntFilter<"Order"> | number
    orderProduct?: OrderProductListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type OrderOrderByWithAggregationInput = {
    id?: SortOrder
    total?: SortOrder
    location?: SortOrder
    address?: SortOrder
    date?: SortOrder
    pay_type?: SortOrder
    withDelivery?: SortOrder
    status?: SortOrder
    instruction?: SortOrder
    userId?: SortOrder
    _count?: OrderCountOrderByAggregateInput
    _avg?: OrderAvgOrderByAggregateInput
    _max?: OrderMaxOrderByAggregateInput
    _min?: OrderMinOrderByAggregateInput
    _sum?: OrderSumOrderByAggregateInput
  }

  export type OrderScalarWhereWithAggregatesInput = {
    AND?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    OR?: OrderScalarWhereWithAggregatesInput[]
    NOT?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Order"> | number
    total?: FloatWithAggregatesFilter<"Order"> | number
    location?: StringWithAggregatesFilter<"Order"> | string
    address?: StringWithAggregatesFilter<"Order"> | string
    date?: DateTimeWithAggregatesFilter<"Order"> | Date | string
    pay_type?: StringWithAggregatesFilter<"Order"> | string
    withDelivery?: BoolWithAggregatesFilter<"Order"> | boolean
    status?: StringWithAggregatesFilter<"Order"> | string
    instruction?: StringWithAggregatesFilter<"Order"> | string
    userId?: IntWithAggregatesFilter<"Order"> | number
  }

  export type orderProductWhereInput = {
    AND?: orderProductWhereInput | orderProductWhereInput[]
    OR?: orderProductWhereInput[]
    NOT?: orderProductWhereInput | orderProductWhereInput[]
    id?: IntFilter<"orderProduct"> | number
    isActive?: StringFilter<"orderProduct"> | string
    timeUnit?: StringFilter<"orderProduct"> | string
    workingTime?: IntFilter<"orderProduct"> | number
    price?: FloatFilter<"orderProduct"> | number
    count?: IntFilter<"orderProduct"> | number
    toolId?: IntNullableFilter<"orderProduct"> | number | null
    levelId?: IntNullableFilter<"orderProduct"> | number | null
    orderId?: IntFilter<"orderProduct"> | number
    professionId?: IntNullableFilter<"orderProduct"> | number | null
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
    tool?: XOR<ToolsNullableScalarRelationFilter, ToolsWhereInput> | null
    level?: XOR<LevelNullableScalarRelationFilter, LevelWhereInput> | null
    professions?: XOR<ProfessionNullableScalarRelationFilter, ProfessionWhereInput> | null
  }

  export type orderProductOrderByWithRelationInput = {
    id?: SortOrder
    isActive?: SortOrder
    timeUnit?: SortOrder
    workingTime?: SortOrder
    price?: SortOrder
    count?: SortOrder
    toolId?: SortOrderInput | SortOrder
    levelId?: SortOrderInput | SortOrder
    orderId?: SortOrder
    professionId?: SortOrderInput | SortOrder
    order?: OrderOrderByWithRelationInput
    tool?: ToolsOrderByWithRelationInput
    level?: LevelOrderByWithRelationInput
    professions?: ProfessionOrderByWithRelationInput
  }

  export type orderProductWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: orderProductWhereInput | orderProductWhereInput[]
    OR?: orderProductWhereInput[]
    NOT?: orderProductWhereInput | orderProductWhereInput[]
    isActive?: StringFilter<"orderProduct"> | string
    timeUnit?: StringFilter<"orderProduct"> | string
    workingTime?: IntFilter<"orderProduct"> | number
    price?: FloatFilter<"orderProduct"> | number
    count?: IntFilter<"orderProduct"> | number
    toolId?: IntNullableFilter<"orderProduct"> | number | null
    levelId?: IntNullableFilter<"orderProduct"> | number | null
    orderId?: IntFilter<"orderProduct"> | number
    professionId?: IntNullableFilter<"orderProduct"> | number | null
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
    tool?: XOR<ToolsNullableScalarRelationFilter, ToolsWhereInput> | null
    level?: XOR<LevelNullableScalarRelationFilter, LevelWhereInput> | null
    professions?: XOR<ProfessionNullableScalarRelationFilter, ProfessionWhereInput> | null
  }, "id">

  export type orderProductOrderByWithAggregationInput = {
    id?: SortOrder
    isActive?: SortOrder
    timeUnit?: SortOrder
    workingTime?: SortOrder
    price?: SortOrder
    count?: SortOrder
    toolId?: SortOrderInput | SortOrder
    levelId?: SortOrderInput | SortOrder
    orderId?: SortOrder
    professionId?: SortOrderInput | SortOrder
    _count?: orderProductCountOrderByAggregateInput
    _avg?: orderProductAvgOrderByAggregateInput
    _max?: orderProductMaxOrderByAggregateInput
    _min?: orderProductMinOrderByAggregateInput
    _sum?: orderProductSumOrderByAggregateInput
  }

  export type orderProductScalarWhereWithAggregatesInput = {
    AND?: orderProductScalarWhereWithAggregatesInput | orderProductScalarWhereWithAggregatesInput[]
    OR?: orderProductScalarWhereWithAggregatesInput[]
    NOT?: orderProductScalarWhereWithAggregatesInput | orderProductScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"orderProduct"> | number
    isActive?: StringWithAggregatesFilter<"orderProduct"> | string
    timeUnit?: StringWithAggregatesFilter<"orderProduct"> | string
    workingTime?: IntWithAggregatesFilter<"orderProduct"> | number
    price?: FloatWithAggregatesFilter<"orderProduct"> | number
    count?: IntWithAggregatesFilter<"orderProduct"> | number
    toolId?: IntNullableWithAggregatesFilter<"orderProduct"> | number | null
    levelId?: IntNullableWithAggregatesFilter<"orderProduct"> | number | null
    orderId?: IntWithAggregatesFilter<"orderProduct"> | number
    professionId?: IntNullableWithAggregatesFilter<"orderProduct"> | number | null
  }

  export type FAQWhereInput = {
    AND?: FAQWhereInput | FAQWhereInput[]
    OR?: FAQWhereInput[]
    NOT?: FAQWhereInput | FAQWhereInput[]
    id?: IntFilter<"FAQ"> | number
    answer?: StringFilter<"FAQ"> | string
    quiteions?: StringFilter<"FAQ"> | string
  }

  export type FAQOrderByWithRelationInput = {
    id?: SortOrder
    answer?: SortOrder
    quiteions?: SortOrder
  }

  export type FAQWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FAQWhereInput | FAQWhereInput[]
    OR?: FAQWhereInput[]
    NOT?: FAQWhereInput | FAQWhereInput[]
    answer?: StringFilter<"FAQ"> | string
    quiteions?: StringFilter<"FAQ"> | string
  }, "id">

  export type FAQOrderByWithAggregationInput = {
    id?: SortOrder
    answer?: SortOrder
    quiteions?: SortOrder
    _count?: FAQCountOrderByAggregateInput
    _avg?: FAQAvgOrderByAggregateInput
    _max?: FAQMaxOrderByAggregateInput
    _min?: FAQMinOrderByAggregateInput
    _sum?: FAQSumOrderByAggregateInput
  }

  export type FAQScalarWhereWithAggregatesInput = {
    AND?: FAQScalarWhereWithAggregatesInput | FAQScalarWhereWithAggregatesInput[]
    OR?: FAQScalarWhereWithAggregatesInput[]
    NOT?: FAQScalarWhereWithAggregatesInput | FAQScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FAQ"> | number
    answer?: StringWithAggregatesFilter<"FAQ"> | string
    quiteions?: StringWithAggregatesFilter<"FAQ"> | string
  }

  export type ContactWhereInput = {
    AND?: ContactWhereInput | ContactWhereInput[]
    OR?: ContactWhereInput[]
    NOT?: ContactWhereInput | ContactWhereInput[]
    id?: IntFilter<"Contact"> | number
    name?: StringFilter<"Contact"> | string
    surname?: StringFilter<"Contact"> | string
    phone?: StringFilter<"Contact"> | string
    address?: StringFilter<"Contact"> | string
    message?: StringFilter<"Contact"> | string
  }

  export type ContactOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    message?: SortOrder
  }

  export type ContactWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ContactWhereInput | ContactWhereInput[]
    OR?: ContactWhereInput[]
    NOT?: ContactWhereInput | ContactWhereInput[]
    name?: StringFilter<"Contact"> | string
    surname?: StringFilter<"Contact"> | string
    phone?: StringFilter<"Contact"> | string
    address?: StringFilter<"Contact"> | string
    message?: StringFilter<"Contact"> | string
  }, "id">

  export type ContactOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    message?: SortOrder
    _count?: ContactCountOrderByAggregateInput
    _avg?: ContactAvgOrderByAggregateInput
    _max?: ContactMaxOrderByAggregateInput
    _min?: ContactMinOrderByAggregateInput
    _sum?: ContactSumOrderByAggregateInput
  }

  export type ContactScalarWhereWithAggregatesInput = {
    AND?: ContactScalarWhereWithAggregatesInput | ContactScalarWhereWithAggregatesInput[]
    OR?: ContactScalarWhereWithAggregatesInput[]
    NOT?: ContactScalarWhereWithAggregatesInput | ContactScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Contact"> | number
    name?: StringWithAggregatesFilter<"Contact"> | string
    surname?: StringWithAggregatesFilter<"Contact"> | string
    phone?: StringWithAggregatesFilter<"Contact"> | string
    address?: StringWithAggregatesFilter<"Contact"> | string
    message?: StringWithAggregatesFilter<"Contact"> | string
  }

  export type generalInfoWhereInput = {
    AND?: generalInfoWhereInput | generalInfoWhereInput[]
    OR?: generalInfoWhereInput[]
    NOT?: generalInfoWhereInput | generalInfoWhereInput[]
    id?: IntFilter<"generalInfo"> | number
    link?: StringFilter<"generalInfo"> | string
    email?: StringFilter<"generalInfo"> | string
    phone?: StringFilter<"generalInfo"> | string
  }

  export type generalInfoOrderByWithRelationInput = {
    id?: SortOrder
    link?: SortOrder
    email?: SortOrder
    phone?: SortOrder
  }

  export type generalInfoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: generalInfoWhereInput | generalInfoWhereInput[]
    OR?: generalInfoWhereInput[]
    NOT?: generalInfoWhereInput | generalInfoWhereInput[]
    link?: StringFilter<"generalInfo"> | string
    email?: StringFilter<"generalInfo"> | string
    phone?: StringFilter<"generalInfo"> | string
  }, "id">

  export type generalInfoOrderByWithAggregationInput = {
    id?: SortOrder
    link?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    _count?: generalInfoCountOrderByAggregateInput
    _avg?: generalInfoAvgOrderByAggregateInput
    _max?: generalInfoMaxOrderByAggregateInput
    _min?: generalInfoMinOrderByAggregateInput
    _sum?: generalInfoSumOrderByAggregateInput
  }

  export type generalInfoScalarWhereWithAggregatesInput = {
    AND?: generalInfoScalarWhereWithAggregatesInput | generalInfoScalarWhereWithAggregatesInput[]
    OR?: generalInfoScalarWhereWithAggregatesInput[]
    NOT?: generalInfoScalarWhereWithAggregatesInput | generalInfoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"generalInfo"> | number
    link?: StringWithAggregatesFilter<"generalInfo"> | string
    email?: StringWithAggregatesFilter<"generalInfo"> | string
    phone?: StringWithAggregatesFilter<"generalInfo"> | string
  }

  export type UserCreateInput = {
    name: string
    phone: string
    password: string
    status?: string
    role: string
    stir?: number | null
    mfo?: number | null
    hr?: number | null
    bank?: string | null
    oked?: number | null
    manzil?: string | null
    region: RegionCreateNestedOneWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name: string
    phone: string
    password: string
    status?: string
    role: string
    regionId: number
    stir?: number | null
    mfo?: number | null
    hr?: number | null
    bank?: string | null
    oked?: number | null
    manzil?: string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    stir?: NullableIntFieldUpdateOperationsInput | number | null
    mfo?: NullableIntFieldUpdateOperationsInput | number | null
    hr?: NullableIntFieldUpdateOperationsInput | number | null
    bank?: NullableStringFieldUpdateOperationsInput | string | null
    oked?: NullableIntFieldUpdateOperationsInput | number | null
    manzil?: NullableStringFieldUpdateOperationsInput | string | null
    region?: RegionUpdateOneRequiredWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    orders?: OrderUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    regionId?: IntFieldUpdateOperationsInput | number
    stir?: NullableIntFieldUpdateOperationsInput | number | null
    mfo?: NullableIntFieldUpdateOperationsInput | number | null
    hr?: NullableIntFieldUpdateOperationsInput | number | null
    bank?: NullableStringFieldUpdateOperationsInput | string | null
    oked?: NullableIntFieldUpdateOperationsInput | number | null
    manzil?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    name: string
    phone: string
    password: string
    status?: string
    role: string
    regionId: number
    stir?: number | null
    mfo?: number | null
    hr?: number | null
    bank?: string | null
    oked?: number | null
    manzil?: string | null
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    stir?: NullableIntFieldUpdateOperationsInput | number | null
    mfo?: NullableIntFieldUpdateOperationsInput | number | null
    hr?: NullableIntFieldUpdateOperationsInput | number | null
    bank?: NullableStringFieldUpdateOperationsInput | string | null
    oked?: NullableIntFieldUpdateOperationsInput | number | null
    manzil?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    regionId?: IntFieldUpdateOperationsInput | number
    stir?: NullableIntFieldUpdateOperationsInput | number | null
    mfo?: NullableIntFieldUpdateOperationsInput | number | null
    hr?: NullableIntFieldUpdateOperationsInput | number | null
    bank?: NullableStringFieldUpdateOperationsInput | string | null
    oked?: NullableIntFieldUpdateOperationsInput | number | null
    manzil?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RegionCreateInput = {
    name: string
    user?: UserCreateNestedManyWithoutRegionInput
  }

  export type RegionUncheckedCreateInput = {
    id?: number
    name: string
    user?: UserUncheckedCreateNestedManyWithoutRegionInput
  }

  export type RegionUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateManyWithoutRegionNestedInput
  }

  export type RegionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    user?: UserUncheckedUpdateManyWithoutRegionNestedInput
  }

  export type RegionCreateManyInput = {
    id?: number
    name: string
  }

  export type RegionUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type RegionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SessionCreateInput = {
    ip: string
    date?: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: number
    ip: string
    userId: number
    date?: Date | string
  }

  export type SessionUpdateInput = {
    ip?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    ip?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id?: number
    ip: string
    userId: number
    date?: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    ip?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    ip?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LevelCreateInput = {
    name: string
    product?: orderProductCreateNestedManyWithoutLevelInput
    professionLevel?: professionLevelCreateNestedManyWithoutLevelInput
    masterProfession?: masterProfessionsCreateNestedManyWithoutLevelInput
  }

  export type LevelUncheckedCreateInput = {
    id?: number
    name: string
    product?: orderProductUncheckedCreateNestedManyWithoutLevelInput
    professionLevel?: professionLevelUncheckedCreateNestedManyWithoutLevelInput
    masterProfession?: masterProfessionsUncheckedCreateNestedManyWithoutLevelInput
  }

  export type LevelUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    product?: orderProductUpdateManyWithoutLevelNestedInput
    professionLevel?: professionLevelUpdateManyWithoutLevelNestedInput
    masterProfession?: masterProfessionsUpdateManyWithoutLevelNestedInput
  }

  export type LevelUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    product?: orderProductUncheckedUpdateManyWithoutLevelNestedInput
    professionLevel?: professionLevelUncheckedUpdateManyWithoutLevelNestedInput
    masterProfession?: masterProfessionsUncheckedUpdateManyWithoutLevelNestedInput
  }

  export type LevelCreateManyInput = {
    id?: number
    name: string
  }

  export type LevelUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type LevelUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CommentCreateInput = {
    message: string
    star: number
  }

  export type CommentUncheckedCreateInput = {
    id?: number
    message: string
    star: number
  }

  export type CommentUpdateInput = {
    message?: StringFieldUpdateOperationsInput | string
    star?: FloatFieldUpdateOperationsInput | number
  }

  export type CommentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    star?: FloatFieldUpdateOperationsInput | number
  }

  export type CommentCreateManyInput = {
    id?: number
    message: string
    star: number
  }

  export type CommentUpdateManyMutationInput = {
    message?: StringFieldUpdateOperationsInput | string
    star?: FloatFieldUpdateOperationsInput | number
  }

  export type CommentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    star?: FloatFieldUpdateOperationsInput | number
  }

  export type BrandCreateInput = {
    name: string
    tools?: ToolsCreateNestedManyWithoutBrandInput
  }

  export type BrandUncheckedCreateInput = {
    id?: number
    name: string
    tools?: ToolsUncheckedCreateNestedManyWithoutBrandInput
  }

  export type BrandUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    tools?: ToolsUpdateManyWithoutBrandNestedInput
  }

  export type BrandUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    tools?: ToolsUncheckedUpdateManyWithoutBrandNestedInput
  }

  export type BrandCreateManyInput = {
    id?: number
    name: string
  }

  export type BrandUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type BrandUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PowerCreateInput = {
    name: string
    tools?: ToolsCreateNestedManyWithoutPowerInput
  }

  export type PowerUncheckedCreateInput = {
    id?: number
    name: string
    tools?: ToolsUncheckedCreateNestedManyWithoutPowerInput
  }

  export type PowerUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    tools?: ToolsUpdateManyWithoutPowerNestedInput
  }

  export type PowerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    tools?: ToolsUncheckedUpdateManyWithoutPowerNestedInput
  }

  export type PowerCreateManyInput = {
    id?: number
    name: string
  }

  export type PowerUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PowerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SizeCreateInput = {
    name: string
    tools?: ToolsCreateNestedManyWithoutSizeInput
  }

  export type SizeUncheckedCreateInput = {
    id?: number
    name: string
    tools?: ToolsUncheckedCreateNestedManyWithoutSizeInput
  }

  export type SizeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    tools?: ToolsUpdateManyWithoutSizeNestedInput
  }

  export type SizeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    tools?: ToolsUncheckedUpdateManyWithoutSizeNestedInput
  }

  export type SizeCreateManyInput = {
    id?: number
    name: string
  }

  export type SizeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SizeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type MasterCreateInput = {
    fullname: string
    phone: string
    isActive?: boolean
    image?: string | null
    passportImage?: string | null
    star?: number | null
    about: string
    masterProfessions?: masterProfessionsCreateNestedManyWithoutMasterInput
  }

  export type MasterUncheckedCreateInput = {
    id?: number
    fullname: string
    phone: string
    isActive?: boolean
    image?: string | null
    passportImage?: string | null
    star?: number | null
    about: string
    masterProfessions?: masterProfessionsUncheckedCreateNestedManyWithoutMasterInput
  }

  export type MasterUpdateInput = {
    fullname?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    passportImage?: NullableStringFieldUpdateOperationsInput | string | null
    star?: NullableFloatFieldUpdateOperationsInput | number | null
    about?: StringFieldUpdateOperationsInput | string
    masterProfessions?: masterProfessionsUpdateManyWithoutMasterNestedInput
  }

  export type MasterUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullname?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    passportImage?: NullableStringFieldUpdateOperationsInput | string | null
    star?: NullableFloatFieldUpdateOperationsInput | number | null
    about?: StringFieldUpdateOperationsInput | string
    masterProfessions?: masterProfessionsUncheckedUpdateManyWithoutMasterNestedInput
  }

  export type MasterCreateManyInput = {
    id?: number
    fullname: string
    phone: string
    isActive?: boolean
    image?: string | null
    passportImage?: string | null
    star?: number | null
    about: string
  }

  export type MasterUpdateManyMutationInput = {
    fullname?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    passportImage?: NullableStringFieldUpdateOperationsInput | string | null
    star?: NullableFloatFieldUpdateOperationsInput | number | null
    about?: StringFieldUpdateOperationsInput | string
  }

  export type MasterUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullname?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    passportImage?: NullableStringFieldUpdateOperationsInput | string | null
    star?: NullableFloatFieldUpdateOperationsInput | number | null
    about?: StringFieldUpdateOperationsInput | string
  }

  export type masterProfessionsCreateInput = {
    minWorking_h?: number | null
    price_h?: number | null
    price_d?: number | null
    experience: number
    level: LevelCreateNestedOneWithoutMasterProfessionInput
    profession: ProfessionCreateNestedOneWithoutMasterProfessionInput
    master: MasterCreateNestedOneWithoutMasterProfessionsInput
  }

  export type masterProfessionsUncheckedCreateInput = {
    id?: number
    minWorking_h?: number | null
    professionId: number
    levelId: number
    price_h?: number | null
    price_d?: number | null
    experience: number
    masterId: number
  }

  export type masterProfessionsUpdateInput = {
    minWorking_h?: NullableIntFieldUpdateOperationsInput | number | null
    price_h?: NullableFloatFieldUpdateOperationsInput | number | null
    price_d?: NullableFloatFieldUpdateOperationsInput | number | null
    experience?: IntFieldUpdateOperationsInput | number
    level?: LevelUpdateOneRequiredWithoutMasterProfessionNestedInput
    profession?: ProfessionUpdateOneRequiredWithoutMasterProfessionNestedInput
    master?: MasterUpdateOneRequiredWithoutMasterProfessionsNestedInput
  }

  export type masterProfessionsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    minWorking_h?: NullableIntFieldUpdateOperationsInput | number | null
    professionId?: IntFieldUpdateOperationsInput | number
    levelId?: IntFieldUpdateOperationsInput | number
    price_h?: NullableFloatFieldUpdateOperationsInput | number | null
    price_d?: NullableFloatFieldUpdateOperationsInput | number | null
    experience?: IntFieldUpdateOperationsInput | number
    masterId?: IntFieldUpdateOperationsInput | number
  }

  export type masterProfessionsCreateManyInput = {
    id?: number
    minWorking_h?: number | null
    professionId: number
    levelId: number
    price_h?: number | null
    price_d?: number | null
    experience: number
    masterId: number
  }

  export type masterProfessionsUpdateManyMutationInput = {
    minWorking_h?: NullableIntFieldUpdateOperationsInput | number | null
    price_h?: NullableFloatFieldUpdateOperationsInput | number | null
    price_d?: NullableFloatFieldUpdateOperationsInput | number | null
    experience?: IntFieldUpdateOperationsInput | number
  }

  export type masterProfessionsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    minWorking_h?: NullableIntFieldUpdateOperationsInput | number | null
    professionId?: IntFieldUpdateOperationsInput | number
    levelId?: IntFieldUpdateOperationsInput | number
    price_h?: NullableFloatFieldUpdateOperationsInput | number | null
    price_d?: NullableFloatFieldUpdateOperationsInput | number | null
    experience?: IntFieldUpdateOperationsInput | number
    masterId?: IntFieldUpdateOperationsInput | number
  }

  export type professionLevelCreateInput = {
    minWorking_h: number
    price_h: number
    price_d: number
    profession: ProfessionCreateNestedOneWithoutProfessionLevelInput
    level: LevelCreateNestedOneWithoutProfessionLevelInput
  }

  export type professionLevelUncheckedCreateInput = {
    id?: number
    professionId: number
    levelId: number
    minWorking_h: number
    price_h: number
    price_d: number
  }

  export type professionLevelUpdateInput = {
    minWorking_h?: IntFieldUpdateOperationsInput | number
    price_h?: IntFieldUpdateOperationsInput | number
    price_d?: IntFieldUpdateOperationsInput | number
    profession?: ProfessionUpdateOneRequiredWithoutProfessionLevelNestedInput
    level?: LevelUpdateOneRequiredWithoutProfessionLevelNestedInput
  }

  export type professionLevelUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    professionId?: IntFieldUpdateOperationsInput | number
    levelId?: IntFieldUpdateOperationsInput | number
    minWorking_h?: IntFieldUpdateOperationsInput | number
    price_h?: IntFieldUpdateOperationsInput | number
    price_d?: IntFieldUpdateOperationsInput | number
  }

  export type professionLevelCreateManyInput = {
    id?: number
    professionId: number
    levelId: number
    minWorking_h: number
    price_h: number
    price_d: number
  }

  export type professionLevelUpdateManyMutationInput = {
    minWorking_h?: IntFieldUpdateOperationsInput | number
    price_h?: IntFieldUpdateOperationsInput | number
    price_d?: IntFieldUpdateOperationsInput | number
  }

  export type professionLevelUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    professionId?: IntFieldUpdateOperationsInput | number
    levelId?: IntFieldUpdateOperationsInput | number
    minWorking_h?: IntFieldUpdateOperationsInput | number
    price_h?: IntFieldUpdateOperationsInput | number
    price_d?: IntFieldUpdateOperationsInput | number
  }

  export type ProfessionCreateInput = {
    name: string
    image: string
    isActive: string
    orderProduct?: orderProductCreateNestedManyWithoutProfessionsInput
    masterProfession?: masterProfessionsCreateNestedManyWithoutProfessionInput
    professionLevel?: professionLevelCreateNestedManyWithoutProfessionInput
    tools?: ToolsCreateNestedManyWithoutProfessionsInput
  }

  export type ProfessionUncheckedCreateInput = {
    id?: number
    name: string
    image: string
    isActive: string
    orderProduct?: orderProductUncheckedCreateNestedManyWithoutProfessionsInput
    masterProfession?: masterProfessionsUncheckedCreateNestedManyWithoutProfessionInput
    professionLevel?: professionLevelUncheckedCreateNestedManyWithoutProfessionInput
    tools?: ToolsUncheckedCreateNestedManyWithoutProfessionsInput
  }

  export type ProfessionUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: StringFieldUpdateOperationsInput | string
    orderProduct?: orderProductUpdateManyWithoutProfessionsNestedInput
    masterProfession?: masterProfessionsUpdateManyWithoutProfessionNestedInput
    professionLevel?: professionLevelUpdateManyWithoutProfessionNestedInput
    tools?: ToolsUpdateManyWithoutProfessionsNestedInput
  }

  export type ProfessionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: StringFieldUpdateOperationsInput | string
    orderProduct?: orderProductUncheckedUpdateManyWithoutProfessionsNestedInput
    masterProfession?: masterProfessionsUncheckedUpdateManyWithoutProfessionNestedInput
    professionLevel?: professionLevelUncheckedUpdateManyWithoutProfessionNestedInput
    tools?: ToolsUncheckedUpdateManyWithoutProfessionsNestedInput
  }

  export type ProfessionCreateManyInput = {
    id?: number
    name: string
    image: string
    isActive: string
  }

  export type ProfessionUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: StringFieldUpdateOperationsInput | string
  }

  export type ProfessionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: StringFieldUpdateOperationsInput | string
  }

  export type ToolsCreateInput = {
    name: string
    desc: string
    price_h: number
    price_d: number
    quantity: number
    code: number
    isActive?: boolean
    image: string
    orderProduct?: orderProductCreateNestedManyWithoutToolInput
    professions?: ProfessionCreateNestedManyWithoutToolsInput
    brand?: BrandCreateNestedOneWithoutToolsInput
    power?: PowerCreateNestedOneWithoutToolsInput
    size?: SizeCreateNestedOneWithoutToolsInput
  }

  export type ToolsUncheckedCreateInput = {
    id?: number
    name: string
    desc: string
    price_h: number
    price_d: number
    quantity: number
    code: number
    brandId?: number | null
    isActive?: boolean
    powerId?: number | null
    sizeId?: number | null
    image: string
    orderProduct?: orderProductUncheckedCreateNestedManyWithoutToolInput
    professions?: ProfessionUncheckedCreateNestedManyWithoutToolsInput
  }

  export type ToolsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    price_h?: FloatFieldUpdateOperationsInput | number
    price_d?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    image?: StringFieldUpdateOperationsInput | string
    orderProduct?: orderProductUpdateManyWithoutToolNestedInput
    professions?: ProfessionUpdateManyWithoutToolsNestedInput
    brand?: BrandUpdateOneWithoutToolsNestedInput
    power?: PowerUpdateOneWithoutToolsNestedInput
    size?: SizeUpdateOneWithoutToolsNestedInput
  }

  export type ToolsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    price_h?: FloatFieldUpdateOperationsInput | number
    price_d?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: IntFieldUpdateOperationsInput | number
    brandId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    powerId?: NullableIntFieldUpdateOperationsInput | number | null
    sizeId?: NullableIntFieldUpdateOperationsInput | number | null
    image?: StringFieldUpdateOperationsInput | string
    orderProduct?: orderProductUncheckedUpdateManyWithoutToolNestedInput
    professions?: ProfessionUncheckedUpdateManyWithoutToolsNestedInput
  }

  export type ToolsCreateManyInput = {
    id?: number
    name: string
    desc: string
    price_h: number
    price_d: number
    quantity: number
    code: number
    brandId?: number | null
    isActive?: boolean
    powerId?: number | null
    sizeId?: number | null
    image: string
  }

  export type ToolsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    price_h?: FloatFieldUpdateOperationsInput | number
    price_d?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    image?: StringFieldUpdateOperationsInput | string
  }

  export type ToolsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    price_h?: FloatFieldUpdateOperationsInput | number
    price_d?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: IntFieldUpdateOperationsInput | number
    brandId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    powerId?: NullableIntFieldUpdateOperationsInput | number | null
    sizeId?: NullableIntFieldUpdateOperationsInput | number | null
    image?: StringFieldUpdateOperationsInput | string
  }

  export type OrderCreateInput = {
    total: number
    location: string
    address: string
    date?: Date | string
    pay_type: string
    withDelivery: boolean
    status: string
    instruction: string
    orderProduct?: orderProductCreateNestedManyWithoutOrderInput
    user: UserCreateNestedOneWithoutOrdersInput
  }

  export type OrderUncheckedCreateInput = {
    id?: number
    total: number
    location: string
    address: string
    date?: Date | string
    pay_type: string
    withDelivery: boolean
    status: string
    instruction: string
    userId: number
    orderProduct?: orderProductUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderUpdateInput = {
    total?: FloatFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    pay_type?: StringFieldUpdateOperationsInput | string
    withDelivery?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    instruction?: StringFieldUpdateOperationsInput | string
    orderProduct?: orderProductUpdateManyWithoutOrderNestedInput
    user?: UserUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type OrderUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    pay_type?: StringFieldUpdateOperationsInput | string
    withDelivery?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    instruction?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    orderProduct?: orderProductUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderCreateManyInput = {
    id?: number
    total: number
    location: string
    address: string
    date?: Date | string
    pay_type: string
    withDelivery: boolean
    status: string
    instruction: string
    userId: number
  }

  export type OrderUpdateManyMutationInput = {
    total?: FloatFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    pay_type?: StringFieldUpdateOperationsInput | string
    withDelivery?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    instruction?: StringFieldUpdateOperationsInput | string
  }

  export type OrderUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    pay_type?: StringFieldUpdateOperationsInput | string
    withDelivery?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    instruction?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type orderProductCreateInput = {
    isActive: string
    timeUnit: string
    workingTime: number
    price: number
    count: number
    order: OrderCreateNestedOneWithoutOrderProductInput
    tool?: ToolsCreateNestedOneWithoutOrderProductInput
    level?: LevelCreateNestedOneWithoutProductInput
    professions?: ProfessionCreateNestedOneWithoutOrderProductInput
  }

  export type orderProductUncheckedCreateInput = {
    id?: number
    isActive: string
    timeUnit: string
    workingTime: number
    price: number
    count: number
    toolId?: number | null
    levelId?: number | null
    orderId: number
    professionId?: number | null
  }

  export type orderProductUpdateInput = {
    isActive?: StringFieldUpdateOperationsInput | string
    timeUnit?: StringFieldUpdateOperationsInput | string
    workingTime?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    order?: OrderUpdateOneRequiredWithoutOrderProductNestedInput
    tool?: ToolsUpdateOneWithoutOrderProductNestedInput
    level?: LevelUpdateOneWithoutProductNestedInput
    professions?: ProfessionUpdateOneWithoutOrderProductNestedInput
  }

  export type orderProductUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    isActive?: StringFieldUpdateOperationsInput | string
    timeUnit?: StringFieldUpdateOperationsInput | string
    workingTime?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    toolId?: NullableIntFieldUpdateOperationsInput | number | null
    levelId?: NullableIntFieldUpdateOperationsInput | number | null
    orderId?: IntFieldUpdateOperationsInput | number
    professionId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type orderProductCreateManyInput = {
    id?: number
    isActive: string
    timeUnit: string
    workingTime: number
    price: number
    count: number
    toolId?: number | null
    levelId?: number | null
    orderId: number
    professionId?: number | null
  }

  export type orderProductUpdateManyMutationInput = {
    isActive?: StringFieldUpdateOperationsInput | string
    timeUnit?: StringFieldUpdateOperationsInput | string
    workingTime?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
  }

  export type orderProductUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    isActive?: StringFieldUpdateOperationsInput | string
    timeUnit?: StringFieldUpdateOperationsInput | string
    workingTime?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    toolId?: NullableIntFieldUpdateOperationsInput | number | null
    levelId?: NullableIntFieldUpdateOperationsInput | number | null
    orderId?: IntFieldUpdateOperationsInput | number
    professionId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FAQCreateInput = {
    answer: string
    quiteions: string
  }

  export type FAQUncheckedCreateInput = {
    id?: number
    answer: string
    quiteions: string
  }

  export type FAQUpdateInput = {
    answer?: StringFieldUpdateOperationsInput | string
    quiteions?: StringFieldUpdateOperationsInput | string
  }

  export type FAQUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    answer?: StringFieldUpdateOperationsInput | string
    quiteions?: StringFieldUpdateOperationsInput | string
  }

  export type FAQCreateManyInput = {
    id?: number
    answer: string
    quiteions: string
  }

  export type FAQUpdateManyMutationInput = {
    answer?: StringFieldUpdateOperationsInput | string
    quiteions?: StringFieldUpdateOperationsInput | string
  }

  export type FAQUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    answer?: StringFieldUpdateOperationsInput | string
    quiteions?: StringFieldUpdateOperationsInput | string
  }

  export type ContactCreateInput = {
    name: string
    surname: string
    phone: string
    address: string
    message: string
  }

  export type ContactUncheckedCreateInput = {
    id?: number
    name: string
    surname: string
    phone: string
    address: string
    message: string
  }

  export type ContactUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
  }

  export type ContactUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
  }

  export type ContactCreateManyInput = {
    id?: number
    name: string
    surname: string
    phone: string
    address: string
    message: string
  }

  export type ContactUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
  }

  export type ContactUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
  }

  export type generalInfoCreateInput = {
    link: string
    email: string
    phone: string
  }

  export type generalInfoUncheckedCreateInput = {
    id?: number
    link: string
    email: string
    phone: string
  }

  export type generalInfoUpdateInput = {
    link?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type generalInfoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    link?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type generalInfoCreateManyInput = {
    id?: number
    link: string
    email: string
    phone: string
  }

  export type generalInfoUpdateManyMutationInput = {
    link?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type generalInfoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    link?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type RegionScalarRelationFilter = {
    is?: RegionWhereInput
    isNot?: RegionWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type OrderListRelationFilter = {
    every?: OrderWhereInput
    some?: OrderWhereInput
    none?: OrderWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    password?: SortOrder
    status?: SortOrder
    role?: SortOrder
    regionId?: SortOrder
    stir?: SortOrder
    mfo?: SortOrder
    hr?: SortOrder
    bank?: SortOrder
    oked?: SortOrder
    manzil?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    regionId?: SortOrder
    stir?: SortOrder
    mfo?: SortOrder
    hr?: SortOrder
    oked?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    password?: SortOrder
    status?: SortOrder
    role?: SortOrder
    regionId?: SortOrder
    stir?: SortOrder
    mfo?: SortOrder
    hr?: SortOrder
    bank?: SortOrder
    oked?: SortOrder
    manzil?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    password?: SortOrder
    status?: SortOrder
    role?: SortOrder
    regionId?: SortOrder
    stir?: SortOrder
    mfo?: SortOrder
    hr?: SortOrder
    bank?: SortOrder
    oked?: SortOrder
    manzil?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    regionId?: SortOrder
    stir?: SortOrder
    mfo?: SortOrder
    hr?: SortOrder
    oked?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RegionCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type RegionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RegionMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type RegionMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type RegionSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    ip?: SortOrder
    userId?: SortOrder
    date?: SortOrder
  }

  export type SessionAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    ip?: SortOrder
    userId?: SortOrder
    date?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    ip?: SortOrder
    userId?: SortOrder
    date?: SortOrder
  }

  export type SessionSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type OrderProductListRelationFilter = {
    every?: orderProductWhereInput
    some?: orderProductWhereInput
    none?: orderProductWhereInput
  }

  export type ProfessionLevelListRelationFilter = {
    every?: professionLevelWhereInput
    some?: professionLevelWhereInput
    none?: professionLevelWhereInput
  }

  export type MasterProfessionsListRelationFilter = {
    every?: masterProfessionsWhereInput
    some?: masterProfessionsWhereInput
    none?: masterProfessionsWhereInput
  }

  export type orderProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type professionLevelOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type masterProfessionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LevelCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type LevelAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LevelMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type LevelMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type LevelSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type CommentCountOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    star?: SortOrder
  }

  export type CommentAvgOrderByAggregateInput = {
    id?: SortOrder
    star?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    star?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    star?: SortOrder
  }

  export type CommentSumOrderByAggregateInput = {
    id?: SortOrder
    star?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ToolsListRelationFilter = {
    every?: ToolsWhereInput
    some?: ToolsWhereInput
    none?: ToolsWhereInput
  }

  export type ToolsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BrandCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type BrandAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BrandMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type BrandMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type BrandSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PowerCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type PowerAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PowerMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type PowerMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type PowerSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SizeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type SizeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SizeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type SizeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type SizeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type MasterCountOrderByAggregateInput = {
    id?: SortOrder
    fullname?: SortOrder
    phone?: SortOrder
    isActive?: SortOrder
    image?: SortOrder
    passportImage?: SortOrder
    star?: SortOrder
    about?: SortOrder
  }

  export type MasterAvgOrderByAggregateInput = {
    id?: SortOrder
    star?: SortOrder
  }

  export type MasterMaxOrderByAggregateInput = {
    id?: SortOrder
    fullname?: SortOrder
    phone?: SortOrder
    isActive?: SortOrder
    image?: SortOrder
    passportImage?: SortOrder
    star?: SortOrder
    about?: SortOrder
  }

  export type MasterMinOrderByAggregateInput = {
    id?: SortOrder
    fullname?: SortOrder
    phone?: SortOrder
    isActive?: SortOrder
    image?: SortOrder
    passportImage?: SortOrder
    star?: SortOrder
    about?: SortOrder
  }

  export type MasterSumOrderByAggregateInput = {
    id?: SortOrder
    star?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type LevelScalarRelationFilter = {
    is?: LevelWhereInput
    isNot?: LevelWhereInput
  }

  export type ProfessionScalarRelationFilter = {
    is?: ProfessionWhereInput
    isNot?: ProfessionWhereInput
  }

  export type MasterScalarRelationFilter = {
    is?: MasterWhereInput
    isNot?: MasterWhereInput
  }

  export type masterProfessionsCountOrderByAggregateInput = {
    id?: SortOrder
    minWorking_h?: SortOrder
    professionId?: SortOrder
    levelId?: SortOrder
    price_h?: SortOrder
    price_d?: SortOrder
    experience?: SortOrder
    masterId?: SortOrder
  }

  export type masterProfessionsAvgOrderByAggregateInput = {
    id?: SortOrder
    minWorking_h?: SortOrder
    professionId?: SortOrder
    levelId?: SortOrder
    price_h?: SortOrder
    price_d?: SortOrder
    experience?: SortOrder
    masterId?: SortOrder
  }

  export type masterProfessionsMaxOrderByAggregateInput = {
    id?: SortOrder
    minWorking_h?: SortOrder
    professionId?: SortOrder
    levelId?: SortOrder
    price_h?: SortOrder
    price_d?: SortOrder
    experience?: SortOrder
    masterId?: SortOrder
  }

  export type masterProfessionsMinOrderByAggregateInput = {
    id?: SortOrder
    minWorking_h?: SortOrder
    professionId?: SortOrder
    levelId?: SortOrder
    price_h?: SortOrder
    price_d?: SortOrder
    experience?: SortOrder
    masterId?: SortOrder
  }

  export type masterProfessionsSumOrderByAggregateInput = {
    id?: SortOrder
    minWorking_h?: SortOrder
    professionId?: SortOrder
    levelId?: SortOrder
    price_h?: SortOrder
    price_d?: SortOrder
    experience?: SortOrder
    masterId?: SortOrder
  }

  export type professionLevelCountOrderByAggregateInput = {
    id?: SortOrder
    professionId?: SortOrder
    levelId?: SortOrder
    minWorking_h?: SortOrder
    price_h?: SortOrder
    price_d?: SortOrder
  }

  export type professionLevelAvgOrderByAggregateInput = {
    id?: SortOrder
    professionId?: SortOrder
    levelId?: SortOrder
    minWorking_h?: SortOrder
    price_h?: SortOrder
    price_d?: SortOrder
  }

  export type professionLevelMaxOrderByAggregateInput = {
    id?: SortOrder
    professionId?: SortOrder
    levelId?: SortOrder
    minWorking_h?: SortOrder
    price_h?: SortOrder
    price_d?: SortOrder
  }

  export type professionLevelMinOrderByAggregateInput = {
    id?: SortOrder
    professionId?: SortOrder
    levelId?: SortOrder
    minWorking_h?: SortOrder
    price_h?: SortOrder
    price_d?: SortOrder
  }

  export type professionLevelSumOrderByAggregateInput = {
    id?: SortOrder
    professionId?: SortOrder
    levelId?: SortOrder
    minWorking_h?: SortOrder
    price_h?: SortOrder
    price_d?: SortOrder
  }

  export type ProfessionCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    isActive?: SortOrder
  }

  export type ProfessionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProfessionMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    isActive?: SortOrder
  }

  export type ProfessionMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    isActive?: SortOrder
  }

  export type ProfessionSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProfessionListRelationFilter = {
    every?: ProfessionWhereInput
    some?: ProfessionWhereInput
    none?: ProfessionWhereInput
  }

  export type BrandNullableScalarRelationFilter = {
    is?: BrandWhereInput | null
    isNot?: BrandWhereInput | null
  }

  export type PowerNullableScalarRelationFilter = {
    is?: PowerWhereInput | null
    isNot?: PowerWhereInput | null
  }

  export type SizeNullableScalarRelationFilter = {
    is?: SizeWhereInput | null
    isNot?: SizeWhereInput | null
  }

  export type ProfessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ToolsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    desc?: SortOrder
    price_h?: SortOrder
    price_d?: SortOrder
    quantity?: SortOrder
    code?: SortOrder
    brandId?: SortOrder
    isActive?: SortOrder
    powerId?: SortOrder
    sizeId?: SortOrder
    image?: SortOrder
  }

  export type ToolsAvgOrderByAggregateInput = {
    id?: SortOrder
    price_h?: SortOrder
    price_d?: SortOrder
    quantity?: SortOrder
    code?: SortOrder
    brandId?: SortOrder
    powerId?: SortOrder
    sizeId?: SortOrder
  }

  export type ToolsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    desc?: SortOrder
    price_h?: SortOrder
    price_d?: SortOrder
    quantity?: SortOrder
    code?: SortOrder
    brandId?: SortOrder
    isActive?: SortOrder
    powerId?: SortOrder
    sizeId?: SortOrder
    image?: SortOrder
  }

  export type ToolsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    desc?: SortOrder
    price_h?: SortOrder
    price_d?: SortOrder
    quantity?: SortOrder
    code?: SortOrder
    brandId?: SortOrder
    isActive?: SortOrder
    powerId?: SortOrder
    sizeId?: SortOrder
    image?: SortOrder
  }

  export type ToolsSumOrderByAggregateInput = {
    id?: SortOrder
    price_h?: SortOrder
    price_d?: SortOrder
    quantity?: SortOrder
    code?: SortOrder
    brandId?: SortOrder
    powerId?: SortOrder
    sizeId?: SortOrder
  }

  export type OrderCountOrderByAggregateInput = {
    id?: SortOrder
    total?: SortOrder
    location?: SortOrder
    address?: SortOrder
    date?: SortOrder
    pay_type?: SortOrder
    withDelivery?: SortOrder
    status?: SortOrder
    instruction?: SortOrder
    userId?: SortOrder
  }

  export type OrderAvgOrderByAggregateInput = {
    id?: SortOrder
    total?: SortOrder
    userId?: SortOrder
  }

  export type OrderMaxOrderByAggregateInput = {
    id?: SortOrder
    total?: SortOrder
    location?: SortOrder
    address?: SortOrder
    date?: SortOrder
    pay_type?: SortOrder
    withDelivery?: SortOrder
    status?: SortOrder
    instruction?: SortOrder
    userId?: SortOrder
  }

  export type OrderMinOrderByAggregateInput = {
    id?: SortOrder
    total?: SortOrder
    location?: SortOrder
    address?: SortOrder
    date?: SortOrder
    pay_type?: SortOrder
    withDelivery?: SortOrder
    status?: SortOrder
    instruction?: SortOrder
    userId?: SortOrder
  }

  export type OrderSumOrderByAggregateInput = {
    id?: SortOrder
    total?: SortOrder
    userId?: SortOrder
  }

  export type OrderScalarRelationFilter = {
    is?: OrderWhereInput
    isNot?: OrderWhereInput
  }

  export type ToolsNullableScalarRelationFilter = {
    is?: ToolsWhereInput | null
    isNot?: ToolsWhereInput | null
  }

  export type LevelNullableScalarRelationFilter = {
    is?: LevelWhereInput | null
    isNot?: LevelWhereInput | null
  }

  export type ProfessionNullableScalarRelationFilter = {
    is?: ProfessionWhereInput | null
    isNot?: ProfessionWhereInput | null
  }

  export type orderProductCountOrderByAggregateInput = {
    id?: SortOrder
    isActive?: SortOrder
    timeUnit?: SortOrder
    workingTime?: SortOrder
    price?: SortOrder
    count?: SortOrder
    toolId?: SortOrder
    levelId?: SortOrder
    orderId?: SortOrder
    professionId?: SortOrder
  }

  export type orderProductAvgOrderByAggregateInput = {
    id?: SortOrder
    workingTime?: SortOrder
    price?: SortOrder
    count?: SortOrder
    toolId?: SortOrder
    levelId?: SortOrder
    orderId?: SortOrder
    professionId?: SortOrder
  }

  export type orderProductMaxOrderByAggregateInput = {
    id?: SortOrder
    isActive?: SortOrder
    timeUnit?: SortOrder
    workingTime?: SortOrder
    price?: SortOrder
    count?: SortOrder
    toolId?: SortOrder
    levelId?: SortOrder
    orderId?: SortOrder
    professionId?: SortOrder
  }

  export type orderProductMinOrderByAggregateInput = {
    id?: SortOrder
    isActive?: SortOrder
    timeUnit?: SortOrder
    workingTime?: SortOrder
    price?: SortOrder
    count?: SortOrder
    toolId?: SortOrder
    levelId?: SortOrder
    orderId?: SortOrder
    professionId?: SortOrder
  }

  export type orderProductSumOrderByAggregateInput = {
    id?: SortOrder
    workingTime?: SortOrder
    price?: SortOrder
    count?: SortOrder
    toolId?: SortOrder
    levelId?: SortOrder
    orderId?: SortOrder
    professionId?: SortOrder
  }

  export type FAQCountOrderByAggregateInput = {
    id?: SortOrder
    answer?: SortOrder
    quiteions?: SortOrder
  }

  export type FAQAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FAQMaxOrderByAggregateInput = {
    id?: SortOrder
    answer?: SortOrder
    quiteions?: SortOrder
  }

  export type FAQMinOrderByAggregateInput = {
    id?: SortOrder
    answer?: SortOrder
    quiteions?: SortOrder
  }

  export type FAQSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ContactCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    message?: SortOrder
  }

  export type ContactAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ContactMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    message?: SortOrder
  }

  export type ContactMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    message?: SortOrder
  }

  export type ContactSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type generalInfoCountOrderByAggregateInput = {
    id?: SortOrder
    link?: SortOrder
    email?: SortOrder
    phone?: SortOrder
  }

  export type generalInfoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type generalInfoMaxOrderByAggregateInput = {
    id?: SortOrder
    link?: SortOrder
    email?: SortOrder
    phone?: SortOrder
  }

  export type generalInfoMinOrderByAggregateInput = {
    id?: SortOrder
    link?: SortOrder
    email?: SortOrder
    phone?: SortOrder
  }

  export type generalInfoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RegionCreateNestedOneWithoutUserInput = {
    create?: XOR<RegionCreateWithoutUserInput, RegionUncheckedCreateWithoutUserInput>
    connectOrCreate?: RegionCreateOrConnectWithoutUserInput
    connect?: RegionWhereUniqueInput
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type OrderCreateNestedManyWithoutUserInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type RegionUpdateOneRequiredWithoutUserNestedInput = {
    create?: XOR<RegionCreateWithoutUserInput, RegionUncheckedCreateWithoutUserInput>
    connectOrCreate?: RegionCreateOrConnectWithoutUserInput
    upsert?: RegionUpsertWithoutUserInput
    connect?: RegionWhereUniqueInput
    update?: XOR<XOR<RegionUpdateToOneWithWhereWithoutUserInput, RegionUpdateWithoutUserInput>, RegionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type OrderUpdateManyWithoutUserNestedInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutUserInput | OrderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutUserInput | OrderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutUserInput | OrderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type OrderUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutUserInput | OrderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutUserInput | OrderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutUserInput | OrderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutRegionInput = {
    create?: XOR<UserCreateWithoutRegionInput, UserUncheckedCreateWithoutRegionInput> | UserCreateWithoutRegionInput[] | UserUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRegionInput | UserCreateOrConnectWithoutRegionInput[]
    createMany?: UserCreateManyRegionInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutRegionInput = {
    create?: XOR<UserCreateWithoutRegionInput, UserUncheckedCreateWithoutRegionInput> | UserCreateWithoutRegionInput[] | UserUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRegionInput | UserCreateOrConnectWithoutRegionInput[]
    createMany?: UserCreateManyRegionInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutRegionNestedInput = {
    create?: XOR<UserCreateWithoutRegionInput, UserUncheckedCreateWithoutRegionInput> | UserCreateWithoutRegionInput[] | UserUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRegionInput | UserCreateOrConnectWithoutRegionInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutRegionInput | UserUpsertWithWhereUniqueWithoutRegionInput[]
    createMany?: UserCreateManyRegionInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutRegionInput | UserUpdateWithWhereUniqueWithoutRegionInput[]
    updateMany?: UserUpdateManyWithWhereWithoutRegionInput | UserUpdateManyWithWhereWithoutRegionInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutRegionNestedInput = {
    create?: XOR<UserCreateWithoutRegionInput, UserUncheckedCreateWithoutRegionInput> | UserCreateWithoutRegionInput[] | UserUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRegionInput | UserCreateOrConnectWithoutRegionInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutRegionInput | UserUpsertWithWhereUniqueWithoutRegionInput[]
    createMany?: UserCreateManyRegionInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutRegionInput | UserUpdateWithWhereUniqueWithoutRegionInput[]
    updateMany?: UserUpdateManyWithWhereWithoutRegionInput | UserUpdateManyWithWhereWithoutRegionInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type orderProductCreateNestedManyWithoutLevelInput = {
    create?: XOR<orderProductCreateWithoutLevelInput, orderProductUncheckedCreateWithoutLevelInput> | orderProductCreateWithoutLevelInput[] | orderProductUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: orderProductCreateOrConnectWithoutLevelInput | orderProductCreateOrConnectWithoutLevelInput[]
    createMany?: orderProductCreateManyLevelInputEnvelope
    connect?: orderProductWhereUniqueInput | orderProductWhereUniqueInput[]
  }

  export type professionLevelCreateNestedManyWithoutLevelInput = {
    create?: XOR<professionLevelCreateWithoutLevelInput, professionLevelUncheckedCreateWithoutLevelInput> | professionLevelCreateWithoutLevelInput[] | professionLevelUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: professionLevelCreateOrConnectWithoutLevelInput | professionLevelCreateOrConnectWithoutLevelInput[]
    createMany?: professionLevelCreateManyLevelInputEnvelope
    connect?: professionLevelWhereUniqueInput | professionLevelWhereUniqueInput[]
  }

  export type masterProfessionsCreateNestedManyWithoutLevelInput = {
    create?: XOR<masterProfessionsCreateWithoutLevelInput, masterProfessionsUncheckedCreateWithoutLevelInput> | masterProfessionsCreateWithoutLevelInput[] | masterProfessionsUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: masterProfessionsCreateOrConnectWithoutLevelInput | masterProfessionsCreateOrConnectWithoutLevelInput[]
    createMany?: masterProfessionsCreateManyLevelInputEnvelope
    connect?: masterProfessionsWhereUniqueInput | masterProfessionsWhereUniqueInput[]
  }

  export type orderProductUncheckedCreateNestedManyWithoutLevelInput = {
    create?: XOR<orderProductCreateWithoutLevelInput, orderProductUncheckedCreateWithoutLevelInput> | orderProductCreateWithoutLevelInput[] | orderProductUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: orderProductCreateOrConnectWithoutLevelInput | orderProductCreateOrConnectWithoutLevelInput[]
    createMany?: orderProductCreateManyLevelInputEnvelope
    connect?: orderProductWhereUniqueInput | orderProductWhereUniqueInput[]
  }

  export type professionLevelUncheckedCreateNestedManyWithoutLevelInput = {
    create?: XOR<professionLevelCreateWithoutLevelInput, professionLevelUncheckedCreateWithoutLevelInput> | professionLevelCreateWithoutLevelInput[] | professionLevelUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: professionLevelCreateOrConnectWithoutLevelInput | professionLevelCreateOrConnectWithoutLevelInput[]
    createMany?: professionLevelCreateManyLevelInputEnvelope
    connect?: professionLevelWhereUniqueInput | professionLevelWhereUniqueInput[]
  }

  export type masterProfessionsUncheckedCreateNestedManyWithoutLevelInput = {
    create?: XOR<masterProfessionsCreateWithoutLevelInput, masterProfessionsUncheckedCreateWithoutLevelInput> | masterProfessionsCreateWithoutLevelInput[] | masterProfessionsUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: masterProfessionsCreateOrConnectWithoutLevelInput | masterProfessionsCreateOrConnectWithoutLevelInput[]
    createMany?: masterProfessionsCreateManyLevelInputEnvelope
    connect?: masterProfessionsWhereUniqueInput | masterProfessionsWhereUniqueInput[]
  }

  export type orderProductUpdateManyWithoutLevelNestedInput = {
    create?: XOR<orderProductCreateWithoutLevelInput, orderProductUncheckedCreateWithoutLevelInput> | orderProductCreateWithoutLevelInput[] | orderProductUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: orderProductCreateOrConnectWithoutLevelInput | orderProductCreateOrConnectWithoutLevelInput[]
    upsert?: orderProductUpsertWithWhereUniqueWithoutLevelInput | orderProductUpsertWithWhereUniqueWithoutLevelInput[]
    createMany?: orderProductCreateManyLevelInputEnvelope
    set?: orderProductWhereUniqueInput | orderProductWhereUniqueInput[]
    disconnect?: orderProductWhereUniqueInput | orderProductWhereUniqueInput[]
    delete?: orderProductWhereUniqueInput | orderProductWhereUniqueInput[]
    connect?: orderProductWhereUniqueInput | orderProductWhereUniqueInput[]
    update?: orderProductUpdateWithWhereUniqueWithoutLevelInput | orderProductUpdateWithWhereUniqueWithoutLevelInput[]
    updateMany?: orderProductUpdateManyWithWhereWithoutLevelInput | orderProductUpdateManyWithWhereWithoutLevelInput[]
    deleteMany?: orderProductScalarWhereInput | orderProductScalarWhereInput[]
  }

  export type professionLevelUpdateManyWithoutLevelNestedInput = {
    create?: XOR<professionLevelCreateWithoutLevelInput, professionLevelUncheckedCreateWithoutLevelInput> | professionLevelCreateWithoutLevelInput[] | professionLevelUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: professionLevelCreateOrConnectWithoutLevelInput | professionLevelCreateOrConnectWithoutLevelInput[]
    upsert?: professionLevelUpsertWithWhereUniqueWithoutLevelInput | professionLevelUpsertWithWhereUniqueWithoutLevelInput[]
    createMany?: professionLevelCreateManyLevelInputEnvelope
    set?: professionLevelWhereUniqueInput | professionLevelWhereUniqueInput[]
    disconnect?: professionLevelWhereUniqueInput | professionLevelWhereUniqueInput[]
    delete?: professionLevelWhereUniqueInput | professionLevelWhereUniqueInput[]
    connect?: professionLevelWhereUniqueInput | professionLevelWhereUniqueInput[]
    update?: professionLevelUpdateWithWhereUniqueWithoutLevelInput | professionLevelUpdateWithWhereUniqueWithoutLevelInput[]
    updateMany?: professionLevelUpdateManyWithWhereWithoutLevelInput | professionLevelUpdateManyWithWhereWithoutLevelInput[]
    deleteMany?: professionLevelScalarWhereInput | professionLevelScalarWhereInput[]
  }

  export type masterProfessionsUpdateManyWithoutLevelNestedInput = {
    create?: XOR<masterProfessionsCreateWithoutLevelInput, masterProfessionsUncheckedCreateWithoutLevelInput> | masterProfessionsCreateWithoutLevelInput[] | masterProfessionsUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: masterProfessionsCreateOrConnectWithoutLevelInput | masterProfessionsCreateOrConnectWithoutLevelInput[]
    upsert?: masterProfessionsUpsertWithWhereUniqueWithoutLevelInput | masterProfessionsUpsertWithWhereUniqueWithoutLevelInput[]
    createMany?: masterProfessionsCreateManyLevelInputEnvelope
    set?: masterProfessionsWhereUniqueInput | masterProfessionsWhereUniqueInput[]
    disconnect?: masterProfessionsWhereUniqueInput | masterProfessionsWhereUniqueInput[]
    delete?: masterProfessionsWhereUniqueInput | masterProfessionsWhereUniqueInput[]
    connect?: masterProfessionsWhereUniqueInput | masterProfessionsWhereUniqueInput[]
    update?: masterProfessionsUpdateWithWhereUniqueWithoutLevelInput | masterProfessionsUpdateWithWhereUniqueWithoutLevelInput[]
    updateMany?: masterProfessionsUpdateManyWithWhereWithoutLevelInput | masterProfessionsUpdateManyWithWhereWithoutLevelInput[]
    deleteMany?: masterProfessionsScalarWhereInput | masterProfessionsScalarWhereInput[]
  }

  export type orderProductUncheckedUpdateManyWithoutLevelNestedInput = {
    create?: XOR<orderProductCreateWithoutLevelInput, orderProductUncheckedCreateWithoutLevelInput> | orderProductCreateWithoutLevelInput[] | orderProductUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: orderProductCreateOrConnectWithoutLevelInput | orderProductCreateOrConnectWithoutLevelInput[]
    upsert?: orderProductUpsertWithWhereUniqueWithoutLevelInput | orderProductUpsertWithWhereUniqueWithoutLevelInput[]
    createMany?: orderProductCreateManyLevelInputEnvelope
    set?: orderProductWhereUniqueInput | orderProductWhereUniqueInput[]
    disconnect?: orderProductWhereUniqueInput | orderProductWhereUniqueInput[]
    delete?: orderProductWhereUniqueInput | orderProductWhereUniqueInput[]
    connect?: orderProductWhereUniqueInput | orderProductWhereUniqueInput[]
    update?: orderProductUpdateWithWhereUniqueWithoutLevelInput | orderProductUpdateWithWhereUniqueWithoutLevelInput[]
    updateMany?: orderProductUpdateManyWithWhereWithoutLevelInput | orderProductUpdateManyWithWhereWithoutLevelInput[]
    deleteMany?: orderProductScalarWhereInput | orderProductScalarWhereInput[]
  }

  export type professionLevelUncheckedUpdateManyWithoutLevelNestedInput = {
    create?: XOR<professionLevelCreateWithoutLevelInput, professionLevelUncheckedCreateWithoutLevelInput> | professionLevelCreateWithoutLevelInput[] | professionLevelUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: professionLevelCreateOrConnectWithoutLevelInput | professionLevelCreateOrConnectWithoutLevelInput[]
    upsert?: professionLevelUpsertWithWhereUniqueWithoutLevelInput | professionLevelUpsertWithWhereUniqueWithoutLevelInput[]
    createMany?: professionLevelCreateManyLevelInputEnvelope
    set?: professionLevelWhereUniqueInput | professionLevelWhereUniqueInput[]
    disconnect?: professionLevelWhereUniqueInput | professionLevelWhereUniqueInput[]
    delete?: professionLevelWhereUniqueInput | professionLevelWhereUniqueInput[]
    connect?: professionLevelWhereUniqueInput | professionLevelWhereUniqueInput[]
    update?: professionLevelUpdateWithWhereUniqueWithoutLevelInput | professionLevelUpdateWithWhereUniqueWithoutLevelInput[]
    updateMany?: professionLevelUpdateManyWithWhereWithoutLevelInput | professionLevelUpdateManyWithWhereWithoutLevelInput[]
    deleteMany?: professionLevelScalarWhereInput | professionLevelScalarWhereInput[]
  }

  export type masterProfessionsUncheckedUpdateManyWithoutLevelNestedInput = {
    create?: XOR<masterProfessionsCreateWithoutLevelInput, masterProfessionsUncheckedCreateWithoutLevelInput> | masterProfessionsCreateWithoutLevelInput[] | masterProfessionsUncheckedCreateWithoutLevelInput[]
    connectOrCreate?: masterProfessionsCreateOrConnectWithoutLevelInput | masterProfessionsCreateOrConnectWithoutLevelInput[]
    upsert?: masterProfessionsUpsertWithWhereUniqueWithoutLevelInput | masterProfessionsUpsertWithWhereUniqueWithoutLevelInput[]
    createMany?: masterProfessionsCreateManyLevelInputEnvelope
    set?: masterProfessionsWhereUniqueInput | masterProfessionsWhereUniqueInput[]
    disconnect?: masterProfessionsWhereUniqueInput | masterProfessionsWhereUniqueInput[]
    delete?: masterProfessionsWhereUniqueInput | masterProfessionsWhereUniqueInput[]
    connect?: masterProfessionsWhereUniqueInput | masterProfessionsWhereUniqueInput[]
    update?: masterProfessionsUpdateWithWhereUniqueWithoutLevelInput | masterProfessionsUpdateWithWhereUniqueWithoutLevelInput[]
    updateMany?: masterProfessionsUpdateManyWithWhereWithoutLevelInput | masterProfessionsUpdateManyWithWhereWithoutLevelInput[]
    deleteMany?: masterProfessionsScalarWhereInput | masterProfessionsScalarWhereInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ToolsCreateNestedManyWithoutBrandInput = {
    create?: XOR<ToolsCreateWithoutBrandInput, ToolsUncheckedCreateWithoutBrandInput> | ToolsCreateWithoutBrandInput[] | ToolsUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: ToolsCreateOrConnectWithoutBrandInput | ToolsCreateOrConnectWithoutBrandInput[]
    createMany?: ToolsCreateManyBrandInputEnvelope
    connect?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
  }

  export type ToolsUncheckedCreateNestedManyWithoutBrandInput = {
    create?: XOR<ToolsCreateWithoutBrandInput, ToolsUncheckedCreateWithoutBrandInput> | ToolsCreateWithoutBrandInput[] | ToolsUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: ToolsCreateOrConnectWithoutBrandInput | ToolsCreateOrConnectWithoutBrandInput[]
    createMany?: ToolsCreateManyBrandInputEnvelope
    connect?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
  }

  export type ToolsUpdateManyWithoutBrandNestedInput = {
    create?: XOR<ToolsCreateWithoutBrandInput, ToolsUncheckedCreateWithoutBrandInput> | ToolsCreateWithoutBrandInput[] | ToolsUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: ToolsCreateOrConnectWithoutBrandInput | ToolsCreateOrConnectWithoutBrandInput[]
    upsert?: ToolsUpsertWithWhereUniqueWithoutBrandInput | ToolsUpsertWithWhereUniqueWithoutBrandInput[]
    createMany?: ToolsCreateManyBrandInputEnvelope
    set?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    disconnect?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    delete?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    connect?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    update?: ToolsUpdateWithWhereUniqueWithoutBrandInput | ToolsUpdateWithWhereUniqueWithoutBrandInput[]
    updateMany?: ToolsUpdateManyWithWhereWithoutBrandInput | ToolsUpdateManyWithWhereWithoutBrandInput[]
    deleteMany?: ToolsScalarWhereInput | ToolsScalarWhereInput[]
  }

  export type ToolsUncheckedUpdateManyWithoutBrandNestedInput = {
    create?: XOR<ToolsCreateWithoutBrandInput, ToolsUncheckedCreateWithoutBrandInput> | ToolsCreateWithoutBrandInput[] | ToolsUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: ToolsCreateOrConnectWithoutBrandInput | ToolsCreateOrConnectWithoutBrandInput[]
    upsert?: ToolsUpsertWithWhereUniqueWithoutBrandInput | ToolsUpsertWithWhereUniqueWithoutBrandInput[]
    createMany?: ToolsCreateManyBrandInputEnvelope
    set?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    disconnect?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    delete?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    connect?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    update?: ToolsUpdateWithWhereUniqueWithoutBrandInput | ToolsUpdateWithWhereUniqueWithoutBrandInput[]
    updateMany?: ToolsUpdateManyWithWhereWithoutBrandInput | ToolsUpdateManyWithWhereWithoutBrandInput[]
    deleteMany?: ToolsScalarWhereInput | ToolsScalarWhereInput[]
  }

  export type ToolsCreateNestedManyWithoutPowerInput = {
    create?: XOR<ToolsCreateWithoutPowerInput, ToolsUncheckedCreateWithoutPowerInput> | ToolsCreateWithoutPowerInput[] | ToolsUncheckedCreateWithoutPowerInput[]
    connectOrCreate?: ToolsCreateOrConnectWithoutPowerInput | ToolsCreateOrConnectWithoutPowerInput[]
    createMany?: ToolsCreateManyPowerInputEnvelope
    connect?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
  }

  export type ToolsUncheckedCreateNestedManyWithoutPowerInput = {
    create?: XOR<ToolsCreateWithoutPowerInput, ToolsUncheckedCreateWithoutPowerInput> | ToolsCreateWithoutPowerInput[] | ToolsUncheckedCreateWithoutPowerInput[]
    connectOrCreate?: ToolsCreateOrConnectWithoutPowerInput | ToolsCreateOrConnectWithoutPowerInput[]
    createMany?: ToolsCreateManyPowerInputEnvelope
    connect?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
  }

  export type ToolsUpdateManyWithoutPowerNestedInput = {
    create?: XOR<ToolsCreateWithoutPowerInput, ToolsUncheckedCreateWithoutPowerInput> | ToolsCreateWithoutPowerInput[] | ToolsUncheckedCreateWithoutPowerInput[]
    connectOrCreate?: ToolsCreateOrConnectWithoutPowerInput | ToolsCreateOrConnectWithoutPowerInput[]
    upsert?: ToolsUpsertWithWhereUniqueWithoutPowerInput | ToolsUpsertWithWhereUniqueWithoutPowerInput[]
    createMany?: ToolsCreateManyPowerInputEnvelope
    set?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    disconnect?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    delete?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    connect?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    update?: ToolsUpdateWithWhereUniqueWithoutPowerInput | ToolsUpdateWithWhereUniqueWithoutPowerInput[]
    updateMany?: ToolsUpdateManyWithWhereWithoutPowerInput | ToolsUpdateManyWithWhereWithoutPowerInput[]
    deleteMany?: ToolsScalarWhereInput | ToolsScalarWhereInput[]
  }

  export type ToolsUncheckedUpdateManyWithoutPowerNestedInput = {
    create?: XOR<ToolsCreateWithoutPowerInput, ToolsUncheckedCreateWithoutPowerInput> | ToolsCreateWithoutPowerInput[] | ToolsUncheckedCreateWithoutPowerInput[]
    connectOrCreate?: ToolsCreateOrConnectWithoutPowerInput | ToolsCreateOrConnectWithoutPowerInput[]
    upsert?: ToolsUpsertWithWhereUniqueWithoutPowerInput | ToolsUpsertWithWhereUniqueWithoutPowerInput[]
    createMany?: ToolsCreateManyPowerInputEnvelope
    set?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    disconnect?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    delete?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    connect?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    update?: ToolsUpdateWithWhereUniqueWithoutPowerInput | ToolsUpdateWithWhereUniqueWithoutPowerInput[]
    updateMany?: ToolsUpdateManyWithWhereWithoutPowerInput | ToolsUpdateManyWithWhereWithoutPowerInput[]
    deleteMany?: ToolsScalarWhereInput | ToolsScalarWhereInput[]
  }

  export type ToolsCreateNestedManyWithoutSizeInput = {
    create?: XOR<ToolsCreateWithoutSizeInput, ToolsUncheckedCreateWithoutSizeInput> | ToolsCreateWithoutSizeInput[] | ToolsUncheckedCreateWithoutSizeInput[]
    connectOrCreate?: ToolsCreateOrConnectWithoutSizeInput | ToolsCreateOrConnectWithoutSizeInput[]
    createMany?: ToolsCreateManySizeInputEnvelope
    connect?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
  }

  export type ToolsUncheckedCreateNestedManyWithoutSizeInput = {
    create?: XOR<ToolsCreateWithoutSizeInput, ToolsUncheckedCreateWithoutSizeInput> | ToolsCreateWithoutSizeInput[] | ToolsUncheckedCreateWithoutSizeInput[]
    connectOrCreate?: ToolsCreateOrConnectWithoutSizeInput | ToolsCreateOrConnectWithoutSizeInput[]
    createMany?: ToolsCreateManySizeInputEnvelope
    connect?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
  }

  export type ToolsUpdateManyWithoutSizeNestedInput = {
    create?: XOR<ToolsCreateWithoutSizeInput, ToolsUncheckedCreateWithoutSizeInput> | ToolsCreateWithoutSizeInput[] | ToolsUncheckedCreateWithoutSizeInput[]
    connectOrCreate?: ToolsCreateOrConnectWithoutSizeInput | ToolsCreateOrConnectWithoutSizeInput[]
    upsert?: ToolsUpsertWithWhereUniqueWithoutSizeInput | ToolsUpsertWithWhereUniqueWithoutSizeInput[]
    createMany?: ToolsCreateManySizeInputEnvelope
    set?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    disconnect?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    delete?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    connect?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    update?: ToolsUpdateWithWhereUniqueWithoutSizeInput | ToolsUpdateWithWhereUniqueWithoutSizeInput[]
    updateMany?: ToolsUpdateManyWithWhereWithoutSizeInput | ToolsUpdateManyWithWhereWithoutSizeInput[]
    deleteMany?: ToolsScalarWhereInput | ToolsScalarWhereInput[]
  }

  export type ToolsUncheckedUpdateManyWithoutSizeNestedInput = {
    create?: XOR<ToolsCreateWithoutSizeInput, ToolsUncheckedCreateWithoutSizeInput> | ToolsCreateWithoutSizeInput[] | ToolsUncheckedCreateWithoutSizeInput[]
    connectOrCreate?: ToolsCreateOrConnectWithoutSizeInput | ToolsCreateOrConnectWithoutSizeInput[]
    upsert?: ToolsUpsertWithWhereUniqueWithoutSizeInput | ToolsUpsertWithWhereUniqueWithoutSizeInput[]
    createMany?: ToolsCreateManySizeInputEnvelope
    set?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    disconnect?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    delete?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    connect?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    update?: ToolsUpdateWithWhereUniqueWithoutSizeInput | ToolsUpdateWithWhereUniqueWithoutSizeInput[]
    updateMany?: ToolsUpdateManyWithWhereWithoutSizeInput | ToolsUpdateManyWithWhereWithoutSizeInput[]
    deleteMany?: ToolsScalarWhereInput | ToolsScalarWhereInput[]
  }

  export type masterProfessionsCreateNestedManyWithoutMasterInput = {
    create?: XOR<masterProfessionsCreateWithoutMasterInput, masterProfessionsUncheckedCreateWithoutMasterInput> | masterProfessionsCreateWithoutMasterInput[] | masterProfessionsUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: masterProfessionsCreateOrConnectWithoutMasterInput | masterProfessionsCreateOrConnectWithoutMasterInput[]
    createMany?: masterProfessionsCreateManyMasterInputEnvelope
    connect?: masterProfessionsWhereUniqueInput | masterProfessionsWhereUniqueInput[]
  }

  export type masterProfessionsUncheckedCreateNestedManyWithoutMasterInput = {
    create?: XOR<masterProfessionsCreateWithoutMasterInput, masterProfessionsUncheckedCreateWithoutMasterInput> | masterProfessionsCreateWithoutMasterInput[] | masterProfessionsUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: masterProfessionsCreateOrConnectWithoutMasterInput | masterProfessionsCreateOrConnectWithoutMasterInput[]
    createMany?: masterProfessionsCreateManyMasterInputEnvelope
    connect?: masterProfessionsWhereUniqueInput | masterProfessionsWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type masterProfessionsUpdateManyWithoutMasterNestedInput = {
    create?: XOR<masterProfessionsCreateWithoutMasterInput, masterProfessionsUncheckedCreateWithoutMasterInput> | masterProfessionsCreateWithoutMasterInput[] | masterProfessionsUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: masterProfessionsCreateOrConnectWithoutMasterInput | masterProfessionsCreateOrConnectWithoutMasterInput[]
    upsert?: masterProfessionsUpsertWithWhereUniqueWithoutMasterInput | masterProfessionsUpsertWithWhereUniqueWithoutMasterInput[]
    createMany?: masterProfessionsCreateManyMasterInputEnvelope
    set?: masterProfessionsWhereUniqueInput | masterProfessionsWhereUniqueInput[]
    disconnect?: masterProfessionsWhereUniqueInput | masterProfessionsWhereUniqueInput[]
    delete?: masterProfessionsWhereUniqueInput | masterProfessionsWhereUniqueInput[]
    connect?: masterProfessionsWhereUniqueInput | masterProfessionsWhereUniqueInput[]
    update?: masterProfessionsUpdateWithWhereUniqueWithoutMasterInput | masterProfessionsUpdateWithWhereUniqueWithoutMasterInput[]
    updateMany?: masterProfessionsUpdateManyWithWhereWithoutMasterInput | masterProfessionsUpdateManyWithWhereWithoutMasterInput[]
    deleteMany?: masterProfessionsScalarWhereInput | masterProfessionsScalarWhereInput[]
  }

  export type masterProfessionsUncheckedUpdateManyWithoutMasterNestedInput = {
    create?: XOR<masterProfessionsCreateWithoutMasterInput, masterProfessionsUncheckedCreateWithoutMasterInput> | masterProfessionsCreateWithoutMasterInput[] | masterProfessionsUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: masterProfessionsCreateOrConnectWithoutMasterInput | masterProfessionsCreateOrConnectWithoutMasterInput[]
    upsert?: masterProfessionsUpsertWithWhereUniqueWithoutMasterInput | masterProfessionsUpsertWithWhereUniqueWithoutMasterInput[]
    createMany?: masterProfessionsCreateManyMasterInputEnvelope
    set?: masterProfessionsWhereUniqueInput | masterProfessionsWhereUniqueInput[]
    disconnect?: masterProfessionsWhereUniqueInput | masterProfessionsWhereUniqueInput[]
    delete?: masterProfessionsWhereUniqueInput | masterProfessionsWhereUniqueInput[]
    connect?: masterProfessionsWhereUniqueInput | masterProfessionsWhereUniqueInput[]
    update?: masterProfessionsUpdateWithWhereUniqueWithoutMasterInput | masterProfessionsUpdateWithWhereUniqueWithoutMasterInput[]
    updateMany?: masterProfessionsUpdateManyWithWhereWithoutMasterInput | masterProfessionsUpdateManyWithWhereWithoutMasterInput[]
    deleteMany?: masterProfessionsScalarWhereInput | masterProfessionsScalarWhereInput[]
  }

  export type LevelCreateNestedOneWithoutMasterProfessionInput = {
    create?: XOR<LevelCreateWithoutMasterProfessionInput, LevelUncheckedCreateWithoutMasterProfessionInput>
    connectOrCreate?: LevelCreateOrConnectWithoutMasterProfessionInput
    connect?: LevelWhereUniqueInput
  }

  export type ProfessionCreateNestedOneWithoutMasterProfessionInput = {
    create?: XOR<ProfessionCreateWithoutMasterProfessionInput, ProfessionUncheckedCreateWithoutMasterProfessionInput>
    connectOrCreate?: ProfessionCreateOrConnectWithoutMasterProfessionInput
    connect?: ProfessionWhereUniqueInput
  }

  export type MasterCreateNestedOneWithoutMasterProfessionsInput = {
    create?: XOR<MasterCreateWithoutMasterProfessionsInput, MasterUncheckedCreateWithoutMasterProfessionsInput>
    connectOrCreate?: MasterCreateOrConnectWithoutMasterProfessionsInput
    connect?: MasterWhereUniqueInput
  }

  export type LevelUpdateOneRequiredWithoutMasterProfessionNestedInput = {
    create?: XOR<LevelCreateWithoutMasterProfessionInput, LevelUncheckedCreateWithoutMasterProfessionInput>
    connectOrCreate?: LevelCreateOrConnectWithoutMasterProfessionInput
    upsert?: LevelUpsertWithoutMasterProfessionInput
    connect?: LevelWhereUniqueInput
    update?: XOR<XOR<LevelUpdateToOneWithWhereWithoutMasterProfessionInput, LevelUpdateWithoutMasterProfessionInput>, LevelUncheckedUpdateWithoutMasterProfessionInput>
  }

  export type ProfessionUpdateOneRequiredWithoutMasterProfessionNestedInput = {
    create?: XOR<ProfessionCreateWithoutMasterProfessionInput, ProfessionUncheckedCreateWithoutMasterProfessionInput>
    connectOrCreate?: ProfessionCreateOrConnectWithoutMasterProfessionInput
    upsert?: ProfessionUpsertWithoutMasterProfessionInput
    connect?: ProfessionWhereUniqueInput
    update?: XOR<XOR<ProfessionUpdateToOneWithWhereWithoutMasterProfessionInput, ProfessionUpdateWithoutMasterProfessionInput>, ProfessionUncheckedUpdateWithoutMasterProfessionInput>
  }

  export type MasterUpdateOneRequiredWithoutMasterProfessionsNestedInput = {
    create?: XOR<MasterCreateWithoutMasterProfessionsInput, MasterUncheckedCreateWithoutMasterProfessionsInput>
    connectOrCreate?: MasterCreateOrConnectWithoutMasterProfessionsInput
    upsert?: MasterUpsertWithoutMasterProfessionsInput
    connect?: MasterWhereUniqueInput
    update?: XOR<XOR<MasterUpdateToOneWithWhereWithoutMasterProfessionsInput, MasterUpdateWithoutMasterProfessionsInput>, MasterUncheckedUpdateWithoutMasterProfessionsInput>
  }

  export type ProfessionCreateNestedOneWithoutProfessionLevelInput = {
    create?: XOR<ProfessionCreateWithoutProfessionLevelInput, ProfessionUncheckedCreateWithoutProfessionLevelInput>
    connectOrCreate?: ProfessionCreateOrConnectWithoutProfessionLevelInput
    connect?: ProfessionWhereUniqueInput
  }

  export type LevelCreateNestedOneWithoutProfessionLevelInput = {
    create?: XOR<LevelCreateWithoutProfessionLevelInput, LevelUncheckedCreateWithoutProfessionLevelInput>
    connectOrCreate?: LevelCreateOrConnectWithoutProfessionLevelInput
    connect?: LevelWhereUniqueInput
  }

  export type ProfessionUpdateOneRequiredWithoutProfessionLevelNestedInput = {
    create?: XOR<ProfessionCreateWithoutProfessionLevelInput, ProfessionUncheckedCreateWithoutProfessionLevelInput>
    connectOrCreate?: ProfessionCreateOrConnectWithoutProfessionLevelInput
    upsert?: ProfessionUpsertWithoutProfessionLevelInput
    connect?: ProfessionWhereUniqueInput
    update?: XOR<XOR<ProfessionUpdateToOneWithWhereWithoutProfessionLevelInput, ProfessionUpdateWithoutProfessionLevelInput>, ProfessionUncheckedUpdateWithoutProfessionLevelInput>
  }

  export type LevelUpdateOneRequiredWithoutProfessionLevelNestedInput = {
    create?: XOR<LevelCreateWithoutProfessionLevelInput, LevelUncheckedCreateWithoutProfessionLevelInput>
    connectOrCreate?: LevelCreateOrConnectWithoutProfessionLevelInput
    upsert?: LevelUpsertWithoutProfessionLevelInput
    connect?: LevelWhereUniqueInput
    update?: XOR<XOR<LevelUpdateToOneWithWhereWithoutProfessionLevelInput, LevelUpdateWithoutProfessionLevelInput>, LevelUncheckedUpdateWithoutProfessionLevelInput>
  }

  export type orderProductCreateNestedManyWithoutProfessionsInput = {
    create?: XOR<orderProductCreateWithoutProfessionsInput, orderProductUncheckedCreateWithoutProfessionsInput> | orderProductCreateWithoutProfessionsInput[] | orderProductUncheckedCreateWithoutProfessionsInput[]
    connectOrCreate?: orderProductCreateOrConnectWithoutProfessionsInput | orderProductCreateOrConnectWithoutProfessionsInput[]
    createMany?: orderProductCreateManyProfessionsInputEnvelope
    connect?: orderProductWhereUniqueInput | orderProductWhereUniqueInput[]
  }

  export type masterProfessionsCreateNestedManyWithoutProfessionInput = {
    create?: XOR<masterProfessionsCreateWithoutProfessionInput, masterProfessionsUncheckedCreateWithoutProfessionInput> | masterProfessionsCreateWithoutProfessionInput[] | masterProfessionsUncheckedCreateWithoutProfessionInput[]
    connectOrCreate?: masterProfessionsCreateOrConnectWithoutProfessionInput | masterProfessionsCreateOrConnectWithoutProfessionInput[]
    createMany?: masterProfessionsCreateManyProfessionInputEnvelope
    connect?: masterProfessionsWhereUniqueInput | masterProfessionsWhereUniqueInput[]
  }

  export type professionLevelCreateNestedManyWithoutProfessionInput = {
    create?: XOR<professionLevelCreateWithoutProfessionInput, professionLevelUncheckedCreateWithoutProfessionInput> | professionLevelCreateWithoutProfessionInput[] | professionLevelUncheckedCreateWithoutProfessionInput[]
    connectOrCreate?: professionLevelCreateOrConnectWithoutProfessionInput | professionLevelCreateOrConnectWithoutProfessionInput[]
    createMany?: professionLevelCreateManyProfessionInputEnvelope
    connect?: professionLevelWhereUniqueInput | professionLevelWhereUniqueInput[]
  }

  export type ToolsCreateNestedManyWithoutProfessionsInput = {
    create?: XOR<ToolsCreateWithoutProfessionsInput, ToolsUncheckedCreateWithoutProfessionsInput> | ToolsCreateWithoutProfessionsInput[] | ToolsUncheckedCreateWithoutProfessionsInput[]
    connectOrCreate?: ToolsCreateOrConnectWithoutProfessionsInput | ToolsCreateOrConnectWithoutProfessionsInput[]
    connect?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
  }

  export type orderProductUncheckedCreateNestedManyWithoutProfessionsInput = {
    create?: XOR<orderProductCreateWithoutProfessionsInput, orderProductUncheckedCreateWithoutProfessionsInput> | orderProductCreateWithoutProfessionsInput[] | orderProductUncheckedCreateWithoutProfessionsInput[]
    connectOrCreate?: orderProductCreateOrConnectWithoutProfessionsInput | orderProductCreateOrConnectWithoutProfessionsInput[]
    createMany?: orderProductCreateManyProfessionsInputEnvelope
    connect?: orderProductWhereUniqueInput | orderProductWhereUniqueInput[]
  }

  export type masterProfessionsUncheckedCreateNestedManyWithoutProfessionInput = {
    create?: XOR<masterProfessionsCreateWithoutProfessionInput, masterProfessionsUncheckedCreateWithoutProfessionInput> | masterProfessionsCreateWithoutProfessionInput[] | masterProfessionsUncheckedCreateWithoutProfessionInput[]
    connectOrCreate?: masterProfessionsCreateOrConnectWithoutProfessionInput | masterProfessionsCreateOrConnectWithoutProfessionInput[]
    createMany?: masterProfessionsCreateManyProfessionInputEnvelope
    connect?: masterProfessionsWhereUniqueInput | masterProfessionsWhereUniqueInput[]
  }

  export type professionLevelUncheckedCreateNestedManyWithoutProfessionInput = {
    create?: XOR<professionLevelCreateWithoutProfessionInput, professionLevelUncheckedCreateWithoutProfessionInput> | professionLevelCreateWithoutProfessionInput[] | professionLevelUncheckedCreateWithoutProfessionInput[]
    connectOrCreate?: professionLevelCreateOrConnectWithoutProfessionInput | professionLevelCreateOrConnectWithoutProfessionInput[]
    createMany?: professionLevelCreateManyProfessionInputEnvelope
    connect?: professionLevelWhereUniqueInput | professionLevelWhereUniqueInput[]
  }

  export type ToolsUncheckedCreateNestedManyWithoutProfessionsInput = {
    create?: XOR<ToolsCreateWithoutProfessionsInput, ToolsUncheckedCreateWithoutProfessionsInput> | ToolsCreateWithoutProfessionsInput[] | ToolsUncheckedCreateWithoutProfessionsInput[]
    connectOrCreate?: ToolsCreateOrConnectWithoutProfessionsInput | ToolsCreateOrConnectWithoutProfessionsInput[]
    connect?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
  }

  export type orderProductUpdateManyWithoutProfessionsNestedInput = {
    create?: XOR<orderProductCreateWithoutProfessionsInput, orderProductUncheckedCreateWithoutProfessionsInput> | orderProductCreateWithoutProfessionsInput[] | orderProductUncheckedCreateWithoutProfessionsInput[]
    connectOrCreate?: orderProductCreateOrConnectWithoutProfessionsInput | orderProductCreateOrConnectWithoutProfessionsInput[]
    upsert?: orderProductUpsertWithWhereUniqueWithoutProfessionsInput | orderProductUpsertWithWhereUniqueWithoutProfessionsInput[]
    createMany?: orderProductCreateManyProfessionsInputEnvelope
    set?: orderProductWhereUniqueInput | orderProductWhereUniqueInput[]
    disconnect?: orderProductWhereUniqueInput | orderProductWhereUniqueInput[]
    delete?: orderProductWhereUniqueInput | orderProductWhereUniqueInput[]
    connect?: orderProductWhereUniqueInput | orderProductWhereUniqueInput[]
    update?: orderProductUpdateWithWhereUniqueWithoutProfessionsInput | orderProductUpdateWithWhereUniqueWithoutProfessionsInput[]
    updateMany?: orderProductUpdateManyWithWhereWithoutProfessionsInput | orderProductUpdateManyWithWhereWithoutProfessionsInput[]
    deleteMany?: orderProductScalarWhereInput | orderProductScalarWhereInput[]
  }

  export type masterProfessionsUpdateManyWithoutProfessionNestedInput = {
    create?: XOR<masterProfessionsCreateWithoutProfessionInput, masterProfessionsUncheckedCreateWithoutProfessionInput> | masterProfessionsCreateWithoutProfessionInput[] | masterProfessionsUncheckedCreateWithoutProfessionInput[]
    connectOrCreate?: masterProfessionsCreateOrConnectWithoutProfessionInput | masterProfessionsCreateOrConnectWithoutProfessionInput[]
    upsert?: masterProfessionsUpsertWithWhereUniqueWithoutProfessionInput | masterProfessionsUpsertWithWhereUniqueWithoutProfessionInput[]
    createMany?: masterProfessionsCreateManyProfessionInputEnvelope
    set?: masterProfessionsWhereUniqueInput | masterProfessionsWhereUniqueInput[]
    disconnect?: masterProfessionsWhereUniqueInput | masterProfessionsWhereUniqueInput[]
    delete?: masterProfessionsWhereUniqueInput | masterProfessionsWhereUniqueInput[]
    connect?: masterProfessionsWhereUniqueInput | masterProfessionsWhereUniqueInput[]
    update?: masterProfessionsUpdateWithWhereUniqueWithoutProfessionInput | masterProfessionsUpdateWithWhereUniqueWithoutProfessionInput[]
    updateMany?: masterProfessionsUpdateManyWithWhereWithoutProfessionInput | masterProfessionsUpdateManyWithWhereWithoutProfessionInput[]
    deleteMany?: masterProfessionsScalarWhereInput | masterProfessionsScalarWhereInput[]
  }

  export type professionLevelUpdateManyWithoutProfessionNestedInput = {
    create?: XOR<professionLevelCreateWithoutProfessionInput, professionLevelUncheckedCreateWithoutProfessionInput> | professionLevelCreateWithoutProfessionInput[] | professionLevelUncheckedCreateWithoutProfessionInput[]
    connectOrCreate?: professionLevelCreateOrConnectWithoutProfessionInput | professionLevelCreateOrConnectWithoutProfessionInput[]
    upsert?: professionLevelUpsertWithWhereUniqueWithoutProfessionInput | professionLevelUpsertWithWhereUniqueWithoutProfessionInput[]
    createMany?: professionLevelCreateManyProfessionInputEnvelope
    set?: professionLevelWhereUniqueInput | professionLevelWhereUniqueInput[]
    disconnect?: professionLevelWhereUniqueInput | professionLevelWhereUniqueInput[]
    delete?: professionLevelWhereUniqueInput | professionLevelWhereUniqueInput[]
    connect?: professionLevelWhereUniqueInput | professionLevelWhereUniqueInput[]
    update?: professionLevelUpdateWithWhereUniqueWithoutProfessionInput | professionLevelUpdateWithWhereUniqueWithoutProfessionInput[]
    updateMany?: professionLevelUpdateManyWithWhereWithoutProfessionInput | professionLevelUpdateManyWithWhereWithoutProfessionInput[]
    deleteMany?: professionLevelScalarWhereInput | professionLevelScalarWhereInput[]
  }

  export type ToolsUpdateManyWithoutProfessionsNestedInput = {
    create?: XOR<ToolsCreateWithoutProfessionsInput, ToolsUncheckedCreateWithoutProfessionsInput> | ToolsCreateWithoutProfessionsInput[] | ToolsUncheckedCreateWithoutProfessionsInput[]
    connectOrCreate?: ToolsCreateOrConnectWithoutProfessionsInput | ToolsCreateOrConnectWithoutProfessionsInput[]
    upsert?: ToolsUpsertWithWhereUniqueWithoutProfessionsInput | ToolsUpsertWithWhereUniqueWithoutProfessionsInput[]
    set?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    disconnect?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    delete?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    connect?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    update?: ToolsUpdateWithWhereUniqueWithoutProfessionsInput | ToolsUpdateWithWhereUniqueWithoutProfessionsInput[]
    updateMany?: ToolsUpdateManyWithWhereWithoutProfessionsInput | ToolsUpdateManyWithWhereWithoutProfessionsInput[]
    deleteMany?: ToolsScalarWhereInput | ToolsScalarWhereInput[]
  }

  export type orderProductUncheckedUpdateManyWithoutProfessionsNestedInput = {
    create?: XOR<orderProductCreateWithoutProfessionsInput, orderProductUncheckedCreateWithoutProfessionsInput> | orderProductCreateWithoutProfessionsInput[] | orderProductUncheckedCreateWithoutProfessionsInput[]
    connectOrCreate?: orderProductCreateOrConnectWithoutProfessionsInput | orderProductCreateOrConnectWithoutProfessionsInput[]
    upsert?: orderProductUpsertWithWhereUniqueWithoutProfessionsInput | orderProductUpsertWithWhereUniqueWithoutProfessionsInput[]
    createMany?: orderProductCreateManyProfessionsInputEnvelope
    set?: orderProductWhereUniqueInput | orderProductWhereUniqueInput[]
    disconnect?: orderProductWhereUniqueInput | orderProductWhereUniqueInput[]
    delete?: orderProductWhereUniqueInput | orderProductWhereUniqueInput[]
    connect?: orderProductWhereUniqueInput | orderProductWhereUniqueInput[]
    update?: orderProductUpdateWithWhereUniqueWithoutProfessionsInput | orderProductUpdateWithWhereUniqueWithoutProfessionsInput[]
    updateMany?: orderProductUpdateManyWithWhereWithoutProfessionsInput | orderProductUpdateManyWithWhereWithoutProfessionsInput[]
    deleteMany?: orderProductScalarWhereInput | orderProductScalarWhereInput[]
  }

  export type masterProfessionsUncheckedUpdateManyWithoutProfessionNestedInput = {
    create?: XOR<masterProfessionsCreateWithoutProfessionInput, masterProfessionsUncheckedCreateWithoutProfessionInput> | masterProfessionsCreateWithoutProfessionInput[] | masterProfessionsUncheckedCreateWithoutProfessionInput[]
    connectOrCreate?: masterProfessionsCreateOrConnectWithoutProfessionInput | masterProfessionsCreateOrConnectWithoutProfessionInput[]
    upsert?: masterProfessionsUpsertWithWhereUniqueWithoutProfessionInput | masterProfessionsUpsertWithWhereUniqueWithoutProfessionInput[]
    createMany?: masterProfessionsCreateManyProfessionInputEnvelope
    set?: masterProfessionsWhereUniqueInput | masterProfessionsWhereUniqueInput[]
    disconnect?: masterProfessionsWhereUniqueInput | masterProfessionsWhereUniqueInput[]
    delete?: masterProfessionsWhereUniqueInput | masterProfessionsWhereUniqueInput[]
    connect?: masterProfessionsWhereUniqueInput | masterProfessionsWhereUniqueInput[]
    update?: masterProfessionsUpdateWithWhereUniqueWithoutProfessionInput | masterProfessionsUpdateWithWhereUniqueWithoutProfessionInput[]
    updateMany?: masterProfessionsUpdateManyWithWhereWithoutProfessionInput | masterProfessionsUpdateManyWithWhereWithoutProfessionInput[]
    deleteMany?: masterProfessionsScalarWhereInput | masterProfessionsScalarWhereInput[]
  }

  export type professionLevelUncheckedUpdateManyWithoutProfessionNestedInput = {
    create?: XOR<professionLevelCreateWithoutProfessionInput, professionLevelUncheckedCreateWithoutProfessionInput> | professionLevelCreateWithoutProfessionInput[] | professionLevelUncheckedCreateWithoutProfessionInput[]
    connectOrCreate?: professionLevelCreateOrConnectWithoutProfessionInput | professionLevelCreateOrConnectWithoutProfessionInput[]
    upsert?: professionLevelUpsertWithWhereUniqueWithoutProfessionInput | professionLevelUpsertWithWhereUniqueWithoutProfessionInput[]
    createMany?: professionLevelCreateManyProfessionInputEnvelope
    set?: professionLevelWhereUniqueInput | professionLevelWhereUniqueInput[]
    disconnect?: professionLevelWhereUniqueInput | professionLevelWhereUniqueInput[]
    delete?: professionLevelWhereUniqueInput | professionLevelWhereUniqueInput[]
    connect?: professionLevelWhereUniqueInput | professionLevelWhereUniqueInput[]
    update?: professionLevelUpdateWithWhereUniqueWithoutProfessionInput | professionLevelUpdateWithWhereUniqueWithoutProfessionInput[]
    updateMany?: professionLevelUpdateManyWithWhereWithoutProfessionInput | professionLevelUpdateManyWithWhereWithoutProfessionInput[]
    deleteMany?: professionLevelScalarWhereInput | professionLevelScalarWhereInput[]
  }

  export type ToolsUncheckedUpdateManyWithoutProfessionsNestedInput = {
    create?: XOR<ToolsCreateWithoutProfessionsInput, ToolsUncheckedCreateWithoutProfessionsInput> | ToolsCreateWithoutProfessionsInput[] | ToolsUncheckedCreateWithoutProfessionsInput[]
    connectOrCreate?: ToolsCreateOrConnectWithoutProfessionsInput | ToolsCreateOrConnectWithoutProfessionsInput[]
    upsert?: ToolsUpsertWithWhereUniqueWithoutProfessionsInput | ToolsUpsertWithWhereUniqueWithoutProfessionsInput[]
    set?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    disconnect?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    delete?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    connect?: ToolsWhereUniqueInput | ToolsWhereUniqueInput[]
    update?: ToolsUpdateWithWhereUniqueWithoutProfessionsInput | ToolsUpdateWithWhereUniqueWithoutProfessionsInput[]
    updateMany?: ToolsUpdateManyWithWhereWithoutProfessionsInput | ToolsUpdateManyWithWhereWithoutProfessionsInput[]
    deleteMany?: ToolsScalarWhereInput | ToolsScalarWhereInput[]
  }

  export type orderProductCreateNestedManyWithoutToolInput = {
    create?: XOR<orderProductCreateWithoutToolInput, orderProductUncheckedCreateWithoutToolInput> | orderProductCreateWithoutToolInput[] | orderProductUncheckedCreateWithoutToolInput[]
    connectOrCreate?: orderProductCreateOrConnectWithoutToolInput | orderProductCreateOrConnectWithoutToolInput[]
    createMany?: orderProductCreateManyToolInputEnvelope
    connect?: orderProductWhereUniqueInput | orderProductWhereUniqueInput[]
  }

  export type ProfessionCreateNestedManyWithoutToolsInput = {
    create?: XOR<ProfessionCreateWithoutToolsInput, ProfessionUncheckedCreateWithoutToolsInput> | ProfessionCreateWithoutToolsInput[] | ProfessionUncheckedCreateWithoutToolsInput[]
    connectOrCreate?: ProfessionCreateOrConnectWithoutToolsInput | ProfessionCreateOrConnectWithoutToolsInput[]
    connect?: ProfessionWhereUniqueInput | ProfessionWhereUniqueInput[]
  }

  export type BrandCreateNestedOneWithoutToolsInput = {
    create?: XOR<BrandCreateWithoutToolsInput, BrandUncheckedCreateWithoutToolsInput>
    connectOrCreate?: BrandCreateOrConnectWithoutToolsInput
    connect?: BrandWhereUniqueInput
  }

  export type PowerCreateNestedOneWithoutToolsInput = {
    create?: XOR<PowerCreateWithoutToolsInput, PowerUncheckedCreateWithoutToolsInput>
    connectOrCreate?: PowerCreateOrConnectWithoutToolsInput
    connect?: PowerWhereUniqueInput
  }

  export type SizeCreateNestedOneWithoutToolsInput = {
    create?: XOR<SizeCreateWithoutToolsInput, SizeUncheckedCreateWithoutToolsInput>
    connectOrCreate?: SizeCreateOrConnectWithoutToolsInput
    connect?: SizeWhereUniqueInput
  }

  export type orderProductUncheckedCreateNestedManyWithoutToolInput = {
    create?: XOR<orderProductCreateWithoutToolInput, orderProductUncheckedCreateWithoutToolInput> | orderProductCreateWithoutToolInput[] | orderProductUncheckedCreateWithoutToolInput[]
    connectOrCreate?: orderProductCreateOrConnectWithoutToolInput | orderProductCreateOrConnectWithoutToolInput[]
    createMany?: orderProductCreateManyToolInputEnvelope
    connect?: orderProductWhereUniqueInput | orderProductWhereUniqueInput[]
  }

  export type ProfessionUncheckedCreateNestedManyWithoutToolsInput = {
    create?: XOR<ProfessionCreateWithoutToolsInput, ProfessionUncheckedCreateWithoutToolsInput> | ProfessionCreateWithoutToolsInput[] | ProfessionUncheckedCreateWithoutToolsInput[]
    connectOrCreate?: ProfessionCreateOrConnectWithoutToolsInput | ProfessionCreateOrConnectWithoutToolsInput[]
    connect?: ProfessionWhereUniqueInput | ProfessionWhereUniqueInput[]
  }

  export type orderProductUpdateManyWithoutToolNestedInput = {
    create?: XOR<orderProductCreateWithoutToolInput, orderProductUncheckedCreateWithoutToolInput> | orderProductCreateWithoutToolInput[] | orderProductUncheckedCreateWithoutToolInput[]
    connectOrCreate?: orderProductCreateOrConnectWithoutToolInput | orderProductCreateOrConnectWithoutToolInput[]
    upsert?: orderProductUpsertWithWhereUniqueWithoutToolInput | orderProductUpsertWithWhereUniqueWithoutToolInput[]
    createMany?: orderProductCreateManyToolInputEnvelope
    set?: orderProductWhereUniqueInput | orderProductWhereUniqueInput[]
    disconnect?: orderProductWhereUniqueInput | orderProductWhereUniqueInput[]
    delete?: orderProductWhereUniqueInput | orderProductWhereUniqueInput[]
    connect?: orderProductWhereUniqueInput | orderProductWhereUniqueInput[]
    update?: orderProductUpdateWithWhereUniqueWithoutToolInput | orderProductUpdateWithWhereUniqueWithoutToolInput[]
    updateMany?: orderProductUpdateManyWithWhereWithoutToolInput | orderProductUpdateManyWithWhereWithoutToolInput[]
    deleteMany?: orderProductScalarWhereInput | orderProductScalarWhereInput[]
  }

  export type ProfessionUpdateManyWithoutToolsNestedInput = {
    create?: XOR<ProfessionCreateWithoutToolsInput, ProfessionUncheckedCreateWithoutToolsInput> | ProfessionCreateWithoutToolsInput[] | ProfessionUncheckedCreateWithoutToolsInput[]
    connectOrCreate?: ProfessionCreateOrConnectWithoutToolsInput | ProfessionCreateOrConnectWithoutToolsInput[]
    upsert?: ProfessionUpsertWithWhereUniqueWithoutToolsInput | ProfessionUpsertWithWhereUniqueWithoutToolsInput[]
    set?: ProfessionWhereUniqueInput | ProfessionWhereUniqueInput[]
    disconnect?: ProfessionWhereUniqueInput | ProfessionWhereUniqueInput[]
    delete?: ProfessionWhereUniqueInput | ProfessionWhereUniqueInput[]
    connect?: ProfessionWhereUniqueInput | ProfessionWhereUniqueInput[]
    update?: ProfessionUpdateWithWhereUniqueWithoutToolsInput | ProfessionUpdateWithWhereUniqueWithoutToolsInput[]
    updateMany?: ProfessionUpdateManyWithWhereWithoutToolsInput | ProfessionUpdateManyWithWhereWithoutToolsInput[]
    deleteMany?: ProfessionScalarWhereInput | ProfessionScalarWhereInput[]
  }

  export type BrandUpdateOneWithoutToolsNestedInput = {
    create?: XOR<BrandCreateWithoutToolsInput, BrandUncheckedCreateWithoutToolsInput>
    connectOrCreate?: BrandCreateOrConnectWithoutToolsInput
    upsert?: BrandUpsertWithoutToolsInput
    disconnect?: BrandWhereInput | boolean
    delete?: BrandWhereInput | boolean
    connect?: BrandWhereUniqueInput
    update?: XOR<XOR<BrandUpdateToOneWithWhereWithoutToolsInput, BrandUpdateWithoutToolsInput>, BrandUncheckedUpdateWithoutToolsInput>
  }

  export type PowerUpdateOneWithoutToolsNestedInput = {
    create?: XOR<PowerCreateWithoutToolsInput, PowerUncheckedCreateWithoutToolsInput>
    connectOrCreate?: PowerCreateOrConnectWithoutToolsInput
    upsert?: PowerUpsertWithoutToolsInput
    disconnect?: PowerWhereInput | boolean
    delete?: PowerWhereInput | boolean
    connect?: PowerWhereUniqueInput
    update?: XOR<XOR<PowerUpdateToOneWithWhereWithoutToolsInput, PowerUpdateWithoutToolsInput>, PowerUncheckedUpdateWithoutToolsInput>
  }

  export type SizeUpdateOneWithoutToolsNestedInput = {
    create?: XOR<SizeCreateWithoutToolsInput, SizeUncheckedCreateWithoutToolsInput>
    connectOrCreate?: SizeCreateOrConnectWithoutToolsInput
    upsert?: SizeUpsertWithoutToolsInput
    disconnect?: SizeWhereInput | boolean
    delete?: SizeWhereInput | boolean
    connect?: SizeWhereUniqueInput
    update?: XOR<XOR<SizeUpdateToOneWithWhereWithoutToolsInput, SizeUpdateWithoutToolsInput>, SizeUncheckedUpdateWithoutToolsInput>
  }

  export type orderProductUncheckedUpdateManyWithoutToolNestedInput = {
    create?: XOR<orderProductCreateWithoutToolInput, orderProductUncheckedCreateWithoutToolInput> | orderProductCreateWithoutToolInput[] | orderProductUncheckedCreateWithoutToolInput[]
    connectOrCreate?: orderProductCreateOrConnectWithoutToolInput | orderProductCreateOrConnectWithoutToolInput[]
    upsert?: orderProductUpsertWithWhereUniqueWithoutToolInput | orderProductUpsertWithWhereUniqueWithoutToolInput[]
    createMany?: orderProductCreateManyToolInputEnvelope
    set?: orderProductWhereUniqueInput | orderProductWhereUniqueInput[]
    disconnect?: orderProductWhereUniqueInput | orderProductWhereUniqueInput[]
    delete?: orderProductWhereUniqueInput | orderProductWhereUniqueInput[]
    connect?: orderProductWhereUniqueInput | orderProductWhereUniqueInput[]
    update?: orderProductUpdateWithWhereUniqueWithoutToolInput | orderProductUpdateWithWhereUniqueWithoutToolInput[]
    updateMany?: orderProductUpdateManyWithWhereWithoutToolInput | orderProductUpdateManyWithWhereWithoutToolInput[]
    deleteMany?: orderProductScalarWhereInput | orderProductScalarWhereInput[]
  }

  export type ProfessionUncheckedUpdateManyWithoutToolsNestedInput = {
    create?: XOR<ProfessionCreateWithoutToolsInput, ProfessionUncheckedCreateWithoutToolsInput> | ProfessionCreateWithoutToolsInput[] | ProfessionUncheckedCreateWithoutToolsInput[]
    connectOrCreate?: ProfessionCreateOrConnectWithoutToolsInput | ProfessionCreateOrConnectWithoutToolsInput[]
    upsert?: ProfessionUpsertWithWhereUniqueWithoutToolsInput | ProfessionUpsertWithWhereUniqueWithoutToolsInput[]
    set?: ProfessionWhereUniqueInput | ProfessionWhereUniqueInput[]
    disconnect?: ProfessionWhereUniqueInput | ProfessionWhereUniqueInput[]
    delete?: ProfessionWhereUniqueInput | ProfessionWhereUniqueInput[]
    connect?: ProfessionWhereUniqueInput | ProfessionWhereUniqueInput[]
    update?: ProfessionUpdateWithWhereUniqueWithoutToolsInput | ProfessionUpdateWithWhereUniqueWithoutToolsInput[]
    updateMany?: ProfessionUpdateManyWithWhereWithoutToolsInput | ProfessionUpdateManyWithWhereWithoutToolsInput[]
    deleteMany?: ProfessionScalarWhereInput | ProfessionScalarWhereInput[]
  }

  export type orderProductCreateNestedManyWithoutOrderInput = {
    create?: XOR<orderProductCreateWithoutOrderInput, orderProductUncheckedCreateWithoutOrderInput> | orderProductCreateWithoutOrderInput[] | orderProductUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: orderProductCreateOrConnectWithoutOrderInput | orderProductCreateOrConnectWithoutOrderInput[]
    createMany?: orderProductCreateManyOrderInputEnvelope
    connect?: orderProductWhereUniqueInput | orderProductWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutOrdersInput = {
    create?: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrdersInput
    connect?: UserWhereUniqueInput
  }

  export type orderProductUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<orderProductCreateWithoutOrderInput, orderProductUncheckedCreateWithoutOrderInput> | orderProductCreateWithoutOrderInput[] | orderProductUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: orderProductCreateOrConnectWithoutOrderInput | orderProductCreateOrConnectWithoutOrderInput[]
    createMany?: orderProductCreateManyOrderInputEnvelope
    connect?: orderProductWhereUniqueInput | orderProductWhereUniqueInput[]
  }

  export type orderProductUpdateManyWithoutOrderNestedInput = {
    create?: XOR<orderProductCreateWithoutOrderInput, orderProductUncheckedCreateWithoutOrderInput> | orderProductCreateWithoutOrderInput[] | orderProductUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: orderProductCreateOrConnectWithoutOrderInput | orderProductCreateOrConnectWithoutOrderInput[]
    upsert?: orderProductUpsertWithWhereUniqueWithoutOrderInput | orderProductUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: orderProductCreateManyOrderInputEnvelope
    set?: orderProductWhereUniqueInput | orderProductWhereUniqueInput[]
    disconnect?: orderProductWhereUniqueInput | orderProductWhereUniqueInput[]
    delete?: orderProductWhereUniqueInput | orderProductWhereUniqueInput[]
    connect?: orderProductWhereUniqueInput | orderProductWhereUniqueInput[]
    update?: orderProductUpdateWithWhereUniqueWithoutOrderInput | orderProductUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: orderProductUpdateManyWithWhereWithoutOrderInput | orderProductUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: orderProductScalarWhereInput | orderProductScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrdersInput
    upsert?: UserUpsertWithoutOrdersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOrdersInput, UserUpdateWithoutOrdersInput>, UserUncheckedUpdateWithoutOrdersInput>
  }

  export type orderProductUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<orderProductCreateWithoutOrderInput, orderProductUncheckedCreateWithoutOrderInput> | orderProductCreateWithoutOrderInput[] | orderProductUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: orderProductCreateOrConnectWithoutOrderInput | orderProductCreateOrConnectWithoutOrderInput[]
    upsert?: orderProductUpsertWithWhereUniqueWithoutOrderInput | orderProductUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: orderProductCreateManyOrderInputEnvelope
    set?: orderProductWhereUniqueInput | orderProductWhereUniqueInput[]
    disconnect?: orderProductWhereUniqueInput | orderProductWhereUniqueInput[]
    delete?: orderProductWhereUniqueInput | orderProductWhereUniqueInput[]
    connect?: orderProductWhereUniqueInput | orderProductWhereUniqueInput[]
    update?: orderProductUpdateWithWhereUniqueWithoutOrderInput | orderProductUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: orderProductUpdateManyWithWhereWithoutOrderInput | orderProductUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: orderProductScalarWhereInput | orderProductScalarWhereInput[]
  }

  export type OrderCreateNestedOneWithoutOrderProductInput = {
    create?: XOR<OrderCreateWithoutOrderProductInput, OrderUncheckedCreateWithoutOrderProductInput>
    connectOrCreate?: OrderCreateOrConnectWithoutOrderProductInput
    connect?: OrderWhereUniqueInput
  }

  export type ToolsCreateNestedOneWithoutOrderProductInput = {
    create?: XOR<ToolsCreateWithoutOrderProductInput, ToolsUncheckedCreateWithoutOrderProductInput>
    connectOrCreate?: ToolsCreateOrConnectWithoutOrderProductInput
    connect?: ToolsWhereUniqueInput
  }

  export type LevelCreateNestedOneWithoutProductInput = {
    create?: XOR<LevelCreateWithoutProductInput, LevelUncheckedCreateWithoutProductInput>
    connectOrCreate?: LevelCreateOrConnectWithoutProductInput
    connect?: LevelWhereUniqueInput
  }

  export type ProfessionCreateNestedOneWithoutOrderProductInput = {
    create?: XOR<ProfessionCreateWithoutOrderProductInput, ProfessionUncheckedCreateWithoutOrderProductInput>
    connectOrCreate?: ProfessionCreateOrConnectWithoutOrderProductInput
    connect?: ProfessionWhereUniqueInput
  }

  export type OrderUpdateOneRequiredWithoutOrderProductNestedInput = {
    create?: XOR<OrderCreateWithoutOrderProductInput, OrderUncheckedCreateWithoutOrderProductInput>
    connectOrCreate?: OrderCreateOrConnectWithoutOrderProductInput
    upsert?: OrderUpsertWithoutOrderProductInput
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutOrderProductInput, OrderUpdateWithoutOrderProductInput>, OrderUncheckedUpdateWithoutOrderProductInput>
  }

  export type ToolsUpdateOneWithoutOrderProductNestedInput = {
    create?: XOR<ToolsCreateWithoutOrderProductInput, ToolsUncheckedCreateWithoutOrderProductInput>
    connectOrCreate?: ToolsCreateOrConnectWithoutOrderProductInput
    upsert?: ToolsUpsertWithoutOrderProductInput
    disconnect?: ToolsWhereInput | boolean
    delete?: ToolsWhereInput | boolean
    connect?: ToolsWhereUniqueInput
    update?: XOR<XOR<ToolsUpdateToOneWithWhereWithoutOrderProductInput, ToolsUpdateWithoutOrderProductInput>, ToolsUncheckedUpdateWithoutOrderProductInput>
  }

  export type LevelUpdateOneWithoutProductNestedInput = {
    create?: XOR<LevelCreateWithoutProductInput, LevelUncheckedCreateWithoutProductInput>
    connectOrCreate?: LevelCreateOrConnectWithoutProductInput
    upsert?: LevelUpsertWithoutProductInput
    disconnect?: LevelWhereInput | boolean
    delete?: LevelWhereInput | boolean
    connect?: LevelWhereUniqueInput
    update?: XOR<XOR<LevelUpdateToOneWithWhereWithoutProductInput, LevelUpdateWithoutProductInput>, LevelUncheckedUpdateWithoutProductInput>
  }

  export type ProfessionUpdateOneWithoutOrderProductNestedInput = {
    create?: XOR<ProfessionCreateWithoutOrderProductInput, ProfessionUncheckedCreateWithoutOrderProductInput>
    connectOrCreate?: ProfessionCreateOrConnectWithoutOrderProductInput
    upsert?: ProfessionUpsertWithoutOrderProductInput
    disconnect?: ProfessionWhereInput | boolean
    delete?: ProfessionWhereInput | boolean
    connect?: ProfessionWhereUniqueInput
    update?: XOR<XOR<ProfessionUpdateToOneWithWhereWithoutOrderProductInput, ProfessionUpdateWithoutOrderProductInput>, ProfessionUncheckedUpdateWithoutOrderProductInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type RegionCreateWithoutUserInput = {
    name: string
  }

  export type RegionUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
  }

  export type RegionCreateOrConnectWithoutUserInput = {
    where: RegionWhereUniqueInput
    create: XOR<RegionCreateWithoutUserInput, RegionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateWithoutUserInput = {
    ip: string
    date?: Date | string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: number
    ip: string
    date?: Date | string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type OrderCreateWithoutUserInput = {
    total: number
    location: string
    address: string
    date?: Date | string
    pay_type: string
    withDelivery: boolean
    status: string
    instruction: string
    orderProduct?: orderProductCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutUserInput = {
    id?: number
    total: number
    location: string
    address: string
    date?: Date | string
    pay_type: string
    withDelivery: boolean
    status: string
    instruction: string
    orderProduct?: orderProductUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutUserInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput>
  }

  export type OrderCreateManyUserInputEnvelope = {
    data: OrderCreateManyUserInput | OrderCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RegionUpsertWithoutUserInput = {
    update: XOR<RegionUpdateWithoutUserInput, RegionUncheckedUpdateWithoutUserInput>
    create: XOR<RegionCreateWithoutUserInput, RegionUncheckedCreateWithoutUserInput>
    where?: RegionWhereInput
  }

  export type RegionUpdateToOneWithWhereWithoutUserInput = {
    where?: RegionWhereInput
    data: XOR<RegionUpdateWithoutUserInput, RegionUncheckedUpdateWithoutUserInput>
  }

  export type RegionUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type RegionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: IntFilter<"Session"> | number
    ip?: StringFilter<"Session"> | string
    userId?: IntFilter<"Session"> | number
    date?: DateTimeFilter<"Session"> | Date | string
  }

  export type OrderUpsertWithWhereUniqueWithoutUserInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutUserInput, OrderUncheckedUpdateWithoutUserInput>
    create: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutUserInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutUserInput, OrderUncheckedUpdateWithoutUserInput>
  }

  export type OrderUpdateManyWithWhereWithoutUserInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutUserInput>
  }

  export type OrderScalarWhereInput = {
    AND?: OrderScalarWhereInput | OrderScalarWhereInput[]
    OR?: OrderScalarWhereInput[]
    NOT?: OrderScalarWhereInput | OrderScalarWhereInput[]
    id?: IntFilter<"Order"> | number
    total?: FloatFilter<"Order"> | number
    location?: StringFilter<"Order"> | string
    address?: StringFilter<"Order"> | string
    date?: DateTimeFilter<"Order"> | Date | string
    pay_type?: StringFilter<"Order"> | string
    withDelivery?: BoolFilter<"Order"> | boolean
    status?: StringFilter<"Order"> | string
    instruction?: StringFilter<"Order"> | string
    userId?: IntFilter<"Order"> | number
  }

  export type UserCreateWithoutRegionInput = {
    name: string
    phone: string
    password: string
    status?: string
    role: string
    stir?: number | null
    mfo?: number | null
    hr?: number | null
    bank?: string | null
    oked?: number | null
    manzil?: string | null
    sessions?: SessionCreateNestedManyWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRegionInput = {
    id?: number
    name: string
    phone: string
    password: string
    status?: string
    role: string
    stir?: number | null
    mfo?: number | null
    hr?: number | null
    bank?: string | null
    oked?: number | null
    manzil?: string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRegionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRegionInput, UserUncheckedCreateWithoutRegionInput>
  }

  export type UserCreateManyRegionInputEnvelope = {
    data: UserCreateManyRegionInput | UserCreateManyRegionInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutRegionInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutRegionInput, UserUncheckedUpdateWithoutRegionInput>
    create: XOR<UserCreateWithoutRegionInput, UserUncheckedCreateWithoutRegionInput>
  }

  export type UserUpdateWithWhereUniqueWithoutRegionInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutRegionInput, UserUncheckedUpdateWithoutRegionInput>
  }

  export type UserUpdateManyWithWhereWithoutRegionInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutRegionInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    phone?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    status?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    regionId?: IntFilter<"User"> | number
    stir?: IntNullableFilter<"User"> | number | null
    mfo?: IntNullableFilter<"User"> | number | null
    hr?: IntNullableFilter<"User"> | number | null
    bank?: StringNullableFilter<"User"> | string | null
    oked?: IntNullableFilter<"User"> | number | null
    manzil?: StringNullableFilter<"User"> | string | null
  }

  export type UserCreateWithoutSessionsInput = {
    name: string
    phone: string
    password: string
    status?: string
    role: string
    stir?: number | null
    mfo?: number | null
    hr?: number | null
    bank?: string | null
    oked?: number | null
    manzil?: string | null
    region: RegionCreateNestedOneWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: number
    name: string
    phone: string
    password: string
    status?: string
    role: string
    regionId: number
    stir?: number | null
    mfo?: number | null
    hr?: number | null
    bank?: string | null
    oked?: number | null
    manzil?: string | null
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    stir?: NullableIntFieldUpdateOperationsInput | number | null
    mfo?: NullableIntFieldUpdateOperationsInput | number | null
    hr?: NullableIntFieldUpdateOperationsInput | number | null
    bank?: NullableStringFieldUpdateOperationsInput | string | null
    oked?: NullableIntFieldUpdateOperationsInput | number | null
    manzil?: NullableStringFieldUpdateOperationsInput | string | null
    region?: RegionUpdateOneRequiredWithoutUserNestedInput
    orders?: OrderUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    regionId?: IntFieldUpdateOperationsInput | number
    stir?: NullableIntFieldUpdateOperationsInput | number | null
    mfo?: NullableIntFieldUpdateOperationsInput | number | null
    hr?: NullableIntFieldUpdateOperationsInput | number | null
    bank?: NullableStringFieldUpdateOperationsInput | string | null
    oked?: NullableIntFieldUpdateOperationsInput | number | null
    manzil?: NullableStringFieldUpdateOperationsInput | string | null
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
  }

  export type orderProductCreateWithoutLevelInput = {
    isActive: string
    timeUnit: string
    workingTime: number
    price: number
    count: number
    order: OrderCreateNestedOneWithoutOrderProductInput
    tool?: ToolsCreateNestedOneWithoutOrderProductInput
    professions?: ProfessionCreateNestedOneWithoutOrderProductInput
  }

  export type orderProductUncheckedCreateWithoutLevelInput = {
    id?: number
    isActive: string
    timeUnit: string
    workingTime: number
    price: number
    count: number
    toolId?: number | null
    orderId: number
    professionId?: number | null
  }

  export type orderProductCreateOrConnectWithoutLevelInput = {
    where: orderProductWhereUniqueInput
    create: XOR<orderProductCreateWithoutLevelInput, orderProductUncheckedCreateWithoutLevelInput>
  }

  export type orderProductCreateManyLevelInputEnvelope = {
    data: orderProductCreateManyLevelInput | orderProductCreateManyLevelInput[]
    skipDuplicates?: boolean
  }

  export type professionLevelCreateWithoutLevelInput = {
    minWorking_h: number
    price_h: number
    price_d: number
    profession: ProfessionCreateNestedOneWithoutProfessionLevelInput
  }

  export type professionLevelUncheckedCreateWithoutLevelInput = {
    id?: number
    professionId: number
    minWorking_h: number
    price_h: number
    price_d: number
  }

  export type professionLevelCreateOrConnectWithoutLevelInput = {
    where: professionLevelWhereUniqueInput
    create: XOR<professionLevelCreateWithoutLevelInput, professionLevelUncheckedCreateWithoutLevelInput>
  }

  export type professionLevelCreateManyLevelInputEnvelope = {
    data: professionLevelCreateManyLevelInput | professionLevelCreateManyLevelInput[]
    skipDuplicates?: boolean
  }

  export type masterProfessionsCreateWithoutLevelInput = {
    minWorking_h?: number | null
    price_h?: number | null
    price_d?: number | null
    experience: number
    profession: ProfessionCreateNestedOneWithoutMasterProfessionInput
    master: MasterCreateNestedOneWithoutMasterProfessionsInput
  }

  export type masterProfessionsUncheckedCreateWithoutLevelInput = {
    id?: number
    minWorking_h?: number | null
    professionId: number
    price_h?: number | null
    price_d?: number | null
    experience: number
    masterId: number
  }

  export type masterProfessionsCreateOrConnectWithoutLevelInput = {
    where: masterProfessionsWhereUniqueInput
    create: XOR<masterProfessionsCreateWithoutLevelInput, masterProfessionsUncheckedCreateWithoutLevelInput>
  }

  export type masterProfessionsCreateManyLevelInputEnvelope = {
    data: masterProfessionsCreateManyLevelInput | masterProfessionsCreateManyLevelInput[]
    skipDuplicates?: boolean
  }

  export type orderProductUpsertWithWhereUniqueWithoutLevelInput = {
    where: orderProductWhereUniqueInput
    update: XOR<orderProductUpdateWithoutLevelInput, orderProductUncheckedUpdateWithoutLevelInput>
    create: XOR<orderProductCreateWithoutLevelInput, orderProductUncheckedCreateWithoutLevelInput>
  }

  export type orderProductUpdateWithWhereUniqueWithoutLevelInput = {
    where: orderProductWhereUniqueInput
    data: XOR<orderProductUpdateWithoutLevelInput, orderProductUncheckedUpdateWithoutLevelInput>
  }

  export type orderProductUpdateManyWithWhereWithoutLevelInput = {
    where: orderProductScalarWhereInput
    data: XOR<orderProductUpdateManyMutationInput, orderProductUncheckedUpdateManyWithoutLevelInput>
  }

  export type orderProductScalarWhereInput = {
    AND?: orderProductScalarWhereInput | orderProductScalarWhereInput[]
    OR?: orderProductScalarWhereInput[]
    NOT?: orderProductScalarWhereInput | orderProductScalarWhereInput[]
    id?: IntFilter<"orderProduct"> | number
    isActive?: StringFilter<"orderProduct"> | string
    timeUnit?: StringFilter<"orderProduct"> | string
    workingTime?: IntFilter<"orderProduct"> | number
    price?: FloatFilter<"orderProduct"> | number
    count?: IntFilter<"orderProduct"> | number
    toolId?: IntNullableFilter<"orderProduct"> | number | null
    levelId?: IntNullableFilter<"orderProduct"> | number | null
    orderId?: IntFilter<"orderProduct"> | number
    professionId?: IntNullableFilter<"orderProduct"> | number | null
  }

  export type professionLevelUpsertWithWhereUniqueWithoutLevelInput = {
    where: professionLevelWhereUniqueInput
    update: XOR<professionLevelUpdateWithoutLevelInput, professionLevelUncheckedUpdateWithoutLevelInput>
    create: XOR<professionLevelCreateWithoutLevelInput, professionLevelUncheckedCreateWithoutLevelInput>
  }

  export type professionLevelUpdateWithWhereUniqueWithoutLevelInput = {
    where: professionLevelWhereUniqueInput
    data: XOR<professionLevelUpdateWithoutLevelInput, professionLevelUncheckedUpdateWithoutLevelInput>
  }

  export type professionLevelUpdateManyWithWhereWithoutLevelInput = {
    where: professionLevelScalarWhereInput
    data: XOR<professionLevelUpdateManyMutationInput, professionLevelUncheckedUpdateManyWithoutLevelInput>
  }

  export type professionLevelScalarWhereInput = {
    AND?: professionLevelScalarWhereInput | professionLevelScalarWhereInput[]
    OR?: professionLevelScalarWhereInput[]
    NOT?: professionLevelScalarWhereInput | professionLevelScalarWhereInput[]
    id?: IntFilter<"professionLevel"> | number
    professionId?: IntFilter<"professionLevel"> | number
    levelId?: IntFilter<"professionLevel"> | number
    minWorking_h?: IntFilter<"professionLevel"> | number
    price_h?: IntFilter<"professionLevel"> | number
    price_d?: IntFilter<"professionLevel"> | number
  }

  export type masterProfessionsUpsertWithWhereUniqueWithoutLevelInput = {
    where: masterProfessionsWhereUniqueInput
    update: XOR<masterProfessionsUpdateWithoutLevelInput, masterProfessionsUncheckedUpdateWithoutLevelInput>
    create: XOR<masterProfessionsCreateWithoutLevelInput, masterProfessionsUncheckedCreateWithoutLevelInput>
  }

  export type masterProfessionsUpdateWithWhereUniqueWithoutLevelInput = {
    where: masterProfessionsWhereUniqueInput
    data: XOR<masterProfessionsUpdateWithoutLevelInput, masterProfessionsUncheckedUpdateWithoutLevelInput>
  }

  export type masterProfessionsUpdateManyWithWhereWithoutLevelInput = {
    where: masterProfessionsScalarWhereInput
    data: XOR<masterProfessionsUpdateManyMutationInput, masterProfessionsUncheckedUpdateManyWithoutLevelInput>
  }

  export type masterProfessionsScalarWhereInput = {
    AND?: masterProfessionsScalarWhereInput | masterProfessionsScalarWhereInput[]
    OR?: masterProfessionsScalarWhereInput[]
    NOT?: masterProfessionsScalarWhereInput | masterProfessionsScalarWhereInput[]
    id?: IntFilter<"masterProfessions"> | number
    minWorking_h?: IntNullableFilter<"masterProfessions"> | number | null
    professionId?: IntFilter<"masterProfessions"> | number
    levelId?: IntFilter<"masterProfessions"> | number
    price_h?: FloatNullableFilter<"masterProfessions"> | number | null
    price_d?: FloatNullableFilter<"masterProfessions"> | number | null
    experience?: IntFilter<"masterProfessions"> | number
    masterId?: IntFilter<"masterProfessions"> | number
  }

  export type ToolsCreateWithoutBrandInput = {
    name: string
    desc: string
    price_h: number
    price_d: number
    quantity: number
    code: number
    isActive?: boolean
    image: string
    orderProduct?: orderProductCreateNestedManyWithoutToolInput
    professions?: ProfessionCreateNestedManyWithoutToolsInput
    power?: PowerCreateNestedOneWithoutToolsInput
    size?: SizeCreateNestedOneWithoutToolsInput
  }

  export type ToolsUncheckedCreateWithoutBrandInput = {
    id?: number
    name: string
    desc: string
    price_h: number
    price_d: number
    quantity: number
    code: number
    isActive?: boolean
    powerId?: number | null
    sizeId?: number | null
    image: string
    orderProduct?: orderProductUncheckedCreateNestedManyWithoutToolInput
    professions?: ProfessionUncheckedCreateNestedManyWithoutToolsInput
  }

  export type ToolsCreateOrConnectWithoutBrandInput = {
    where: ToolsWhereUniqueInput
    create: XOR<ToolsCreateWithoutBrandInput, ToolsUncheckedCreateWithoutBrandInput>
  }

  export type ToolsCreateManyBrandInputEnvelope = {
    data: ToolsCreateManyBrandInput | ToolsCreateManyBrandInput[]
    skipDuplicates?: boolean
  }

  export type ToolsUpsertWithWhereUniqueWithoutBrandInput = {
    where: ToolsWhereUniqueInput
    update: XOR<ToolsUpdateWithoutBrandInput, ToolsUncheckedUpdateWithoutBrandInput>
    create: XOR<ToolsCreateWithoutBrandInput, ToolsUncheckedCreateWithoutBrandInput>
  }

  export type ToolsUpdateWithWhereUniqueWithoutBrandInput = {
    where: ToolsWhereUniqueInput
    data: XOR<ToolsUpdateWithoutBrandInput, ToolsUncheckedUpdateWithoutBrandInput>
  }

  export type ToolsUpdateManyWithWhereWithoutBrandInput = {
    where: ToolsScalarWhereInput
    data: XOR<ToolsUpdateManyMutationInput, ToolsUncheckedUpdateManyWithoutBrandInput>
  }

  export type ToolsScalarWhereInput = {
    AND?: ToolsScalarWhereInput | ToolsScalarWhereInput[]
    OR?: ToolsScalarWhereInput[]
    NOT?: ToolsScalarWhereInput | ToolsScalarWhereInput[]
    id?: IntFilter<"Tools"> | number
    name?: StringFilter<"Tools"> | string
    desc?: StringFilter<"Tools"> | string
    price_h?: FloatFilter<"Tools"> | number
    price_d?: FloatFilter<"Tools"> | number
    quantity?: IntFilter<"Tools"> | number
    code?: IntFilter<"Tools"> | number
    brandId?: IntNullableFilter<"Tools"> | number | null
    isActive?: BoolFilter<"Tools"> | boolean
    powerId?: IntNullableFilter<"Tools"> | number | null
    sizeId?: IntNullableFilter<"Tools"> | number | null
    image?: StringFilter<"Tools"> | string
  }

  export type ToolsCreateWithoutPowerInput = {
    name: string
    desc: string
    price_h: number
    price_d: number
    quantity: number
    code: number
    isActive?: boolean
    image: string
    orderProduct?: orderProductCreateNestedManyWithoutToolInput
    professions?: ProfessionCreateNestedManyWithoutToolsInput
    brand?: BrandCreateNestedOneWithoutToolsInput
    size?: SizeCreateNestedOneWithoutToolsInput
  }

  export type ToolsUncheckedCreateWithoutPowerInput = {
    id?: number
    name: string
    desc: string
    price_h: number
    price_d: number
    quantity: number
    code: number
    brandId?: number | null
    isActive?: boolean
    sizeId?: number | null
    image: string
    orderProduct?: orderProductUncheckedCreateNestedManyWithoutToolInput
    professions?: ProfessionUncheckedCreateNestedManyWithoutToolsInput
  }

  export type ToolsCreateOrConnectWithoutPowerInput = {
    where: ToolsWhereUniqueInput
    create: XOR<ToolsCreateWithoutPowerInput, ToolsUncheckedCreateWithoutPowerInput>
  }

  export type ToolsCreateManyPowerInputEnvelope = {
    data: ToolsCreateManyPowerInput | ToolsCreateManyPowerInput[]
    skipDuplicates?: boolean
  }

  export type ToolsUpsertWithWhereUniqueWithoutPowerInput = {
    where: ToolsWhereUniqueInput
    update: XOR<ToolsUpdateWithoutPowerInput, ToolsUncheckedUpdateWithoutPowerInput>
    create: XOR<ToolsCreateWithoutPowerInput, ToolsUncheckedCreateWithoutPowerInput>
  }

  export type ToolsUpdateWithWhereUniqueWithoutPowerInput = {
    where: ToolsWhereUniqueInput
    data: XOR<ToolsUpdateWithoutPowerInput, ToolsUncheckedUpdateWithoutPowerInput>
  }

  export type ToolsUpdateManyWithWhereWithoutPowerInput = {
    where: ToolsScalarWhereInput
    data: XOR<ToolsUpdateManyMutationInput, ToolsUncheckedUpdateManyWithoutPowerInput>
  }

  export type ToolsCreateWithoutSizeInput = {
    name: string
    desc: string
    price_h: number
    price_d: number
    quantity: number
    code: number
    isActive?: boolean
    image: string
    orderProduct?: orderProductCreateNestedManyWithoutToolInput
    professions?: ProfessionCreateNestedManyWithoutToolsInput
    brand?: BrandCreateNestedOneWithoutToolsInput
    power?: PowerCreateNestedOneWithoutToolsInput
  }

  export type ToolsUncheckedCreateWithoutSizeInput = {
    id?: number
    name: string
    desc: string
    price_h: number
    price_d: number
    quantity: number
    code: number
    brandId?: number | null
    isActive?: boolean
    powerId?: number | null
    image: string
    orderProduct?: orderProductUncheckedCreateNestedManyWithoutToolInput
    professions?: ProfessionUncheckedCreateNestedManyWithoutToolsInput
  }

  export type ToolsCreateOrConnectWithoutSizeInput = {
    where: ToolsWhereUniqueInput
    create: XOR<ToolsCreateWithoutSizeInput, ToolsUncheckedCreateWithoutSizeInput>
  }

  export type ToolsCreateManySizeInputEnvelope = {
    data: ToolsCreateManySizeInput | ToolsCreateManySizeInput[]
    skipDuplicates?: boolean
  }

  export type ToolsUpsertWithWhereUniqueWithoutSizeInput = {
    where: ToolsWhereUniqueInput
    update: XOR<ToolsUpdateWithoutSizeInput, ToolsUncheckedUpdateWithoutSizeInput>
    create: XOR<ToolsCreateWithoutSizeInput, ToolsUncheckedCreateWithoutSizeInput>
  }

  export type ToolsUpdateWithWhereUniqueWithoutSizeInput = {
    where: ToolsWhereUniqueInput
    data: XOR<ToolsUpdateWithoutSizeInput, ToolsUncheckedUpdateWithoutSizeInput>
  }

  export type ToolsUpdateManyWithWhereWithoutSizeInput = {
    where: ToolsScalarWhereInput
    data: XOR<ToolsUpdateManyMutationInput, ToolsUncheckedUpdateManyWithoutSizeInput>
  }

  export type masterProfessionsCreateWithoutMasterInput = {
    minWorking_h?: number | null
    price_h?: number | null
    price_d?: number | null
    experience: number
    level: LevelCreateNestedOneWithoutMasterProfessionInput
    profession: ProfessionCreateNestedOneWithoutMasterProfessionInput
  }

  export type masterProfessionsUncheckedCreateWithoutMasterInput = {
    id?: number
    minWorking_h?: number | null
    professionId: number
    levelId: number
    price_h?: number | null
    price_d?: number | null
    experience: number
  }

  export type masterProfessionsCreateOrConnectWithoutMasterInput = {
    where: masterProfessionsWhereUniqueInput
    create: XOR<masterProfessionsCreateWithoutMasterInput, masterProfessionsUncheckedCreateWithoutMasterInput>
  }

  export type masterProfessionsCreateManyMasterInputEnvelope = {
    data: masterProfessionsCreateManyMasterInput | masterProfessionsCreateManyMasterInput[]
    skipDuplicates?: boolean
  }

  export type masterProfessionsUpsertWithWhereUniqueWithoutMasterInput = {
    where: masterProfessionsWhereUniqueInput
    update: XOR<masterProfessionsUpdateWithoutMasterInput, masterProfessionsUncheckedUpdateWithoutMasterInput>
    create: XOR<masterProfessionsCreateWithoutMasterInput, masterProfessionsUncheckedCreateWithoutMasterInput>
  }

  export type masterProfessionsUpdateWithWhereUniqueWithoutMasterInput = {
    where: masterProfessionsWhereUniqueInput
    data: XOR<masterProfessionsUpdateWithoutMasterInput, masterProfessionsUncheckedUpdateWithoutMasterInput>
  }

  export type masterProfessionsUpdateManyWithWhereWithoutMasterInput = {
    where: masterProfessionsScalarWhereInput
    data: XOR<masterProfessionsUpdateManyMutationInput, masterProfessionsUncheckedUpdateManyWithoutMasterInput>
  }

  export type LevelCreateWithoutMasterProfessionInput = {
    name: string
    product?: orderProductCreateNestedManyWithoutLevelInput
    professionLevel?: professionLevelCreateNestedManyWithoutLevelInput
  }

  export type LevelUncheckedCreateWithoutMasterProfessionInput = {
    id?: number
    name: string
    product?: orderProductUncheckedCreateNestedManyWithoutLevelInput
    professionLevel?: professionLevelUncheckedCreateNestedManyWithoutLevelInput
  }

  export type LevelCreateOrConnectWithoutMasterProfessionInput = {
    where: LevelWhereUniqueInput
    create: XOR<LevelCreateWithoutMasterProfessionInput, LevelUncheckedCreateWithoutMasterProfessionInput>
  }

  export type ProfessionCreateWithoutMasterProfessionInput = {
    name: string
    image: string
    isActive: string
    orderProduct?: orderProductCreateNestedManyWithoutProfessionsInput
    professionLevel?: professionLevelCreateNestedManyWithoutProfessionInput
    tools?: ToolsCreateNestedManyWithoutProfessionsInput
  }

  export type ProfessionUncheckedCreateWithoutMasterProfessionInput = {
    id?: number
    name: string
    image: string
    isActive: string
    orderProduct?: orderProductUncheckedCreateNestedManyWithoutProfessionsInput
    professionLevel?: professionLevelUncheckedCreateNestedManyWithoutProfessionInput
    tools?: ToolsUncheckedCreateNestedManyWithoutProfessionsInput
  }

  export type ProfessionCreateOrConnectWithoutMasterProfessionInput = {
    where: ProfessionWhereUniqueInput
    create: XOR<ProfessionCreateWithoutMasterProfessionInput, ProfessionUncheckedCreateWithoutMasterProfessionInput>
  }

  export type MasterCreateWithoutMasterProfessionsInput = {
    fullname: string
    phone: string
    isActive?: boolean
    image?: string | null
    passportImage?: string | null
    star?: number | null
    about: string
  }

  export type MasterUncheckedCreateWithoutMasterProfessionsInput = {
    id?: number
    fullname: string
    phone: string
    isActive?: boolean
    image?: string | null
    passportImage?: string | null
    star?: number | null
    about: string
  }

  export type MasterCreateOrConnectWithoutMasterProfessionsInput = {
    where: MasterWhereUniqueInput
    create: XOR<MasterCreateWithoutMasterProfessionsInput, MasterUncheckedCreateWithoutMasterProfessionsInput>
  }

  export type LevelUpsertWithoutMasterProfessionInput = {
    update: XOR<LevelUpdateWithoutMasterProfessionInput, LevelUncheckedUpdateWithoutMasterProfessionInput>
    create: XOR<LevelCreateWithoutMasterProfessionInput, LevelUncheckedCreateWithoutMasterProfessionInput>
    where?: LevelWhereInput
  }

  export type LevelUpdateToOneWithWhereWithoutMasterProfessionInput = {
    where?: LevelWhereInput
    data: XOR<LevelUpdateWithoutMasterProfessionInput, LevelUncheckedUpdateWithoutMasterProfessionInput>
  }

  export type LevelUpdateWithoutMasterProfessionInput = {
    name?: StringFieldUpdateOperationsInput | string
    product?: orderProductUpdateManyWithoutLevelNestedInput
    professionLevel?: professionLevelUpdateManyWithoutLevelNestedInput
  }

  export type LevelUncheckedUpdateWithoutMasterProfessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    product?: orderProductUncheckedUpdateManyWithoutLevelNestedInput
    professionLevel?: professionLevelUncheckedUpdateManyWithoutLevelNestedInput
  }

  export type ProfessionUpsertWithoutMasterProfessionInput = {
    update: XOR<ProfessionUpdateWithoutMasterProfessionInput, ProfessionUncheckedUpdateWithoutMasterProfessionInput>
    create: XOR<ProfessionCreateWithoutMasterProfessionInput, ProfessionUncheckedCreateWithoutMasterProfessionInput>
    where?: ProfessionWhereInput
  }

  export type ProfessionUpdateToOneWithWhereWithoutMasterProfessionInput = {
    where?: ProfessionWhereInput
    data: XOR<ProfessionUpdateWithoutMasterProfessionInput, ProfessionUncheckedUpdateWithoutMasterProfessionInput>
  }

  export type ProfessionUpdateWithoutMasterProfessionInput = {
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: StringFieldUpdateOperationsInput | string
    orderProduct?: orderProductUpdateManyWithoutProfessionsNestedInput
    professionLevel?: professionLevelUpdateManyWithoutProfessionNestedInput
    tools?: ToolsUpdateManyWithoutProfessionsNestedInput
  }

  export type ProfessionUncheckedUpdateWithoutMasterProfessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: StringFieldUpdateOperationsInput | string
    orderProduct?: orderProductUncheckedUpdateManyWithoutProfessionsNestedInput
    professionLevel?: professionLevelUncheckedUpdateManyWithoutProfessionNestedInput
    tools?: ToolsUncheckedUpdateManyWithoutProfessionsNestedInput
  }

  export type MasterUpsertWithoutMasterProfessionsInput = {
    update: XOR<MasterUpdateWithoutMasterProfessionsInput, MasterUncheckedUpdateWithoutMasterProfessionsInput>
    create: XOR<MasterCreateWithoutMasterProfessionsInput, MasterUncheckedCreateWithoutMasterProfessionsInput>
    where?: MasterWhereInput
  }

  export type MasterUpdateToOneWithWhereWithoutMasterProfessionsInput = {
    where?: MasterWhereInput
    data: XOR<MasterUpdateWithoutMasterProfessionsInput, MasterUncheckedUpdateWithoutMasterProfessionsInput>
  }

  export type MasterUpdateWithoutMasterProfessionsInput = {
    fullname?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    passportImage?: NullableStringFieldUpdateOperationsInput | string | null
    star?: NullableFloatFieldUpdateOperationsInput | number | null
    about?: StringFieldUpdateOperationsInput | string
  }

  export type MasterUncheckedUpdateWithoutMasterProfessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullname?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    passportImage?: NullableStringFieldUpdateOperationsInput | string | null
    star?: NullableFloatFieldUpdateOperationsInput | number | null
    about?: StringFieldUpdateOperationsInput | string
  }

  export type ProfessionCreateWithoutProfessionLevelInput = {
    name: string
    image: string
    isActive: string
    orderProduct?: orderProductCreateNestedManyWithoutProfessionsInput
    masterProfession?: masterProfessionsCreateNestedManyWithoutProfessionInput
    tools?: ToolsCreateNestedManyWithoutProfessionsInput
  }

  export type ProfessionUncheckedCreateWithoutProfessionLevelInput = {
    id?: number
    name: string
    image: string
    isActive: string
    orderProduct?: orderProductUncheckedCreateNestedManyWithoutProfessionsInput
    masterProfession?: masterProfessionsUncheckedCreateNestedManyWithoutProfessionInput
    tools?: ToolsUncheckedCreateNestedManyWithoutProfessionsInput
  }

  export type ProfessionCreateOrConnectWithoutProfessionLevelInput = {
    where: ProfessionWhereUniqueInput
    create: XOR<ProfessionCreateWithoutProfessionLevelInput, ProfessionUncheckedCreateWithoutProfessionLevelInput>
  }

  export type LevelCreateWithoutProfessionLevelInput = {
    name: string
    product?: orderProductCreateNestedManyWithoutLevelInput
    masterProfession?: masterProfessionsCreateNestedManyWithoutLevelInput
  }

  export type LevelUncheckedCreateWithoutProfessionLevelInput = {
    id?: number
    name: string
    product?: orderProductUncheckedCreateNestedManyWithoutLevelInput
    masterProfession?: masterProfessionsUncheckedCreateNestedManyWithoutLevelInput
  }

  export type LevelCreateOrConnectWithoutProfessionLevelInput = {
    where: LevelWhereUniqueInput
    create: XOR<LevelCreateWithoutProfessionLevelInput, LevelUncheckedCreateWithoutProfessionLevelInput>
  }

  export type ProfessionUpsertWithoutProfessionLevelInput = {
    update: XOR<ProfessionUpdateWithoutProfessionLevelInput, ProfessionUncheckedUpdateWithoutProfessionLevelInput>
    create: XOR<ProfessionCreateWithoutProfessionLevelInput, ProfessionUncheckedCreateWithoutProfessionLevelInput>
    where?: ProfessionWhereInput
  }

  export type ProfessionUpdateToOneWithWhereWithoutProfessionLevelInput = {
    where?: ProfessionWhereInput
    data: XOR<ProfessionUpdateWithoutProfessionLevelInput, ProfessionUncheckedUpdateWithoutProfessionLevelInput>
  }

  export type ProfessionUpdateWithoutProfessionLevelInput = {
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: StringFieldUpdateOperationsInput | string
    orderProduct?: orderProductUpdateManyWithoutProfessionsNestedInput
    masterProfession?: masterProfessionsUpdateManyWithoutProfessionNestedInput
    tools?: ToolsUpdateManyWithoutProfessionsNestedInput
  }

  export type ProfessionUncheckedUpdateWithoutProfessionLevelInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: StringFieldUpdateOperationsInput | string
    orderProduct?: orderProductUncheckedUpdateManyWithoutProfessionsNestedInput
    masterProfession?: masterProfessionsUncheckedUpdateManyWithoutProfessionNestedInput
    tools?: ToolsUncheckedUpdateManyWithoutProfessionsNestedInput
  }

  export type LevelUpsertWithoutProfessionLevelInput = {
    update: XOR<LevelUpdateWithoutProfessionLevelInput, LevelUncheckedUpdateWithoutProfessionLevelInput>
    create: XOR<LevelCreateWithoutProfessionLevelInput, LevelUncheckedCreateWithoutProfessionLevelInput>
    where?: LevelWhereInput
  }

  export type LevelUpdateToOneWithWhereWithoutProfessionLevelInput = {
    where?: LevelWhereInput
    data: XOR<LevelUpdateWithoutProfessionLevelInput, LevelUncheckedUpdateWithoutProfessionLevelInput>
  }

  export type LevelUpdateWithoutProfessionLevelInput = {
    name?: StringFieldUpdateOperationsInput | string
    product?: orderProductUpdateManyWithoutLevelNestedInput
    masterProfession?: masterProfessionsUpdateManyWithoutLevelNestedInput
  }

  export type LevelUncheckedUpdateWithoutProfessionLevelInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    product?: orderProductUncheckedUpdateManyWithoutLevelNestedInput
    masterProfession?: masterProfessionsUncheckedUpdateManyWithoutLevelNestedInput
  }

  export type orderProductCreateWithoutProfessionsInput = {
    isActive: string
    timeUnit: string
    workingTime: number
    price: number
    count: number
    order: OrderCreateNestedOneWithoutOrderProductInput
    tool?: ToolsCreateNestedOneWithoutOrderProductInput
    level?: LevelCreateNestedOneWithoutProductInput
  }

  export type orderProductUncheckedCreateWithoutProfessionsInput = {
    id?: number
    isActive: string
    timeUnit: string
    workingTime: number
    price: number
    count: number
    toolId?: number | null
    levelId?: number | null
    orderId: number
  }

  export type orderProductCreateOrConnectWithoutProfessionsInput = {
    where: orderProductWhereUniqueInput
    create: XOR<orderProductCreateWithoutProfessionsInput, orderProductUncheckedCreateWithoutProfessionsInput>
  }

  export type orderProductCreateManyProfessionsInputEnvelope = {
    data: orderProductCreateManyProfessionsInput | orderProductCreateManyProfessionsInput[]
    skipDuplicates?: boolean
  }

  export type masterProfessionsCreateWithoutProfessionInput = {
    minWorking_h?: number | null
    price_h?: number | null
    price_d?: number | null
    experience: number
    level: LevelCreateNestedOneWithoutMasterProfessionInput
    master: MasterCreateNestedOneWithoutMasterProfessionsInput
  }

  export type masterProfessionsUncheckedCreateWithoutProfessionInput = {
    id?: number
    minWorking_h?: number | null
    levelId: number
    price_h?: number | null
    price_d?: number | null
    experience: number
    masterId: number
  }

  export type masterProfessionsCreateOrConnectWithoutProfessionInput = {
    where: masterProfessionsWhereUniqueInput
    create: XOR<masterProfessionsCreateWithoutProfessionInput, masterProfessionsUncheckedCreateWithoutProfessionInput>
  }

  export type masterProfessionsCreateManyProfessionInputEnvelope = {
    data: masterProfessionsCreateManyProfessionInput | masterProfessionsCreateManyProfessionInput[]
    skipDuplicates?: boolean
  }

  export type professionLevelCreateWithoutProfessionInput = {
    minWorking_h: number
    price_h: number
    price_d: number
    level: LevelCreateNestedOneWithoutProfessionLevelInput
  }

  export type professionLevelUncheckedCreateWithoutProfessionInput = {
    id?: number
    levelId: number
    minWorking_h: number
    price_h: number
    price_d: number
  }

  export type professionLevelCreateOrConnectWithoutProfessionInput = {
    where: professionLevelWhereUniqueInput
    create: XOR<professionLevelCreateWithoutProfessionInput, professionLevelUncheckedCreateWithoutProfessionInput>
  }

  export type professionLevelCreateManyProfessionInputEnvelope = {
    data: professionLevelCreateManyProfessionInput | professionLevelCreateManyProfessionInput[]
    skipDuplicates?: boolean
  }

  export type ToolsCreateWithoutProfessionsInput = {
    name: string
    desc: string
    price_h: number
    price_d: number
    quantity: number
    code: number
    isActive?: boolean
    image: string
    orderProduct?: orderProductCreateNestedManyWithoutToolInput
    brand?: BrandCreateNestedOneWithoutToolsInput
    power?: PowerCreateNestedOneWithoutToolsInput
    size?: SizeCreateNestedOneWithoutToolsInput
  }

  export type ToolsUncheckedCreateWithoutProfessionsInput = {
    id?: number
    name: string
    desc: string
    price_h: number
    price_d: number
    quantity: number
    code: number
    brandId?: number | null
    isActive?: boolean
    powerId?: number | null
    sizeId?: number | null
    image: string
    orderProduct?: orderProductUncheckedCreateNestedManyWithoutToolInput
  }

  export type ToolsCreateOrConnectWithoutProfessionsInput = {
    where: ToolsWhereUniqueInput
    create: XOR<ToolsCreateWithoutProfessionsInput, ToolsUncheckedCreateWithoutProfessionsInput>
  }

  export type orderProductUpsertWithWhereUniqueWithoutProfessionsInput = {
    where: orderProductWhereUniqueInput
    update: XOR<orderProductUpdateWithoutProfessionsInput, orderProductUncheckedUpdateWithoutProfessionsInput>
    create: XOR<orderProductCreateWithoutProfessionsInput, orderProductUncheckedCreateWithoutProfessionsInput>
  }

  export type orderProductUpdateWithWhereUniqueWithoutProfessionsInput = {
    where: orderProductWhereUniqueInput
    data: XOR<orderProductUpdateWithoutProfessionsInput, orderProductUncheckedUpdateWithoutProfessionsInput>
  }

  export type orderProductUpdateManyWithWhereWithoutProfessionsInput = {
    where: orderProductScalarWhereInput
    data: XOR<orderProductUpdateManyMutationInput, orderProductUncheckedUpdateManyWithoutProfessionsInput>
  }

  export type masterProfessionsUpsertWithWhereUniqueWithoutProfessionInput = {
    where: masterProfessionsWhereUniqueInput
    update: XOR<masterProfessionsUpdateWithoutProfessionInput, masterProfessionsUncheckedUpdateWithoutProfessionInput>
    create: XOR<masterProfessionsCreateWithoutProfessionInput, masterProfessionsUncheckedCreateWithoutProfessionInput>
  }

  export type masterProfessionsUpdateWithWhereUniqueWithoutProfessionInput = {
    where: masterProfessionsWhereUniqueInput
    data: XOR<masterProfessionsUpdateWithoutProfessionInput, masterProfessionsUncheckedUpdateWithoutProfessionInput>
  }

  export type masterProfessionsUpdateManyWithWhereWithoutProfessionInput = {
    where: masterProfessionsScalarWhereInput
    data: XOR<masterProfessionsUpdateManyMutationInput, masterProfessionsUncheckedUpdateManyWithoutProfessionInput>
  }

  export type professionLevelUpsertWithWhereUniqueWithoutProfessionInput = {
    where: professionLevelWhereUniqueInput
    update: XOR<professionLevelUpdateWithoutProfessionInput, professionLevelUncheckedUpdateWithoutProfessionInput>
    create: XOR<professionLevelCreateWithoutProfessionInput, professionLevelUncheckedCreateWithoutProfessionInput>
  }

  export type professionLevelUpdateWithWhereUniqueWithoutProfessionInput = {
    where: professionLevelWhereUniqueInput
    data: XOR<professionLevelUpdateWithoutProfessionInput, professionLevelUncheckedUpdateWithoutProfessionInput>
  }

  export type professionLevelUpdateManyWithWhereWithoutProfessionInput = {
    where: professionLevelScalarWhereInput
    data: XOR<professionLevelUpdateManyMutationInput, professionLevelUncheckedUpdateManyWithoutProfessionInput>
  }

  export type ToolsUpsertWithWhereUniqueWithoutProfessionsInput = {
    where: ToolsWhereUniqueInput
    update: XOR<ToolsUpdateWithoutProfessionsInput, ToolsUncheckedUpdateWithoutProfessionsInput>
    create: XOR<ToolsCreateWithoutProfessionsInput, ToolsUncheckedCreateWithoutProfessionsInput>
  }

  export type ToolsUpdateWithWhereUniqueWithoutProfessionsInput = {
    where: ToolsWhereUniqueInput
    data: XOR<ToolsUpdateWithoutProfessionsInput, ToolsUncheckedUpdateWithoutProfessionsInput>
  }

  export type ToolsUpdateManyWithWhereWithoutProfessionsInput = {
    where: ToolsScalarWhereInput
    data: XOR<ToolsUpdateManyMutationInput, ToolsUncheckedUpdateManyWithoutProfessionsInput>
  }

  export type orderProductCreateWithoutToolInput = {
    isActive: string
    timeUnit: string
    workingTime: number
    price: number
    count: number
    order: OrderCreateNestedOneWithoutOrderProductInput
    level?: LevelCreateNestedOneWithoutProductInput
    professions?: ProfessionCreateNestedOneWithoutOrderProductInput
  }

  export type orderProductUncheckedCreateWithoutToolInput = {
    id?: number
    isActive: string
    timeUnit: string
    workingTime: number
    price: number
    count: number
    levelId?: number | null
    orderId: number
    professionId?: number | null
  }

  export type orderProductCreateOrConnectWithoutToolInput = {
    where: orderProductWhereUniqueInput
    create: XOR<orderProductCreateWithoutToolInput, orderProductUncheckedCreateWithoutToolInput>
  }

  export type orderProductCreateManyToolInputEnvelope = {
    data: orderProductCreateManyToolInput | orderProductCreateManyToolInput[]
    skipDuplicates?: boolean
  }

  export type ProfessionCreateWithoutToolsInput = {
    name: string
    image: string
    isActive: string
    orderProduct?: orderProductCreateNestedManyWithoutProfessionsInput
    masterProfession?: masterProfessionsCreateNestedManyWithoutProfessionInput
    professionLevel?: professionLevelCreateNestedManyWithoutProfessionInput
  }

  export type ProfessionUncheckedCreateWithoutToolsInput = {
    id?: number
    name: string
    image: string
    isActive: string
    orderProduct?: orderProductUncheckedCreateNestedManyWithoutProfessionsInput
    masterProfession?: masterProfessionsUncheckedCreateNestedManyWithoutProfessionInput
    professionLevel?: professionLevelUncheckedCreateNestedManyWithoutProfessionInput
  }

  export type ProfessionCreateOrConnectWithoutToolsInput = {
    where: ProfessionWhereUniqueInput
    create: XOR<ProfessionCreateWithoutToolsInput, ProfessionUncheckedCreateWithoutToolsInput>
  }

  export type BrandCreateWithoutToolsInput = {
    name: string
  }

  export type BrandUncheckedCreateWithoutToolsInput = {
    id?: number
    name: string
  }

  export type BrandCreateOrConnectWithoutToolsInput = {
    where: BrandWhereUniqueInput
    create: XOR<BrandCreateWithoutToolsInput, BrandUncheckedCreateWithoutToolsInput>
  }

  export type PowerCreateWithoutToolsInput = {
    name: string
  }

  export type PowerUncheckedCreateWithoutToolsInput = {
    id?: number
    name: string
  }

  export type PowerCreateOrConnectWithoutToolsInput = {
    where: PowerWhereUniqueInput
    create: XOR<PowerCreateWithoutToolsInput, PowerUncheckedCreateWithoutToolsInput>
  }

  export type SizeCreateWithoutToolsInput = {
    name: string
  }

  export type SizeUncheckedCreateWithoutToolsInput = {
    id?: number
    name: string
  }

  export type SizeCreateOrConnectWithoutToolsInput = {
    where: SizeWhereUniqueInput
    create: XOR<SizeCreateWithoutToolsInput, SizeUncheckedCreateWithoutToolsInput>
  }

  export type orderProductUpsertWithWhereUniqueWithoutToolInput = {
    where: orderProductWhereUniqueInput
    update: XOR<orderProductUpdateWithoutToolInput, orderProductUncheckedUpdateWithoutToolInput>
    create: XOR<orderProductCreateWithoutToolInput, orderProductUncheckedCreateWithoutToolInput>
  }

  export type orderProductUpdateWithWhereUniqueWithoutToolInput = {
    where: orderProductWhereUniqueInput
    data: XOR<orderProductUpdateWithoutToolInput, orderProductUncheckedUpdateWithoutToolInput>
  }

  export type orderProductUpdateManyWithWhereWithoutToolInput = {
    where: orderProductScalarWhereInput
    data: XOR<orderProductUpdateManyMutationInput, orderProductUncheckedUpdateManyWithoutToolInput>
  }

  export type ProfessionUpsertWithWhereUniqueWithoutToolsInput = {
    where: ProfessionWhereUniqueInput
    update: XOR<ProfessionUpdateWithoutToolsInput, ProfessionUncheckedUpdateWithoutToolsInput>
    create: XOR<ProfessionCreateWithoutToolsInput, ProfessionUncheckedCreateWithoutToolsInput>
  }

  export type ProfessionUpdateWithWhereUniqueWithoutToolsInput = {
    where: ProfessionWhereUniqueInput
    data: XOR<ProfessionUpdateWithoutToolsInput, ProfessionUncheckedUpdateWithoutToolsInput>
  }

  export type ProfessionUpdateManyWithWhereWithoutToolsInput = {
    where: ProfessionScalarWhereInput
    data: XOR<ProfessionUpdateManyMutationInput, ProfessionUncheckedUpdateManyWithoutToolsInput>
  }

  export type ProfessionScalarWhereInput = {
    AND?: ProfessionScalarWhereInput | ProfessionScalarWhereInput[]
    OR?: ProfessionScalarWhereInput[]
    NOT?: ProfessionScalarWhereInput | ProfessionScalarWhereInput[]
    id?: IntFilter<"Profession"> | number
    name?: StringFilter<"Profession"> | string
    image?: StringFilter<"Profession"> | string
    isActive?: StringFilter<"Profession"> | string
  }

  export type BrandUpsertWithoutToolsInput = {
    update: XOR<BrandUpdateWithoutToolsInput, BrandUncheckedUpdateWithoutToolsInput>
    create: XOR<BrandCreateWithoutToolsInput, BrandUncheckedCreateWithoutToolsInput>
    where?: BrandWhereInput
  }

  export type BrandUpdateToOneWithWhereWithoutToolsInput = {
    where?: BrandWhereInput
    data: XOR<BrandUpdateWithoutToolsInput, BrandUncheckedUpdateWithoutToolsInput>
  }

  export type BrandUpdateWithoutToolsInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type BrandUncheckedUpdateWithoutToolsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PowerUpsertWithoutToolsInput = {
    update: XOR<PowerUpdateWithoutToolsInput, PowerUncheckedUpdateWithoutToolsInput>
    create: XOR<PowerCreateWithoutToolsInput, PowerUncheckedCreateWithoutToolsInput>
    where?: PowerWhereInput
  }

  export type PowerUpdateToOneWithWhereWithoutToolsInput = {
    where?: PowerWhereInput
    data: XOR<PowerUpdateWithoutToolsInput, PowerUncheckedUpdateWithoutToolsInput>
  }

  export type PowerUpdateWithoutToolsInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PowerUncheckedUpdateWithoutToolsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SizeUpsertWithoutToolsInput = {
    update: XOR<SizeUpdateWithoutToolsInput, SizeUncheckedUpdateWithoutToolsInput>
    create: XOR<SizeCreateWithoutToolsInput, SizeUncheckedCreateWithoutToolsInput>
    where?: SizeWhereInput
  }

  export type SizeUpdateToOneWithWhereWithoutToolsInput = {
    where?: SizeWhereInput
    data: XOR<SizeUpdateWithoutToolsInput, SizeUncheckedUpdateWithoutToolsInput>
  }

  export type SizeUpdateWithoutToolsInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SizeUncheckedUpdateWithoutToolsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type orderProductCreateWithoutOrderInput = {
    isActive: string
    timeUnit: string
    workingTime: number
    price: number
    count: number
    tool?: ToolsCreateNestedOneWithoutOrderProductInput
    level?: LevelCreateNestedOneWithoutProductInput
    professions?: ProfessionCreateNestedOneWithoutOrderProductInput
  }

  export type orderProductUncheckedCreateWithoutOrderInput = {
    id?: number
    isActive: string
    timeUnit: string
    workingTime: number
    price: number
    count: number
    toolId?: number | null
    levelId?: number | null
    professionId?: number | null
  }

  export type orderProductCreateOrConnectWithoutOrderInput = {
    where: orderProductWhereUniqueInput
    create: XOR<orderProductCreateWithoutOrderInput, orderProductUncheckedCreateWithoutOrderInput>
  }

  export type orderProductCreateManyOrderInputEnvelope = {
    data: orderProductCreateManyOrderInput | orderProductCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutOrdersInput = {
    name: string
    phone: string
    password: string
    status?: string
    role: string
    stir?: number | null
    mfo?: number | null
    hr?: number | null
    bank?: string | null
    oked?: number | null
    manzil?: string | null
    region: RegionCreateNestedOneWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOrdersInput = {
    id?: number
    name: string
    phone: string
    password: string
    status?: string
    role: string
    regionId: number
    stir?: number | null
    mfo?: number | null
    hr?: number | null
    bank?: string | null
    oked?: number | null
    manzil?: string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOrdersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
  }

  export type orderProductUpsertWithWhereUniqueWithoutOrderInput = {
    where: orderProductWhereUniqueInput
    update: XOR<orderProductUpdateWithoutOrderInput, orderProductUncheckedUpdateWithoutOrderInput>
    create: XOR<orderProductCreateWithoutOrderInput, orderProductUncheckedCreateWithoutOrderInput>
  }

  export type orderProductUpdateWithWhereUniqueWithoutOrderInput = {
    where: orderProductWhereUniqueInput
    data: XOR<orderProductUpdateWithoutOrderInput, orderProductUncheckedUpdateWithoutOrderInput>
  }

  export type orderProductUpdateManyWithWhereWithoutOrderInput = {
    where: orderProductScalarWhereInput
    data: XOR<orderProductUpdateManyMutationInput, orderProductUncheckedUpdateManyWithoutOrderInput>
  }

  export type UserUpsertWithoutOrdersInput = {
    update: XOR<UserUpdateWithoutOrdersInput, UserUncheckedUpdateWithoutOrdersInput>
    create: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOrdersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOrdersInput, UserUncheckedUpdateWithoutOrdersInput>
  }

  export type UserUpdateWithoutOrdersInput = {
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    stir?: NullableIntFieldUpdateOperationsInput | number | null
    mfo?: NullableIntFieldUpdateOperationsInput | number | null
    hr?: NullableIntFieldUpdateOperationsInput | number | null
    bank?: NullableStringFieldUpdateOperationsInput | string | null
    oked?: NullableIntFieldUpdateOperationsInput | number | null
    manzil?: NullableStringFieldUpdateOperationsInput | string | null
    region?: RegionUpdateOneRequiredWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    regionId?: IntFieldUpdateOperationsInput | number
    stir?: NullableIntFieldUpdateOperationsInput | number | null
    mfo?: NullableIntFieldUpdateOperationsInput | number | null
    hr?: NullableIntFieldUpdateOperationsInput | number | null
    bank?: NullableStringFieldUpdateOperationsInput | string | null
    oked?: NullableIntFieldUpdateOperationsInput | number | null
    manzil?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type OrderCreateWithoutOrderProductInput = {
    total: number
    location: string
    address: string
    date?: Date | string
    pay_type: string
    withDelivery: boolean
    status: string
    instruction: string
    user: UserCreateNestedOneWithoutOrdersInput
  }

  export type OrderUncheckedCreateWithoutOrderProductInput = {
    id?: number
    total: number
    location: string
    address: string
    date?: Date | string
    pay_type: string
    withDelivery: boolean
    status: string
    instruction: string
    userId: number
  }

  export type OrderCreateOrConnectWithoutOrderProductInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutOrderProductInput, OrderUncheckedCreateWithoutOrderProductInput>
  }

  export type ToolsCreateWithoutOrderProductInput = {
    name: string
    desc: string
    price_h: number
    price_d: number
    quantity: number
    code: number
    isActive?: boolean
    image: string
    professions?: ProfessionCreateNestedManyWithoutToolsInput
    brand?: BrandCreateNestedOneWithoutToolsInput
    power?: PowerCreateNestedOneWithoutToolsInput
    size?: SizeCreateNestedOneWithoutToolsInput
  }

  export type ToolsUncheckedCreateWithoutOrderProductInput = {
    id?: number
    name: string
    desc: string
    price_h: number
    price_d: number
    quantity: number
    code: number
    brandId?: number | null
    isActive?: boolean
    powerId?: number | null
    sizeId?: number | null
    image: string
    professions?: ProfessionUncheckedCreateNestedManyWithoutToolsInput
  }

  export type ToolsCreateOrConnectWithoutOrderProductInput = {
    where: ToolsWhereUniqueInput
    create: XOR<ToolsCreateWithoutOrderProductInput, ToolsUncheckedCreateWithoutOrderProductInput>
  }

  export type LevelCreateWithoutProductInput = {
    name: string
    professionLevel?: professionLevelCreateNestedManyWithoutLevelInput
    masterProfession?: masterProfessionsCreateNestedManyWithoutLevelInput
  }

  export type LevelUncheckedCreateWithoutProductInput = {
    id?: number
    name: string
    professionLevel?: professionLevelUncheckedCreateNestedManyWithoutLevelInput
    masterProfession?: masterProfessionsUncheckedCreateNestedManyWithoutLevelInput
  }

  export type LevelCreateOrConnectWithoutProductInput = {
    where: LevelWhereUniqueInput
    create: XOR<LevelCreateWithoutProductInput, LevelUncheckedCreateWithoutProductInput>
  }

  export type ProfessionCreateWithoutOrderProductInput = {
    name: string
    image: string
    isActive: string
    masterProfession?: masterProfessionsCreateNestedManyWithoutProfessionInput
    professionLevel?: professionLevelCreateNestedManyWithoutProfessionInput
    tools?: ToolsCreateNestedManyWithoutProfessionsInput
  }

  export type ProfessionUncheckedCreateWithoutOrderProductInput = {
    id?: number
    name: string
    image: string
    isActive: string
    masterProfession?: masterProfessionsUncheckedCreateNestedManyWithoutProfessionInput
    professionLevel?: professionLevelUncheckedCreateNestedManyWithoutProfessionInput
    tools?: ToolsUncheckedCreateNestedManyWithoutProfessionsInput
  }

  export type ProfessionCreateOrConnectWithoutOrderProductInput = {
    where: ProfessionWhereUniqueInput
    create: XOR<ProfessionCreateWithoutOrderProductInput, ProfessionUncheckedCreateWithoutOrderProductInput>
  }

  export type OrderUpsertWithoutOrderProductInput = {
    update: XOR<OrderUpdateWithoutOrderProductInput, OrderUncheckedUpdateWithoutOrderProductInput>
    create: XOR<OrderCreateWithoutOrderProductInput, OrderUncheckedCreateWithoutOrderProductInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutOrderProductInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutOrderProductInput, OrderUncheckedUpdateWithoutOrderProductInput>
  }

  export type OrderUpdateWithoutOrderProductInput = {
    total?: FloatFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    pay_type?: StringFieldUpdateOperationsInput | string
    withDelivery?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    instruction?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type OrderUncheckedUpdateWithoutOrderProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    pay_type?: StringFieldUpdateOperationsInput | string
    withDelivery?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    instruction?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type ToolsUpsertWithoutOrderProductInput = {
    update: XOR<ToolsUpdateWithoutOrderProductInput, ToolsUncheckedUpdateWithoutOrderProductInput>
    create: XOR<ToolsCreateWithoutOrderProductInput, ToolsUncheckedCreateWithoutOrderProductInput>
    where?: ToolsWhereInput
  }

  export type ToolsUpdateToOneWithWhereWithoutOrderProductInput = {
    where?: ToolsWhereInput
    data: XOR<ToolsUpdateWithoutOrderProductInput, ToolsUncheckedUpdateWithoutOrderProductInput>
  }

  export type ToolsUpdateWithoutOrderProductInput = {
    name?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    price_h?: FloatFieldUpdateOperationsInput | number
    price_d?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    image?: StringFieldUpdateOperationsInput | string
    professions?: ProfessionUpdateManyWithoutToolsNestedInput
    brand?: BrandUpdateOneWithoutToolsNestedInput
    power?: PowerUpdateOneWithoutToolsNestedInput
    size?: SizeUpdateOneWithoutToolsNestedInput
  }

  export type ToolsUncheckedUpdateWithoutOrderProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    price_h?: FloatFieldUpdateOperationsInput | number
    price_d?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: IntFieldUpdateOperationsInput | number
    brandId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    powerId?: NullableIntFieldUpdateOperationsInput | number | null
    sizeId?: NullableIntFieldUpdateOperationsInput | number | null
    image?: StringFieldUpdateOperationsInput | string
    professions?: ProfessionUncheckedUpdateManyWithoutToolsNestedInput
  }

  export type LevelUpsertWithoutProductInput = {
    update: XOR<LevelUpdateWithoutProductInput, LevelUncheckedUpdateWithoutProductInput>
    create: XOR<LevelCreateWithoutProductInput, LevelUncheckedCreateWithoutProductInput>
    where?: LevelWhereInput
  }

  export type LevelUpdateToOneWithWhereWithoutProductInput = {
    where?: LevelWhereInput
    data: XOR<LevelUpdateWithoutProductInput, LevelUncheckedUpdateWithoutProductInput>
  }

  export type LevelUpdateWithoutProductInput = {
    name?: StringFieldUpdateOperationsInput | string
    professionLevel?: professionLevelUpdateManyWithoutLevelNestedInput
    masterProfession?: masterProfessionsUpdateManyWithoutLevelNestedInput
  }

  export type LevelUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    professionLevel?: professionLevelUncheckedUpdateManyWithoutLevelNestedInput
    masterProfession?: masterProfessionsUncheckedUpdateManyWithoutLevelNestedInput
  }

  export type ProfessionUpsertWithoutOrderProductInput = {
    update: XOR<ProfessionUpdateWithoutOrderProductInput, ProfessionUncheckedUpdateWithoutOrderProductInput>
    create: XOR<ProfessionCreateWithoutOrderProductInput, ProfessionUncheckedCreateWithoutOrderProductInput>
    where?: ProfessionWhereInput
  }

  export type ProfessionUpdateToOneWithWhereWithoutOrderProductInput = {
    where?: ProfessionWhereInput
    data: XOR<ProfessionUpdateWithoutOrderProductInput, ProfessionUncheckedUpdateWithoutOrderProductInput>
  }

  export type ProfessionUpdateWithoutOrderProductInput = {
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: StringFieldUpdateOperationsInput | string
    masterProfession?: masterProfessionsUpdateManyWithoutProfessionNestedInput
    professionLevel?: professionLevelUpdateManyWithoutProfessionNestedInput
    tools?: ToolsUpdateManyWithoutProfessionsNestedInput
  }

  export type ProfessionUncheckedUpdateWithoutOrderProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: StringFieldUpdateOperationsInput | string
    masterProfession?: masterProfessionsUncheckedUpdateManyWithoutProfessionNestedInput
    professionLevel?: professionLevelUncheckedUpdateManyWithoutProfessionNestedInput
    tools?: ToolsUncheckedUpdateManyWithoutProfessionsNestedInput
  }

  export type SessionCreateManyUserInput = {
    id?: number
    ip: string
    date?: Date | string
  }

  export type OrderCreateManyUserInput = {
    id?: number
    total: number
    location: string
    address: string
    date?: Date | string
    pay_type: string
    withDelivery: boolean
    status: string
    instruction: string
  }

  export type SessionUpdateWithoutUserInput = {
    ip?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    ip?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    ip?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderUpdateWithoutUserInput = {
    total?: FloatFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    pay_type?: StringFieldUpdateOperationsInput | string
    withDelivery?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    instruction?: StringFieldUpdateOperationsInput | string
    orderProduct?: orderProductUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    pay_type?: StringFieldUpdateOperationsInput | string
    withDelivery?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    instruction?: StringFieldUpdateOperationsInput | string
    orderProduct?: orderProductUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    pay_type?: StringFieldUpdateOperationsInput | string
    withDelivery?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    instruction?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateManyRegionInput = {
    id?: number
    name: string
    phone: string
    password: string
    status?: string
    role: string
    stir?: number | null
    mfo?: number | null
    hr?: number | null
    bank?: string | null
    oked?: number | null
    manzil?: string | null
  }

  export type UserUpdateWithoutRegionInput = {
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    stir?: NullableIntFieldUpdateOperationsInput | number | null
    mfo?: NullableIntFieldUpdateOperationsInput | number | null
    hr?: NullableIntFieldUpdateOperationsInput | number | null
    bank?: NullableStringFieldUpdateOperationsInput | string | null
    oked?: NullableIntFieldUpdateOperationsInput | number | null
    manzil?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUpdateManyWithoutUserNestedInput
    orders?: OrderUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRegionInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    stir?: NullableIntFieldUpdateOperationsInput | number | null
    mfo?: NullableIntFieldUpdateOperationsInput | number | null
    hr?: NullableIntFieldUpdateOperationsInput | number | null
    bank?: NullableStringFieldUpdateOperationsInput | string | null
    oked?: NullableIntFieldUpdateOperationsInput | number | null
    manzil?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutRegionInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    stir?: NullableIntFieldUpdateOperationsInput | number | null
    mfo?: NullableIntFieldUpdateOperationsInput | number | null
    hr?: NullableIntFieldUpdateOperationsInput | number | null
    bank?: NullableStringFieldUpdateOperationsInput | string | null
    oked?: NullableIntFieldUpdateOperationsInput | number | null
    manzil?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type orderProductCreateManyLevelInput = {
    id?: number
    isActive: string
    timeUnit: string
    workingTime: number
    price: number
    count: number
    toolId?: number | null
    orderId: number
    professionId?: number | null
  }

  export type professionLevelCreateManyLevelInput = {
    id?: number
    professionId: number
    minWorking_h: number
    price_h: number
    price_d: number
  }

  export type masterProfessionsCreateManyLevelInput = {
    id?: number
    minWorking_h?: number | null
    professionId: number
    price_h?: number | null
    price_d?: number | null
    experience: number
    masterId: number
  }

  export type orderProductUpdateWithoutLevelInput = {
    isActive?: StringFieldUpdateOperationsInput | string
    timeUnit?: StringFieldUpdateOperationsInput | string
    workingTime?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    order?: OrderUpdateOneRequiredWithoutOrderProductNestedInput
    tool?: ToolsUpdateOneWithoutOrderProductNestedInput
    professions?: ProfessionUpdateOneWithoutOrderProductNestedInput
  }

  export type orderProductUncheckedUpdateWithoutLevelInput = {
    id?: IntFieldUpdateOperationsInput | number
    isActive?: StringFieldUpdateOperationsInput | string
    timeUnit?: StringFieldUpdateOperationsInput | string
    workingTime?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    toolId?: NullableIntFieldUpdateOperationsInput | number | null
    orderId?: IntFieldUpdateOperationsInput | number
    professionId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type orderProductUncheckedUpdateManyWithoutLevelInput = {
    id?: IntFieldUpdateOperationsInput | number
    isActive?: StringFieldUpdateOperationsInput | string
    timeUnit?: StringFieldUpdateOperationsInput | string
    workingTime?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    toolId?: NullableIntFieldUpdateOperationsInput | number | null
    orderId?: IntFieldUpdateOperationsInput | number
    professionId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type professionLevelUpdateWithoutLevelInput = {
    minWorking_h?: IntFieldUpdateOperationsInput | number
    price_h?: IntFieldUpdateOperationsInput | number
    price_d?: IntFieldUpdateOperationsInput | number
    profession?: ProfessionUpdateOneRequiredWithoutProfessionLevelNestedInput
  }

  export type professionLevelUncheckedUpdateWithoutLevelInput = {
    id?: IntFieldUpdateOperationsInput | number
    professionId?: IntFieldUpdateOperationsInput | number
    minWorking_h?: IntFieldUpdateOperationsInput | number
    price_h?: IntFieldUpdateOperationsInput | number
    price_d?: IntFieldUpdateOperationsInput | number
  }

  export type professionLevelUncheckedUpdateManyWithoutLevelInput = {
    id?: IntFieldUpdateOperationsInput | number
    professionId?: IntFieldUpdateOperationsInput | number
    minWorking_h?: IntFieldUpdateOperationsInput | number
    price_h?: IntFieldUpdateOperationsInput | number
    price_d?: IntFieldUpdateOperationsInput | number
  }

  export type masterProfessionsUpdateWithoutLevelInput = {
    minWorking_h?: NullableIntFieldUpdateOperationsInput | number | null
    price_h?: NullableFloatFieldUpdateOperationsInput | number | null
    price_d?: NullableFloatFieldUpdateOperationsInput | number | null
    experience?: IntFieldUpdateOperationsInput | number
    profession?: ProfessionUpdateOneRequiredWithoutMasterProfessionNestedInput
    master?: MasterUpdateOneRequiredWithoutMasterProfessionsNestedInput
  }

  export type masterProfessionsUncheckedUpdateWithoutLevelInput = {
    id?: IntFieldUpdateOperationsInput | number
    minWorking_h?: NullableIntFieldUpdateOperationsInput | number | null
    professionId?: IntFieldUpdateOperationsInput | number
    price_h?: NullableFloatFieldUpdateOperationsInput | number | null
    price_d?: NullableFloatFieldUpdateOperationsInput | number | null
    experience?: IntFieldUpdateOperationsInput | number
    masterId?: IntFieldUpdateOperationsInput | number
  }

  export type masterProfessionsUncheckedUpdateManyWithoutLevelInput = {
    id?: IntFieldUpdateOperationsInput | number
    minWorking_h?: NullableIntFieldUpdateOperationsInput | number | null
    professionId?: IntFieldUpdateOperationsInput | number
    price_h?: NullableFloatFieldUpdateOperationsInput | number | null
    price_d?: NullableFloatFieldUpdateOperationsInput | number | null
    experience?: IntFieldUpdateOperationsInput | number
    masterId?: IntFieldUpdateOperationsInput | number
  }

  export type ToolsCreateManyBrandInput = {
    id?: number
    name: string
    desc: string
    price_h: number
    price_d: number
    quantity: number
    code: number
    isActive?: boolean
    powerId?: number | null
    sizeId?: number | null
    image: string
  }

  export type ToolsUpdateWithoutBrandInput = {
    name?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    price_h?: FloatFieldUpdateOperationsInput | number
    price_d?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    image?: StringFieldUpdateOperationsInput | string
    orderProduct?: orderProductUpdateManyWithoutToolNestedInput
    professions?: ProfessionUpdateManyWithoutToolsNestedInput
    power?: PowerUpdateOneWithoutToolsNestedInput
    size?: SizeUpdateOneWithoutToolsNestedInput
  }

  export type ToolsUncheckedUpdateWithoutBrandInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    price_h?: FloatFieldUpdateOperationsInput | number
    price_d?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    powerId?: NullableIntFieldUpdateOperationsInput | number | null
    sizeId?: NullableIntFieldUpdateOperationsInput | number | null
    image?: StringFieldUpdateOperationsInput | string
    orderProduct?: orderProductUncheckedUpdateManyWithoutToolNestedInput
    professions?: ProfessionUncheckedUpdateManyWithoutToolsNestedInput
  }

  export type ToolsUncheckedUpdateManyWithoutBrandInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    price_h?: FloatFieldUpdateOperationsInput | number
    price_d?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    powerId?: NullableIntFieldUpdateOperationsInput | number | null
    sizeId?: NullableIntFieldUpdateOperationsInput | number | null
    image?: StringFieldUpdateOperationsInput | string
  }

  export type ToolsCreateManyPowerInput = {
    id?: number
    name: string
    desc: string
    price_h: number
    price_d: number
    quantity: number
    code: number
    brandId?: number | null
    isActive?: boolean
    sizeId?: number | null
    image: string
  }

  export type ToolsUpdateWithoutPowerInput = {
    name?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    price_h?: FloatFieldUpdateOperationsInput | number
    price_d?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    image?: StringFieldUpdateOperationsInput | string
    orderProduct?: orderProductUpdateManyWithoutToolNestedInput
    professions?: ProfessionUpdateManyWithoutToolsNestedInput
    brand?: BrandUpdateOneWithoutToolsNestedInput
    size?: SizeUpdateOneWithoutToolsNestedInput
  }

  export type ToolsUncheckedUpdateWithoutPowerInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    price_h?: FloatFieldUpdateOperationsInput | number
    price_d?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: IntFieldUpdateOperationsInput | number
    brandId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sizeId?: NullableIntFieldUpdateOperationsInput | number | null
    image?: StringFieldUpdateOperationsInput | string
    orderProduct?: orderProductUncheckedUpdateManyWithoutToolNestedInput
    professions?: ProfessionUncheckedUpdateManyWithoutToolsNestedInput
  }

  export type ToolsUncheckedUpdateManyWithoutPowerInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    price_h?: FloatFieldUpdateOperationsInput | number
    price_d?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: IntFieldUpdateOperationsInput | number
    brandId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sizeId?: NullableIntFieldUpdateOperationsInput | number | null
    image?: StringFieldUpdateOperationsInput | string
  }

  export type ToolsCreateManySizeInput = {
    id?: number
    name: string
    desc: string
    price_h: number
    price_d: number
    quantity: number
    code: number
    brandId?: number | null
    isActive?: boolean
    powerId?: number | null
    image: string
  }

  export type ToolsUpdateWithoutSizeInput = {
    name?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    price_h?: FloatFieldUpdateOperationsInput | number
    price_d?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    image?: StringFieldUpdateOperationsInput | string
    orderProduct?: orderProductUpdateManyWithoutToolNestedInput
    professions?: ProfessionUpdateManyWithoutToolsNestedInput
    brand?: BrandUpdateOneWithoutToolsNestedInput
    power?: PowerUpdateOneWithoutToolsNestedInput
  }

  export type ToolsUncheckedUpdateWithoutSizeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    price_h?: FloatFieldUpdateOperationsInput | number
    price_d?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: IntFieldUpdateOperationsInput | number
    brandId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    powerId?: NullableIntFieldUpdateOperationsInput | number | null
    image?: StringFieldUpdateOperationsInput | string
    orderProduct?: orderProductUncheckedUpdateManyWithoutToolNestedInput
    professions?: ProfessionUncheckedUpdateManyWithoutToolsNestedInput
  }

  export type ToolsUncheckedUpdateManyWithoutSizeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    price_h?: FloatFieldUpdateOperationsInput | number
    price_d?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: IntFieldUpdateOperationsInput | number
    brandId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    powerId?: NullableIntFieldUpdateOperationsInput | number | null
    image?: StringFieldUpdateOperationsInput | string
  }

  export type masterProfessionsCreateManyMasterInput = {
    id?: number
    minWorking_h?: number | null
    professionId: number
    levelId: number
    price_h?: number | null
    price_d?: number | null
    experience: number
  }

  export type masterProfessionsUpdateWithoutMasterInput = {
    minWorking_h?: NullableIntFieldUpdateOperationsInput | number | null
    price_h?: NullableFloatFieldUpdateOperationsInput | number | null
    price_d?: NullableFloatFieldUpdateOperationsInput | number | null
    experience?: IntFieldUpdateOperationsInput | number
    level?: LevelUpdateOneRequiredWithoutMasterProfessionNestedInput
    profession?: ProfessionUpdateOneRequiredWithoutMasterProfessionNestedInput
  }

  export type masterProfessionsUncheckedUpdateWithoutMasterInput = {
    id?: IntFieldUpdateOperationsInput | number
    minWorking_h?: NullableIntFieldUpdateOperationsInput | number | null
    professionId?: IntFieldUpdateOperationsInput | number
    levelId?: IntFieldUpdateOperationsInput | number
    price_h?: NullableFloatFieldUpdateOperationsInput | number | null
    price_d?: NullableFloatFieldUpdateOperationsInput | number | null
    experience?: IntFieldUpdateOperationsInput | number
  }

  export type masterProfessionsUncheckedUpdateManyWithoutMasterInput = {
    id?: IntFieldUpdateOperationsInput | number
    minWorking_h?: NullableIntFieldUpdateOperationsInput | number | null
    professionId?: IntFieldUpdateOperationsInput | number
    levelId?: IntFieldUpdateOperationsInput | number
    price_h?: NullableFloatFieldUpdateOperationsInput | number | null
    price_d?: NullableFloatFieldUpdateOperationsInput | number | null
    experience?: IntFieldUpdateOperationsInput | number
  }

  export type orderProductCreateManyProfessionsInput = {
    id?: number
    isActive: string
    timeUnit: string
    workingTime: number
    price: number
    count: number
    toolId?: number | null
    levelId?: number | null
    orderId: number
  }

  export type masterProfessionsCreateManyProfessionInput = {
    id?: number
    minWorking_h?: number | null
    levelId: number
    price_h?: number | null
    price_d?: number | null
    experience: number
    masterId: number
  }

  export type professionLevelCreateManyProfessionInput = {
    id?: number
    levelId: number
    minWorking_h: number
    price_h: number
    price_d: number
  }

  export type orderProductUpdateWithoutProfessionsInput = {
    isActive?: StringFieldUpdateOperationsInput | string
    timeUnit?: StringFieldUpdateOperationsInput | string
    workingTime?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    order?: OrderUpdateOneRequiredWithoutOrderProductNestedInput
    tool?: ToolsUpdateOneWithoutOrderProductNestedInput
    level?: LevelUpdateOneWithoutProductNestedInput
  }

  export type orderProductUncheckedUpdateWithoutProfessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    isActive?: StringFieldUpdateOperationsInput | string
    timeUnit?: StringFieldUpdateOperationsInput | string
    workingTime?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    toolId?: NullableIntFieldUpdateOperationsInput | number | null
    levelId?: NullableIntFieldUpdateOperationsInput | number | null
    orderId?: IntFieldUpdateOperationsInput | number
  }

  export type orderProductUncheckedUpdateManyWithoutProfessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    isActive?: StringFieldUpdateOperationsInput | string
    timeUnit?: StringFieldUpdateOperationsInput | string
    workingTime?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    toolId?: NullableIntFieldUpdateOperationsInput | number | null
    levelId?: NullableIntFieldUpdateOperationsInput | number | null
    orderId?: IntFieldUpdateOperationsInput | number
  }

  export type masterProfessionsUpdateWithoutProfessionInput = {
    minWorking_h?: NullableIntFieldUpdateOperationsInput | number | null
    price_h?: NullableFloatFieldUpdateOperationsInput | number | null
    price_d?: NullableFloatFieldUpdateOperationsInput | number | null
    experience?: IntFieldUpdateOperationsInput | number
    level?: LevelUpdateOneRequiredWithoutMasterProfessionNestedInput
    master?: MasterUpdateOneRequiredWithoutMasterProfessionsNestedInput
  }

  export type masterProfessionsUncheckedUpdateWithoutProfessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    minWorking_h?: NullableIntFieldUpdateOperationsInput | number | null
    levelId?: IntFieldUpdateOperationsInput | number
    price_h?: NullableFloatFieldUpdateOperationsInput | number | null
    price_d?: NullableFloatFieldUpdateOperationsInput | number | null
    experience?: IntFieldUpdateOperationsInput | number
    masterId?: IntFieldUpdateOperationsInput | number
  }

  export type masterProfessionsUncheckedUpdateManyWithoutProfessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    minWorking_h?: NullableIntFieldUpdateOperationsInput | number | null
    levelId?: IntFieldUpdateOperationsInput | number
    price_h?: NullableFloatFieldUpdateOperationsInput | number | null
    price_d?: NullableFloatFieldUpdateOperationsInput | number | null
    experience?: IntFieldUpdateOperationsInput | number
    masterId?: IntFieldUpdateOperationsInput | number
  }

  export type professionLevelUpdateWithoutProfessionInput = {
    minWorking_h?: IntFieldUpdateOperationsInput | number
    price_h?: IntFieldUpdateOperationsInput | number
    price_d?: IntFieldUpdateOperationsInput | number
    level?: LevelUpdateOneRequiredWithoutProfessionLevelNestedInput
  }

  export type professionLevelUncheckedUpdateWithoutProfessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    levelId?: IntFieldUpdateOperationsInput | number
    minWorking_h?: IntFieldUpdateOperationsInput | number
    price_h?: IntFieldUpdateOperationsInput | number
    price_d?: IntFieldUpdateOperationsInput | number
  }

  export type professionLevelUncheckedUpdateManyWithoutProfessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    levelId?: IntFieldUpdateOperationsInput | number
    minWorking_h?: IntFieldUpdateOperationsInput | number
    price_h?: IntFieldUpdateOperationsInput | number
    price_d?: IntFieldUpdateOperationsInput | number
  }

  export type ToolsUpdateWithoutProfessionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    price_h?: FloatFieldUpdateOperationsInput | number
    price_d?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    image?: StringFieldUpdateOperationsInput | string
    orderProduct?: orderProductUpdateManyWithoutToolNestedInput
    brand?: BrandUpdateOneWithoutToolsNestedInput
    power?: PowerUpdateOneWithoutToolsNestedInput
    size?: SizeUpdateOneWithoutToolsNestedInput
  }

  export type ToolsUncheckedUpdateWithoutProfessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    price_h?: FloatFieldUpdateOperationsInput | number
    price_d?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: IntFieldUpdateOperationsInput | number
    brandId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    powerId?: NullableIntFieldUpdateOperationsInput | number | null
    sizeId?: NullableIntFieldUpdateOperationsInput | number | null
    image?: StringFieldUpdateOperationsInput | string
    orderProduct?: orderProductUncheckedUpdateManyWithoutToolNestedInput
  }

  export type ToolsUncheckedUpdateManyWithoutProfessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    price_h?: FloatFieldUpdateOperationsInput | number
    price_d?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    code?: IntFieldUpdateOperationsInput | number
    brandId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    powerId?: NullableIntFieldUpdateOperationsInput | number | null
    sizeId?: NullableIntFieldUpdateOperationsInput | number | null
    image?: StringFieldUpdateOperationsInput | string
  }

  export type orderProductCreateManyToolInput = {
    id?: number
    isActive: string
    timeUnit: string
    workingTime: number
    price: number
    count: number
    levelId?: number | null
    orderId: number
    professionId?: number | null
  }

  export type orderProductUpdateWithoutToolInput = {
    isActive?: StringFieldUpdateOperationsInput | string
    timeUnit?: StringFieldUpdateOperationsInput | string
    workingTime?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    order?: OrderUpdateOneRequiredWithoutOrderProductNestedInput
    level?: LevelUpdateOneWithoutProductNestedInput
    professions?: ProfessionUpdateOneWithoutOrderProductNestedInput
  }

  export type orderProductUncheckedUpdateWithoutToolInput = {
    id?: IntFieldUpdateOperationsInput | number
    isActive?: StringFieldUpdateOperationsInput | string
    timeUnit?: StringFieldUpdateOperationsInput | string
    workingTime?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    levelId?: NullableIntFieldUpdateOperationsInput | number | null
    orderId?: IntFieldUpdateOperationsInput | number
    professionId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type orderProductUncheckedUpdateManyWithoutToolInput = {
    id?: IntFieldUpdateOperationsInput | number
    isActive?: StringFieldUpdateOperationsInput | string
    timeUnit?: StringFieldUpdateOperationsInput | string
    workingTime?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    levelId?: NullableIntFieldUpdateOperationsInput | number | null
    orderId?: IntFieldUpdateOperationsInput | number
    professionId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProfessionUpdateWithoutToolsInput = {
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: StringFieldUpdateOperationsInput | string
    orderProduct?: orderProductUpdateManyWithoutProfessionsNestedInput
    masterProfession?: masterProfessionsUpdateManyWithoutProfessionNestedInput
    professionLevel?: professionLevelUpdateManyWithoutProfessionNestedInput
  }

  export type ProfessionUncheckedUpdateWithoutToolsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: StringFieldUpdateOperationsInput | string
    orderProduct?: orderProductUncheckedUpdateManyWithoutProfessionsNestedInput
    masterProfession?: masterProfessionsUncheckedUpdateManyWithoutProfessionNestedInput
    professionLevel?: professionLevelUncheckedUpdateManyWithoutProfessionNestedInput
  }

  export type ProfessionUncheckedUpdateManyWithoutToolsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    isActive?: StringFieldUpdateOperationsInput | string
  }

  export type orderProductCreateManyOrderInput = {
    id?: number
    isActive: string
    timeUnit: string
    workingTime: number
    price: number
    count: number
    toolId?: number | null
    levelId?: number | null
    professionId?: number | null
  }

  export type orderProductUpdateWithoutOrderInput = {
    isActive?: StringFieldUpdateOperationsInput | string
    timeUnit?: StringFieldUpdateOperationsInput | string
    workingTime?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    tool?: ToolsUpdateOneWithoutOrderProductNestedInput
    level?: LevelUpdateOneWithoutProductNestedInput
    professions?: ProfessionUpdateOneWithoutOrderProductNestedInput
  }

  export type orderProductUncheckedUpdateWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    isActive?: StringFieldUpdateOperationsInput | string
    timeUnit?: StringFieldUpdateOperationsInput | string
    workingTime?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    toolId?: NullableIntFieldUpdateOperationsInput | number | null
    levelId?: NullableIntFieldUpdateOperationsInput | number | null
    professionId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type orderProductUncheckedUpdateManyWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    isActive?: StringFieldUpdateOperationsInput | string
    timeUnit?: StringFieldUpdateOperationsInput | string
    workingTime?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    toolId?: NullableIntFieldUpdateOperationsInput | number | null
    levelId?: NullableIntFieldUpdateOperationsInput | number | null
    professionId?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}